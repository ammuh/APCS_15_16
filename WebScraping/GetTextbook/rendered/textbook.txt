<h2>Chapter 1</h2><br>  
  <br>
  <table cellspacing="0" cellpadding="0" border="0">
    <tr>
      <td width="90%"><span class="header">A1 Introduction</span></td>
      <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 1 of 8</nobr></font></td>
    </tr>
  </table>
  <br>
  <p class="text">Before we begin to write actual programs, we need to introduce a few basic concepts of object-oriented programming, the style of programming you will learn throughout this curriculum guide. The purpose of this lesson is to give you a feel for object-oriented programming and to introduce its conceptual foundation.</p>
  <p class="text">The key topics for this lesson are:</p>
  <ol type="A" class="text">
    <li><a href="A1-A.html">Classes and Objects</a></li>
    <li><a href="A1-B.html">Methods</a></li>
    <li><a href="A1-C.html">Objects in Software</a></li>
    <li><a href="A1-D.html">Compiling and Running a Program</a></li>
  </ol><br>  
  <br>
  <table cellspacing="0" cellpadding="0" border="0">
    <tr>
      <td width="90%"><span class="header"><a href="../vocabulary/index_A.html#A1">A1 Vocabulary</a></span></td>
      <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 2 of 8</nobr></font></td>
    </tr>
  </table>
  <br>
  <table width="500" border="0">
    <tr class="text">
      <td>ARGUMENT</td>
      <td>ATTRIBUTES</td>
    </tr>
    <tr class="text">
      <td>BEHAVIORS</td>
      <td>CLASS</td>
    </tr>
    <tr class="text">
      <td>COMPILING</td>
      <td>CONSTRUCTOR</td>
    </tr>
    <tr class="text">
      <td>EDITOR</td>
      <td>INSTANCE</td>
    </tr>
    <tr class="text">
      <td>METHOD</td>
      <td>OBJECT</td>
    </tr>
    <tr class="text">
      <td>OBJECT-ORIENTED PROGRAMMING</td>
      <td>SOURCE CODE</td>
    </tr>
    <tr>
      <td>&#xA0;</td>
      <td>&#xA0;</td>
    </tr>
  </table>
  <br>
  <br>  
  <br>
  <table cellspacing="0" cellpadding="0" border="0">
    <tr>
      <td width="90%"><span class="header">A. Classes and Objects</span></td>
      <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 3 of 8</nobr></font></td>
    </tr>
  </table>
  <br>
  <ol class="text">
    <li>
      <p>Object-oriented programming (OOP) attempts to make programs more closely model the way people think about and deal with the world. In OOP, a program consists of a collection of interacting objects. To write such a program you need to describe different types of objects: what they know, how they are created, and how they interact with other objects. Each object in a program represents an item that has a job to do.</p>
    </li>
    <li>
      <p>The world in which we live is filled with objects. For example, an object we are all familiar with is a drawing tool such as a pencil or pen. A drawing tool is an object, which can be described in terms of its attributes and behaviors. Attributes are aspects of an object that describe it, while behaviors are things that the object can do. The attributes of a pencil are its drawing color, width of the line it draws, its location on the drawing surface, etc. Anything that <em>describes</em> an object is called an attribute. Its behaviors consist of drawing a circle, drawing a line in a forward or backward direction, changing its drawing direction, etc. Anything that an object <em>does</em> is called a behavior. Another aspect of an object has to do with <em>creation</em>, which determines the initial state of an object.</p>
    </li>
    <li>
      <p>In order to use an object within a program, we need to provide a definition for the object. This definition is called a class. The class describes how the object behaves, what kind of information it contains, and how to create objects of that type. A class can be thought of as a mold, template, or blueprint that the computer uses to create objects.</p>
      </li>
    <li>
      <p>When building a house, a construction crew uses a blueprint to define the aspects of the house. The blueprint gives the specifications on how many bedrooms there are, how to position the electrical wiring, the size of the garage, etc. However, even two houses built from the same blueprint may have different paint colors and will have different physical locations. Clients who are buying a house may make slight modifications to these blueprints. For example, they may want a bigger garage or a smaller porch. We can see the houses built from the blueprint as objects since they are all similar in structure, but each house has its own unique attributes. In the world of programming, we can view the blueprint just like a class, i.e. a tool for creating our objects.</p>
    </li>
    </ol>
    <p>&#xA0;</p>
  <br><br>  
  <table cellspacing="0" cellpadding="0" border="0">
    <tr>
      <td width="90%"><span class="header">B. Methods</span></td>
      <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 4 of 8</nobr></font></td>
    </tr>
  </table>
  <br>
  <ol class="text">
    <li>
      <p>While a program is running, we create objects from class definitions to accomplish tasks. A task can range from drawing in a paint program, to adding numbers, to depositing money in a bank account. To instruct an object to perform a task, we send a message to it.</p>
    </li>
    <li>
      <p>In Java, we refer to these messages as methods.</p>
    </li>
    <li>
      <p>An object can only receive a message that it understands, which means that the message must be defined within its class.<br>
        </p>
    </li>
    <li>Suppose we take the DrawingTool class (provided by this curriculum in the package gpdraw.jar) and create an object <code>myPencil</code>. In OOP terminology, we say the object <code>myPencil</code> is an instance of the <code>DrawingTool</code> class. An object can only be an instance of one class. We can visually represent an object with an object diagram, as shown in Figure 1.1.</li>
    </ol>
  <p align="center"><img src="http://iws.punahou.edu/user/DKiang/apcs/LessonA1/images/Fig_1_1.gif" width="223" height="113"></p>
  <p align="center" class="text">Figure 1.1 - A <code>DrawingTool</code> object named <code>myPencil</code></p>
  <ol start="5" class="text">
      <li>
        <p>These are some of the behaviors that the DrawingTool class provides:</p>
      </li>
      <ul class="textd">
      <li><code>forward</code></li>
      <li><code>turnLeft</code></li>
      <li><code>getColor</code></li>
      </ul>
        <li><p>To draw a line of a specified length, we call the method <code>forward</code> along with passing the distance to move the pencil. A value we pass to an object&#x2019;s method is called an <em>argument</em>. A diagram of calling a method is shown below in Figure 1.2.</p></li>
  </ol>
  <p align="center"><img src="http://iws.punahou.edu/user/DKiang/apcs/LessonA1/images/Fig_1_2.gif" width="412" height="161"></p>
  <p align="center" class="text">Figure 1.2 Calling the <code>forward</code> method of a <code>DrawingTool</code> object</p>
  <ol start="7" class="text">
    <li>      If we need to change the direction <code>myPencil</code> is facing, we can call the <code>turnLeft</code> method. This will bring a ninety-degree turn to the left. Two left turns can give us a complete reversal of direction, and three left turns essentially gives us a right turn. Notice that we do not need to send any arguments with the <code>turnLeft</code> method. A left turn is simply a left turn and does not need any additional information from the user. A diagram calling <code>turnLeft</code> is shown below in Figure 1.3. </li>
  </ol>  <p align="center"><img src="http://iws.punahou.edu/user/DKiang/apcs/LessonA1/images/Fig_1_3.gif" width="412" height="161"><br>
    <span class="text">Figure 1.3 Calling the <code>turnLeft</code> method of a <code>DrawingTool</code> object</span></p>
  <ol start="8" class="text">
    <li>      The diagrams shown in Figures 1.2 and 1.3 illustrate situations in which an object carries out a request by the user but does not respond to the sender. Figure 1.2 requires arguments from the user because the user must specify how far to move, whereas Figure 1.3 operates without any specific details. However, in many situations we need an object to respond by returning a value to the sender. For example, suppose we want to know the current color that is being used for drawing. We can use the <code>getColor</code> method to return the value. The <code>getColor</code> method is illustrated returning a value to the sender in Figure 1.4 below. </li>
  </ol>  <p align="center" class="text"><img src="http://iws.punahou.edu/user/DKiang/apcs/LessonA1/images/Fig_1_4.gif" width="412" height="161"><br>
    Figure 1.4 - The result of <code>getColor</code> is returned to the sender</p><p>&#xA0;</p><br><br>
<table cellspacing="0" cellpadding="0" border="0">
  <tr>
    <td width="90%"><span class="header">C. Objects in Software</span></td>
    <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 5 of 8</nobr></font></td>
  </tr>
</table>
  <br>
  <ol class="text">
    <li>
      <p>A program is a collection of instructions that performs a particular task on a computer. Software is a collection of one or more programs. Code refers to the actual symbols that a programmer types in that tell the computer what instructions to execute. Individuals who write programs are called programmers, software-engineers, software-architects, and coders among many other terms.</p>
    </li>
    <li>
      <p>OOP is a strategy often employed by software developers. A programmer using an OOP strategy begins by selecting objects that can collectively solve the given problem.</p>
    </li>
    <li>
      <p>To develop a particular program in an OOP fashion, the software developer might begin with a set of <em>program requirements</em>. For example:</p>
      <p align="center" class="text"><em>Write a program to draw a square on a piece of paper with a pencil.</em></p>
    </li>
    <li>
      <p>A way to determine the objects needed in a program is to search for the nouns of the problem. This technique suggests that the above program should have three objects: a pencil, a piece of paper, and a square.</p>
    </li>
    <li>
      <p>Ideally, a programmer <em>reuses</em> an existing class to create objects, as opposed to writing code for a new class. For the purposes of our drawing example, we will use the preexisting <code>DrawingTool</code> and <code>SketchPad</code> classes for the pencil and paper objects. However, we don&#x2019;t have a class for a square that is pre-made, so we must make our own.</p>
    </li>
    <li>      Programming languages can be compared to a foreign language - the first exposure to a written example is bound to seem pretty mysterious. You don&apos;t have to understand the details of the program shown below. They will be covered in more detail in the next lesson.</li>
    </ol>
  <p align="center"><img src="http://iws.punahou.edu/user/DKiang/apcs/LessonA1/images/Code_Sample_1_1.gif" width="551" height="341"></p>
  <blockquote>
    <p align="center" class="text">Code Sample 1.1 - <code>DrawSquare.java</code></p>
  </blockquote>
  <ol start="7" class="text">
      <li>
          <p>In OOP, we concern ourselves mostly with the objects themselves and how they relate to the other objects in the program. However, there must be a starting point for the program to begin creating objects, as the objects would obviously not be able to do anything if they did not exist. Code Sample 1.1 has no starting point and would therefore not be able to do anything by itself. Later on, we will learn how to utilize this code in an actual program.</p>
      </li>
      <li>
          <p>The state of an object depends on its components. The <code>DrawSquare</code> object includes one <code>DrawingTool</code> object declared in the line that begins with the word <code>DrawingTool</code> and a <code>SketchPad</code> object declared in the line that begins with <code>SketchPad</code>. The <code>DrawingTool</code> object is given the name <code>myPencil</code> and the <code>SketchPad</code> object is given the name <code>myPaper</code>.</p>
      </li>
      <li>
          <p>A constructor is a method with the same name as the class. The first instruction will construct a new <code>SketchPad</code> object named <code>myPaper</code> with dimensions of 300 x 300 (read as 300 by 300). The next instruction will cause a new <code>DrawingTool</code> object named <code>myPencil</code> to be constructed using the <code>SketchPad</code> object named <code>myPaper</code>.</p>
      </li>
      <li>
        <p>An object&#x2019;s behavior is determined by <em>instructions</em> within its methods. When the method draw() for a DrawSquare() object is called, the instructions within the <code>draw</code> method will execute in the order they appear. There are seven instructions in the draw method. The first instruction will cause the <code>myPencil</code> to move forward 100 units drawing a line as it goes. The next line tells <code>myPencil</code> to turn left. The remaining 5 steps repeat the process of steps to draw the remaining three sides of the square.</p>
      </li>
  <li>
    <p>The <code>DrawSquare</code> example illustrates the tools that a programmer uses to write a program. A program is built from objects and classes that a programmer writes or reuses. Classes are built from instructions, and these instructions are used in such a way that they manipulate objects to perform the desired tasks. </p>
  </li>
  </ol>
  <p>&#xA0;</p><br><br>
<table cellspacing="0" cellpadding="0" border="0">
  <tr>
    <td width="90%"><span class="header">D. Compiling and Running a Program</span></td>
    <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 6 of 8</nobr></font></td>
  </tr>
</table>
  <br>
  <ol class="text">
    <li><p>A programmer writes the text of a program using a software program called an <em>editor</em>. The text of a program in a particular programming language is referred to as <em>source code</em>, or you can simply use <em>source</em> or <em>code</em> individually. The source code is stored in a file called the <em>source file</em>. For example in the <code>DrawSquare</code> example given above, source code would be created and saved in a file named <code>DrawSquare.java</code>.</p></li>
    <li><p>Compiling is the process of converting a program written in a high-level language into the <em>bytecode</em> language the Java interpreter understands. A Java compiler will generate a <em>bytecode file</em> from a source file if there are no errors in the source file. In the case of <code>DrawSquare</code>, the source statements in the <code>DrawSquare.java</code> source file would be compiled to generate the bytecode file <code>DrawSquare.class</code>. Classes inside a package, such as the <em>gpdraw.jar</em>, have already been compiled into bytecode for you. </p>
      <p align="center"><img src="http://iws.punahou.edu/user/DKiang/apcs/LessonA1/images/Fig_1_5.gif" width="536" height="187"><br>
	  Figure 1.5 - From Source Code to Running Program</p>
    </li>
    <li><p>Errors detected by the compiler are called <em>compilation errors</em>. Compilation errors are actually the easiest type of errors to correct. Most compilation errors are due to the violation of syntax rules. These are the basic rules of languages that programmers must follow so that the interpreter understands what to do. It is similar to grammar in a spoken language and varies from language to language.</p></li>
    <li><p>The Java interpreter will process the bytecode file and execute the instructions in it.</p></li>
    <li><p>If an error occurs while running the program, the interpreter will catch it and stop its execution. Errors detected by the interpreter are called <em>run-time errors</em>. Run-time errors are usually caused by a fault in the logic of the program, such as accidentally causing the computer to try and divide a number by zero.</p>
      <p align="center"><img src="http://iws.punahou.edu/user/DKiang/apcs/LessonA1/images/Fig_1_6.gif" width="160" height="410"><br>
      Figure 1.6 - Edit-Compile-Run Cycle for a Java Program</p>
    </li>
  </ol>
  <p>&#xA0;</p>
<br>  
  <br>  <table cellspacing="0" cellpadding="0" border="0">
    <tr>
      <td width="90%"><span class="header">LAB ASSIGNMENT A1.1</span></td>
      <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 8 of 8</nobr></font></td>
    </tr>
  </table>
  <p><span class="subhead">DrawHouse</span></p>
  <p><span class="subhead">Background:</span></p>
  <p class="text">You will be provided with a file named gpdraw.jar, which contains the code needed to implement the graphics tools to draw objects. The specifications of the drawing tools are provided in <a href="HA1_1DrawingTool.html" target="_blank">Handout A1.1 - DrawingTool</a>. Simply place the <code>gpdraw.jar</code> file in the appropriate folder location so the Java compiler can find it. Then add this line of code at the top of your program and the drawing tools are available for use.</p>
  <pre><code><strong>import</strong> gpdraw.*;</code></pre>
  <p class="text"><span class="subhead">Assignment:</span></p>
  <p class="text">Write a program that creates a drawing area of appropriate size (try 500 x 500) and draws a house similar to the one shown below and with these specifications:</p>
  <p align="center"><img src="http://iws.punahou.edu/user/DKiang/apcs/LessonA1/images/Lab_DrawHouse.gif" width="350" height="350"></p>
  <ol class="text">
	  <li><p>The house should fill up most of the drawing area, i.e. draw it big.</p></li>
      <li><p>The house should be centered horizontally on the screen.</p></li>
      <li><p>The house must have a sloped roof. It can be of any slope or configuration. But you cannot have a flat roof on the house.</p></li>
      <li><p>Adding a door (centered) and windows is optional.</p></li>
  </ol>
  <p><span class="subhead">Instructions:</span></p>
  <ol class="text">
      <li><p>Include your name as a documentation statement and also a brief description of the program.</p></li>
      <li><p>You will need to turn in (either on paper or electronically) a copy of your code and a picture of the house that resulted.</p></li>
  </ol>
  <p>&#xA0;</p>
  <br>  
  <br>
  <table cellspacing="0" cellpadding="0" border="0">
    <tr>
      <td width="90%"><span class="header">Summary/Review</span></td>
      <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 7 of 8</nobr></font></td>
    </tr>
  </table>
  <br>
  <p class="text">One can think of an OOP application as a simulated world of active objects. Each object has a set of methods that can process messages of certain types, send messages to other objects, and create new objects. Programmers can either define new classes for use in their program, or they can use pre-existing classes to create the objects for their application.</p>
  <br><br><br><h2>Chapter 2</h2><br>  
  <br>
  <table cellspacing="0" cellpadding="0" border="0">
    <tr>
      <td width="90%"><span class="header">A2 Introduction</span></td>
      <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 1 of 9</nobr></font></td>
    </tr>
  </table>
  <br>
  <p class="text">Java is a &#x201C;high-level&#x201D; computer programming language. High-level languages are more similar to English (or other human languages) than machine code. Programming in binary (ones and zeros) or Assembly would be considered low-level. In this section, we will continue to explore the world of OOP by looking at the example from Student Lesson A1 in more detail.</p>
  <p class="text">The key topics for this lesson are:</p>
  <ol type="A" class="text">
    <li class="text"><a href="A2-A.html">Our First Java Application</a></li>
    <li class="text"><a href="A2-B.html">Program Components</a></li>
    <li class="text"><a href="A2-C.html">Object Declaration, Creation, and Message Sending</a></li>
    <li class="text"><a href="A2-D.html">Class Diagrams</a></li>
   <li class="text"><a href="A2-E.html">The Difference Between Objects and Classes</a></li>
  </ol><br>  
  <br>
  <table cellspacing="0" cellpadding="0" border="0">
    <tr>
      <td width="90%"><span class="header"><a href="../vocabulary/index_A.html#A2">A2 Vocabulary</a></span></td>
      <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 2 of 9</nobr></font></td>
    </tr>
  </table>
  <br>
  <table width="500" border="0">
    <tr class="text">
      <td>CLASS DIAGRAM</td>
      <td>COMMENTS</td>
    </tr>
    <tr class="text">
      <td>CONSTRUCTOR</td>
      <td>DRIVER CLASS</td>
    </tr>
    <tr class="text">
      <td>IDENTIFIER</td>
      <td><code>import</code></td>
    </tr>
    <tr class="text">
      <td><code>main</code></td>
      <td>MESSAGE</td>
    </tr>
    <tr class="text">
      <td><code>new</code></td>
      <td>PACKAGE</td>
    </tr>
    <tr class="text">
      <td>UML</td>
      <td>&#xA0;</td>
    </tr>
    <tr>
      <td>&#xA0;</td>
      <td>&#xA0;</td>
    </tr>
  </table>
  <br>
  <br>  
  <br>
  <table cellspacing="0" cellpadding="0" border="0">
    <tr>
      <td width="90%"><span class="header">A. Our First Java Application</span></td>
      <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 3 of 9</nobr></font></td>
    </tr>
  </table>
  <br>
  <ol class="text">
    <li><p>Our first bit of Java code in Lesson A1 will display a square in a window as shown in Figure 2.1. Although this program is very simple, it illustrates the fundamental strategy of an object-oriented program.</p></li>
  <p align="center"><img src="http://iws.punahou.edu/user/DKiang/apcs/LessonA2/images/Fig_2_1.gif" width="300" height="299"><br>
      <span class="text">Figure 2.1 - <code>DrawSquare</code></span></p>
      <li><p>The following is the Java class that we encountered in the previous lesson:</p></li>
  <p align="center"><img src="http://iws.punahou.edu/user/DKiang/apcs/LessonA2/images/Code_Sample_2_1.gif" width="427" height="370"><br>
    <span class="text">Code Sample 2.1 - <code>DrawSquare.java</code></span></p>
        <li><p>The class is called <code>DrawSquare</code> and the class includes two methods. The first method, DrawSquare(), is named exactly the same as the class and is used in the construction of new instances of this class. The second method is called draw(), and it is where most of the action for this class takes place.</p></li>
        <li><p>The <code>DrawSquare</code> constructor calls <code>SketchPad</code>&#x2019;s constructor to create a new <code>SketchPad</code> object named <code>myPaper</code> with an initial size of 300 by 300 pixels. This will happen every time a new object of <code>DrawSquare</code> is created.</p></li>
  <li><p>Another object called <code>myPencil</code> is created using the <code>DrawingTool</code> constructor with a drawing area represented by the <code>myPaper</code> object.</p></li>
  <li><p>The method named draw() contains only those instructions directly related to the actual drawing of our square.</p></li>
  <li><p>In order to run this program, we will create what is called a driver or throwaway class. This class serves the purpose of testing DrawSquare. The DrawSquare class should be tested and used in a small class to ensure that it is working as expected. We can then take the DrawSquare class and safely use it in other programs later on.</p>
  <p align="center"><img src="http://iws.punahou.edu/user/DKiang/apcs/LessonA2/images/Code_Sample_2_2.gif" width="387" height="108"></p>
  </li>
  </ol>
  <p>&#xA0;</p>
  <br><br>  
  <table cellspacing="0" cellpadding="0" border="0">
    <tr>
      <td width="90%"><span class="header">B. Program Components</span></td>
      <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 4 of 9</nobr></font></td>
    </tr>
  </table>
  <br>
  <ol class="text">
    <li><p>Programming languages allow the inclusion of comments that are not part of the actual code. Documentation is an important aspect of writing programs as it helps the reader to understand what is going on. Java provides three different styles of comments.</p></li>
    </ol>
  <p align="center"><img src="http://iws.punahou.edu/user/DKiang/apcs/LessonA2/images/Code_Sample_2_3.gif" width="520" height="191"></p>
  <ol class="text" start="2">
      <li><p>Programmers try to avoid &#x201C;reinventing the wheel&#x201D; by using predefined libraries of code. In Java, these predefined classes are grouped into <em>packages</em>. The <strong><code>import</code></strong> statement allows the program to use predefined classes.</p></li>
      <li><p>Java comes with many packages. There are also many packages created by programmers that you can use. There are two non-standard packages supplied in this curriculum guide. The one we have been using so far is called <code>gpdraw</code>. In our example program, the <code>DrawingTool</code> and <code>SketchPad</code> classes are imported from the <code>gpdraw</code> package with the statement</p></li>
      </ol>  <blockquote>
    <p><span class="text"><code><strong>import</strong> gpdraw.*;</code></span></p>
  </blockquote>
  <ol class="text" start="4">
	<li><p>Every Java program contains a main method. However, not all classes need to contain a main method, nor should they.</p></li>
	<li><p>Most classes will contain methods to define a class&#x2019;s behavior. Here we will explore the basic syntax of a method. You will learn how to utilize all of these parts in Student Lesson A4 - Object Behavior. A method has the following general syntax:</p></li>
  </ol>
  <p align="center"><img src="http://iws.punahou.edu/user/DKiang/apcs/LessonA2/images/Code_Sample_2_4.gif" width="453" height="58"></p>
  <ul>
    <li class="text">The <em><strong><code>modifiers</code></strong></em> refer to a sequence of terms designating different kinds of access to methods. (e.g. public, private)</li>
  <li class="text">The <em><strong><code>method_name</code></strong></em> is the name of the method. In the case of Code Sample 2.1, the name of the method is <code>draw</code>.</li>
  <li class="text">The <em><strong><code>return_type</code></strong></em> refers to the type of data a method returns. The data type can be one of the predefined types (e.g., <strong><code>int</code></strong>, <strong><code>double</code></strong>, <strong><code>char</code></strong>, <strong><code>void</code></strong>, <strong><code>String</code></strong>, etc.) or a user-defined type. In Code Sample 2.1, the draw method does not return a value and is therefore designated by the void type.</li>
  <li class="text">The <em><strong><code>parameters</code></strong></em> list will allow us to send values to a method. In our example, we must tell the forward method how far to go. (<code>myPencil.forward(100)</code>). </li>
  <li class="text">The <em><strong><code>method_body</code></strong></em> contains statements to accomplish the work of the method. In this example, there are seven lines of code needed to draw the square.</li>
  </ul><p>&#xA0;</p><br><br>
<table cellspacing="0" cellpadding="0" border="0">
  <tr>
    <td width="90%"><span class="header">C. Object Declaration, Creation, and Message Sending</span></td>
    <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 5 of 9</nobr></font></td>
  </tr>
</table>
  <br>
<ol class="text">
    <li><p>Every object in a program must be declared. An object declaration designates the name of an object and the class to which the object belongs. Its syntax is:</p>
      <blockquote>
        <p><em><code>class_name object_name</code></em></p>
        </blockquote>
    </li>
<ul class="textd">
    <li><span class="text"><code>class_name</code></span> is the name of the class to which these objects belong.</li>
    <li><span class="text"><code>object_name</code></span> is a sequence of object names separated by commas.</li>
</ul>
  </ol>  <blockquote>
  <p class="text">In the case of the <code>DrawSquare</code> example, the <code>myPencil</code> object is declared as</p>
  <blockquote>
    <p class="text"><code>DrawingTool myPencil;</code></p>
    </blockquote>
  <p class="text">other examples:</p>
  <blockquote>
    <p class="text"><code>Account checking;<br>
            Customer bob, betty, bill;</code></p>
  </blockquote>
  <p class="text">The first declaration declares an <code>Account</code> object named <code>checking</code>, and the second declares three <code>Customer</code> objects.</p>
</blockquote>
<ol class="text" start="2">
      <li><p>No objects are actually created by the declaration. An object declaration simply declares the name (identifier) that we use to refer to an object. Calling a constructor using the new operator creates an object. The syntax for <strong><code>creating an object is:</code></strong></p>
          <blockquote>
            <p><code><em>object_name</em> = <strong>new</strong> <em>class_name</em> ( <em>arguments</em> ) ;</code></p>
          </blockquote>
        <ul class="textd">
            <li><span class="text"><code>object_name</code> is the name of the declared object.</span></li>
          <li><span class="text"><code>class_name</code> is the name of the class to which the object belongs.</span></li>
        <li><span class="text"><code>arguments</code> is a sequence of zero or more values passed to the <strong><code>constructor</code></strong>.</span></li>
        </ul>
      <p class="text">In the <code>DrawSquare</code> example, the <code>paper</code> object is created (instantiated) with the statement</p>
      </li>
      <blockquote>
          <p><code>myPaper = <strong>new</strong> SketchPad(300, 300);</code></p>
        </blockquote>
      <li><p>After the object is created, we can start sending messages to it. The syntax for sending a message to an object is</p>
      <blockquote>
            <p align="left" class="text"><code>object_name.method_name( arguments );</code></p>
          </blockquote>
      </li>
      <ul class="textd">
          <li><code>object_name</code> is the name of the declared object.</li>
        <li><code>method_name</code> is the name of a method of the object.</li>
    <li><code>arguments</code> is a sequence of zero or more values passed to the method.</li>
</ul>
</ol>
<blockquote>
  <p class="text">In the <code>DrawSquare</code> example, the <code>myPencil</code> object is sent a sequence of messages; <code>forward</code> with an argument of 100, and <code>turnLeft</code> with an argument of 90.</p>
</blockquote>
<ol class="text">
  <blockquote>
          <p class="text"><code>myPencil.forward(100);<br>
          myPencil.turnLeft(90);</code></p>
        </blockquote>
</ol><p>&#xA0;</p><br><br>
<table cellspacing="0" cellpadding="0" border="0">
  <tr>
    <td width="90%"><span class="header">D. Class Diagrams</span></td>
    <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 6 of 9</nobr></font></td>
  </tr>
</table>
  <br>
  <ol class="text">
    <li><p>Pictures are often helpful when designing software. One particularly useful picture is the class diagram. A class diagram shows the key features of a class including:</p>      
	<ul class="textd">
      <li>the class name</li>
      <li>the class attributes</li>
	  <li>the class methods</li>
	</ul>
    </li>
  <p align="center"><img src="http://iws.punahou.edu/user/DKiang/apcs/LessonA2/images/Fig_2_2.gif" width="150" height="141"><br>
  <span class="text">Figure 2.2 - General form of a Class diagram</span></p></ol>
  <ol class="text" start="2">
    <li><p>A software class consists of attributes (think of these as nouns) and methods (think of these as verbs).</p></li>
	<li><p>An attribute, or <em>instance variable</em>, represents a property of an object.</p></li>
	<li><p>A method is an operation that can be performed upon an object. It is useful to picture the attributes and methods as a class diagram with the following general form.</p></li>
	<li><p>The class diagram is a rectangle with three compartments separated by horizontal lines. The top compartment contains the name of the class. The middle compartment lists the attributes of the class, and the bottom compartment shows the class methods. This class notation is part of the <em>Unified Modeling Language (UML)</em>. UML is the most widely used set of notations in today&#x2019;s software engineering industry. A diagram for the <code>DrawSquare</code> class is shown below.</p>
          <p align="center"><img src="http://iws.punahou.edu/user/DKiang/apcs/LessonA2/images/Fig_2_3.gif" width="500" height="171"><br>
          Figure 2.3 - Class diagram for the <code>DrawSquare</code> class</p>
	</li>
  <li><p>The methods of the class are listed in the bottom compartment of the class diagram. One of the methods in the <code>DrawSquare</code> class has the same name as the class (<code>DrawSquare()</code>). It may seem strange for a method to have the same name as its class, but this is how you give instructions on how to create objects of this class. This is called a constructor.</p></li>
  <li><p>The <code>DrawSquare</code> class also makes use of another class: <code>DrawingTool</code> (the class of the <code>myPencil</code> object). The class diagram for this class is shown in Figure 2.4. This figure illustrates a couple of new notations that are typical of class diagrams.</p></li>
  </ol>
  <p align="center"><img src="http://iws.punahou.edu/user/DKiang/apcs/LessonA2/images/Fig_2_4.gif" width="350" height="263"><br>
    <span class="text">Figure 2.4 - Class diagram for the <code>DrawSquare</code> class</span></p>
  <blockquote>
    <p align="left" class="text">The &#x201C;...&#x201D; notation shown within the class diagram indicates that the list of methods is incomplete. There are more methods in the <code>DrawingTool</code> class that are not shown, because they are not relevant to the discussion.</p>
  <p class="text">UML diagrams frequently include labels within &#x201C;&lt;&lt; &gt;&gt;&#x201D; symbols to categorize the class methods. In Figure 2.4, the <code>DrawingTool()</code> method is categorized as a <em>constructor</em> method while <code>down</code>, <code>forward</code>, and <code>turnLeft</code> are <em>modifier</em> methods. The distinction between constructor and modifier categories will be covered in a later lesson.</p>
  </blockquote>
  <p>&#xA0;</p>
  <br><br>
<table cellspacing="0" cellpadding="0" border="0">
  <tr>
    <td width="90%"><span class="header">E. The Difference Between Objects and Classes</span></td>
    <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 7 of 9</nobr></font></td>
  </tr>
</table>
  <br>
<ol class="text">
	<li><p>An object is very closely associated with the class to which it belongs. An object has attributes as defined by its class. An object&#x2019;s behavior is restricted by the methods that are included in its class. However, there are significant differences between objects and classes.</p></li>
</ol>
<blockquote>
    <p class="text">A class:</p>
    <ul>
	<li class="text">is a blueprint that defines attributes and methods.</li>
	<li class="text">is written by a programmer.</li>
	<li class="text">cannot be altered during program execution.</li>
	<li class="text">is named by a class name.</li>
    </ul>
	<p class="text">An object:</p>
	<ul>
	<li class="text">must belong to some class. </li>
	<li class="text">is an instance of that class.</li>
	<li class="text">exists during the time that a program executes.</li>
	<li class="text">must be explicitly declared and constructed by the executing program.</li>
	<li class="text">has attributes that can change in value and methods that can execute during program execution. (The class to which the object belongs defines theses attributes and methods.)</li>
	<li class="text">is most often referenced using an identifier.</li>
	</ul>
</blockquote>
<ol class="text" start="2">
	<li><p>Classes can be compared to a blueprint. The purpose of a blueprint is to provide a guide for creating things, just as the purpose of a class is to guide the creation of objects. A single blueprint is designed to produce a single basic type of object. Similarly, the objects from the same class all share common characteristics.</p></li>
	<li><p>Each object must belong to one particular class, and the object is said to be a member of the class to which it belongs. The <code>myPencil</code> object that was created earlier belongs to the <code>DrawingTool</code> class. This means that the <code>myPencil</code> object is permitted to perform <code>DrawingTool</code> methods (operations). This also means that the <code>myPencil</code> object is <em>not</em> permitted to perform <code>DrawSquare</code> methods; these methods are designed for a different kind (class) of object.</p></li>
</ol>
<p>&#xA0;</p>
<br>  
  <br>
  <table cellspacing="0" cellpadding="0" border="0">
    <tr>
      <td width="90%"><span class="header">Summary/Review</span></td>
      <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 8 of 9</nobr></font></td>
    </tr>
  </table>
  <br>
  <p class="text">A programmer designs and writes classes that can later be used in other classes to create objects of that class. The objects then work together to solve your problem. Breaking down a large problem into a collection of smaller problems in this way is a very useful programming technique. When designing a class, we must consider the behaviors and attributes of the objects created from that class, as well as how we will create those new objects.</p>
  <br><br><br><h2>Chapter 3</h2><br>  
  <br>
  <table cellspacing="0" cellpadding="0" border="0">
    <tr>
      <td width="90%"><span class="header">A3 Introduction</span></td>
      <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 1 of 14</nobr></font></td>
    </tr>
  </table>
  <br>
  <p class="text">When designing a class, one of the programmer&#x2019;s jobs is to define the attributes of the class. Java allows two different types of attributes: objects and primitive data types. Using objects as attributes will come naturally as you become more used to OOP. Java provides several primitive data types to store basic information and uses objects to fill in gaps that are not provided with the primitive data types. Java is a richly typed language, which means that it gives the programmer a wide variety of data types to use. As the name suggests, primitive data types are very basic in nature. In this lesson you will declare variables, store values in them, learn operations to manipulate and use those values, and print out the values using the <code>System.out</code> object.</p>
  <p class="text">The key topics for this lesson are:</p>
  <ol type="A" class="text">
    <li class="text"><a href="A3-A.html">Identifiers in Java</a></li>
    <li class="text"><a href="A3-B.html">Primitive Data Types in Java</a></li>
    <li class="text"><a href="A3-C.html">Declaring and Initializing Variables in Java</a></li>
    <li class="text"><a href="A3-D.html">Printing Variables Using the System.out Object</a></li>
    <li class="text"><a href="A3-E.html">Assignment Statements</a></li>
    <li class="text"><a href="A3-F.html">Math Operators</a></li>
    <li class="text"><a href="A3-G.html">Precedence of Math Operators</a></li>
    <li class="text"><a href="A3-H.html">Assignment Operators</a></li>
    <li class="text"><a href="A3-I.html">Increment and Decrement Operators</a></li>
  </ol><br>  
  <br>
  <table cellspacing="0" cellpadding="0" border="0">
    <tr>
      <td width="90%"><span class="header"><a href="../vocabulary/index_A.html#A3">A3 Vocabulary</a></span></td>
      <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 2 of 14</nobr></font></td>
    </tr>
  </table>
  <br>
  <table width="500" border="0">
    <tr class="text">
      <td>ASCII</td>
      <td>ASSIGNMENT OPERATOR</td>
    </tr>
    <tr class="text">
      <td><strong><code>boolean</code></strong></td>
      <td><strong><code>char</code></strong></td>
    </tr>
    <tr class="text">
      <td>DECREMENT OPERATOR</td>
      <td><strong><code>double</code></strong></td>
    </tr>
    <tr class="text">
      <td>ESCAPE SEQUENCE</td>
      <td><strong><code>float</code></strong></td>
    </tr>
    <tr class="text">
      <td>INCREMENT OPERATOR</td>
      <td>IDENTIFIER</td>
    </tr>
    <tr class="text">
      <td><strong><code>int</code></strong></td>
      <td>MODULUS OPERATOR</td>
    </tr>
    <tr class="text">
      <td>PRECEDENCE</td>
      <td>PRIMITIVE DATA TYPE</td>
    </tr>
    <tr class="text">
      <td>RESERVED WORDS</td>
      <td>STRING LITERAL</td>
    </tr>
    <tr class="text">
      <td>TYPE CONVERSION</td>
      <td>&#xA0;</td>
    </tr>
  </table>
  <br>
  <br>  
  <br>
  <table cellspacing="0" cellpadding="0" border="0">
    <tr>
      <td width="90%"><span class="header">A. Identifiers in Java</span></td>
      <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 3 of 14</nobr></font></td>
    </tr>
  </table>
  <br>
  <ol class="text">
    <li><p>An identifier is a name that will be used to describe classes, methods, constants, variables; anything a programmer is required to define.</p></li>
  <li><p>The rules for naming identifiers in Java are:
    <ul class="textd">
      <li>Identifiers must begin with a letter.</li>
    <li>Only letters, digits, or an underscore may follow the initial letter.</li>
    <li>The blank space cannot be used.</li>
    <li>Identifiers cannot be reserved words. Reserved words or keywords are already defined in Java. These include words such as <em>new</em>, <em>class</em>, <em>int</em>, etc. <strong>See <a href="HA3_1ReservedWordsinJava.html" target="_blank">Handout A3.1</a>, Reserved Words in Java</strong></li>
    </ul>
  </p><p>Java is a case sensitive language. That is, Java will distinguish between upper and lower case letters in identifiers. Therefore:</p>
  <blockquote>
    <p><code>grade</code> and <code>Grade</code> are different identifiers</p>
    </blockquote></li>
  <li><p>Be careful both when naming identifiers and when typing them into the code. Be consistent and don&#x2019;t use both upper and lower case names for the same identifier.</p></li>
  
<li>A good identifier should help describe the nature or purpose of whatever it is naming. For a variable name, it is better to use
  <blockquote>
    <p><code>grade</code> instead of <code>g</code>, <code>number</code> instead of <code>n</code>.</p>
  </blockquote>
</li>
<li><p>However, avoid excessively long or &quot;cute&quot; identifiers such as:</p>
  <blockquote>
    <p><code>gradePointAverageForStudentsAToZ</code> <br>
      or <code>bigHugeUglyNumberThatIsPrettyPointlessButINeedItAnyway</code></p>
  </blockquote>
</li>
</ol>
  <blockquote>
    <p class="text">Remember that the goal is to write code that is professional in nature; other programmers need to understand your code.</p>
  </blockquote>
  <ol class="text" start="6">
    <li><p>Programmers will adopt different styles of using upper and lower case letters in writing identifiers. The reserved keywords in Java must be typed in lower case text, but identifiers can be typed using any combination of upper and lower case letters.</p>
    </li>
  <li><p>The following conventions will be used throughout this curriculum guide:
    <ul class="textd">
      <li>A single word identifier will be written in lower case only. Examples: <code>grade</code>, <code>number</code>, <code>sum</code>.</li>
    <li>Class names will begin with upper case. Examples: String, DrawingTool, SketchPad, Benzene.</li>
    <li>If an identifier is made up of several words, all words beyond the first will begin with upper case. Examples: <code>stringType</code>, <code>passingScore</code>, <code>largestNum</code>, <code>DrawHouse</code>, <code>SketchPad</code>.</li>
    <li>Identifiers used as constants will be fully capitalized. Examples: <code>PI</code>, <code>MAXSTRLEN</code>.</li>
    </ul></p>
  </li>
  </ol>
  <p>&#xA0;</p>
  <br><br>  
  <table cellspacing="0" cellpadding="0" border="0">
    <tr>
      <td width="90%"><span class="header">B. Primitive Data Types in Java</span></td>
      <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 4 of 14</nobr></font></td>
    </tr>
  </table>
  <br>
  <ol class="text">
    <li><p>Java provides eight primitive data types: <code><b>byte</b></code>, <code><b>short</b></code>, <code><b>int</b></code>, <code><b>long</b></code>, <code><b>float</b></code>, <code><b>double</b></code>, <code><b>char</b></code>, and <code><b>boolean</b></code>. The data types <code><b>byte</b></code>, <code><b>short</b></code>, <code><b>int</b></code>, and <code><b>long</b></code> are for integers, and the data types <code><b>float</b></code> and <code><b>double</b></code> are for real numbers (numbers with decimal places).</p></li>
      <li><p>The College Board Advanced Placement (AP) Examinations only require you to know about the <strong><code>int</code></strong>, <strong><code>double</code></strong>, and <strong><code>boolean</code></strong> data types. This curriculum will, from time to time, also use the <strong><code>char</code></strong> type when appropriate.</p></li>
      <li><p>An integer is any positive or negative number without a decimal point.</p>
<blockquote>
        <p>Examples: <code>7 -2 0 2025</code> </p>
      </blockquote>
      </li>
      <li><p>A double is any signed or unsigned number with a decimal point. Doubles cannot contain a comma or any symbols. A double value can be written using scientific notation.</p>
    <ul class="textd">
	<li>Valid numbers: <code>7.5 -66.72 0.125 5</code></li>
    <li>Invalid numbers: <code>$37,582.00 #5.0 10.72%</code></li>
    <li>Scientific notation: <code>1625. = 1.625e3 .00125 = 1.25e-4</code></li>
	</ul></li>
  </ol><blockquote>
    <p class="text">(Note: When applying 5 to a double variable, Java will automatically add the decimal point for you.)</p>
  </blockquote>
  <ol class="text" start="5">
    <li><p>The following table summarizes the bytes allocated and the resulting size. </p>
    <blockquote>
    <table width="100%" border="0" cellspacing="0" cellpadding="2">
      <tr class="text">
        <td>&#xA0;</td>
        <td><strong>Size</strong></td>
        <td><strong>Minimum Value</strong></td>
        <td><strong>Maximum Value</strong></td>
      </tr>
      <tr class="text">
        <td><strong><code>byte</code></strong></td>
        <td>1 byte</td>
        <td>-128</td>
        <td>127</td>
      </tr>
      <tr class="text">
        <td><strong><code>short</code></strong></td>
        <td>2 bytes</td>
        <td>-32768</td>
        <td>32767</td>
      </tr>
      <tr class="text">
        <td><strong><code>int</code></strong></td>
        <td>4 bytes</td>
        <td>-2147483648</td>
        <td>2147483647</td>
      </tr>
      <tr class="text">
        <td><strong><code>long</code></strong></td>
        <td>8 bytes</td>
        <td>-9223372036854775808</td>
        <td>9223372036854775807</td>
      </tr>
      <tr class="text">
        <td><strong><code>float</code></strong></td>
        <td>4 bytes</td>
        <td>-3.40282347E+38</td>
        <td>3.40282347E+38</td>
      </tr>
      <tr class="text">
        <td><strong><code>double</code></strong></td>
        <td>8 bytes</td>
        <td>-1.79769313486231570E+308</td>
        <td>1.79769313486231570E+308</td>
      </tr>
    </table>
    </blockquote>
	</li>
    <li><p>Character type consists of letters, digits 0 through 9, and punctuation symbols. A character must be enclosed within single quotes.</p>
	<blockquote>
      <p class="text">Examples: <code>&apos;A&apos;, &apos;a&apos;, &apos;8&apos;, &apos;*&apos;</code></p>
      <p class="text">Java characters are stored using 2 bytes according to the ASCII code. ASCII stands for American Standard Code for Information Interchange. <strong>See <a href="HA3_2AsciiCharacters.html" target="_blank">Handout A3.2</a>, ASCII Characters - A Partial List</strong></p>
      <p class="text">Using ASCII, the character value &apos;A&apos; is actually stored as the integer value 65. Because a capital &apos;A&apos; and the integer 65 are physically stored in the same fashion, this will allow us to easily convert from character to integer types, and vice versa. </p>
      <p><img src="http://iws.punahou.edu/user/DKiang/apcs/LessonA3/images/primitive_data_type.gif" width="341" height="250"></p>
      </blockquote>
    </li>
    <li><p>In Java, you can make a direct assignment of a character value to an integer variable, and vice versa. This is possible because both an integer and a character variable are ultimately stored in binary. However, it is better to be more explicit about such conversions by using type conversions. For example, the two lines of code below assign to position the ASCII value of letter.</p>
	<blockquote>
        <p align="left"><img src="http://iws.punahou.edu/user/DKiang/apcs/LessonA3/images/Fig_3_2.gif" width="477" height="220"></p>
      </blockquote></li>
    <li><p>Programmers use the single quote to represent char data and double quotes to denote String types. To use either of those characters in a String literal, such as in a System.out.println statement, you must use an escape sequence. Java provides escape sequences for unusual keystrokes on the keyboard. Here is a partial list:</p>
  <blockquote>
  <table width="60%" border="0" cellpadding="2" cellspacing="0">
    <tr class="text">
      <td><strong>Character</strong></td>
      <td><strong>Java Escape Sequence</strong></td>
    </tr>
    <tr class="text">
      <td>Newline</td>
      <td><code>&apos;\n&apos;</code></td>
    </tr>
    <tr class="text">
      <td>Horizontal tab</td>
      <td><code>&apos;\t&apos;</code></td>
    </tr>
    <tr class="text">
      <td>Backslash</td>
      <td><code>&apos;\\&apos;</code></td>
    </tr>
    <tr class="text">
      <td>Single quote</td>
      <td><code>&apos;\&apos;&apos;</code></td>
    </tr>
    <tr class="text">
      <td>Double quote</td>
      <td><code>&apos;\&quot;&apos;</code></td>
    </tr>
    <tr class="text">
      <td>Null character</td>
      <td><code>&apos;\0&apos;</code></td>
    </tr>
  </table>
  <p><img src="http://iws.punahou.edu/user/DKiang/apcs/LessonA3/images/Fig_3_3.gif" width="471" height="103"></p>
  </blockquote>
  </li>
    <li><p>Data types are provided by high-level languages to minimize memory usage and processing time. Integers and characters require less memory and are easier to process. Floating-point values require more memory and time to process.</p></li>
  <li><p>The last primitive data type is the type <strong><code>boolean</code></strong>. It is used to represent a single <strong><code>true</code></strong>/<strong><code>false</code></strong> value. A <strong><code>boolean</code></strong> value can have only one of two values:</p>
    <blockquote>
      <table width="60%" border="0" cellspacing="0" cellpadding="2">
        <tr>
          <td><strong><code>true</code></strong></td>
          <td><strong><code>false</code></strong></td>
        </tr>
      </table>
      </blockquote>
  <p>In a Java program, the reserved words <strong><code>true</code></strong> and <strong><code>false</code></strong> always refer to these <strong><code>boolean</code></strong> values.</p>
  </li>
  </ol>
  <p>&#xA0;</p>
  <br><br>
<table cellspacing="0" cellpadding="0" border="0">
  <tr>
    <td width="90%"><span class="header">C. Declaring and Initializing Variables in Java</span></td>
    <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 5 of 14</nobr></font></td>
  </tr>
</table>
  <br>
<ol class="text">
    <li><p>A variable must be declared before it can be initialized with a value. The general syntax of variable declarations is:</p>
      <blockquote>
        <p><em><code>data_type variableName;</code></em></p>
        </blockquote>
    </li>
</ol>  <blockquote><p class="text">for example:</p>
  <p class="text"><code><strong>int</strong> number;<br>
      <strong>char</strong> ch;</code></p>
  </blockquote>
<ol class="text" start="2">
      <li>Variables can be declared in a class outside of any methods or inside of a method. Variables can also be declared and initialized in one line. The following example code illustrates these aspects of variable declaration and initialization.</li>
      </ol>
  <table width="368" border="0" align="center" cellpadding="2" cellspacing="0">
    <tr>
      <td><div align="center"><span class="text"><img src="http://iws.punahou.edu/user/DKiang/apcs/LessonA3/images/Code_Sample_3_1.gif" width="367" height="206"><br>
  Code Sample 3-1</span></div></td>
    </tr>
  </table>
  <blockquote>
    <p class="text">Note that multiple variables can be declared on one line. Initialization is done using the assignment operator (=). Initialization can occur at declaration time or later in the program. The variable sum was declared and used in the same line.</p>
  </blockquote>  <ol class="text" start="3">
        <li>Where variables are declared is a matter of programming style and need since this determines how and where they can be used.</li>
    </ol><p>&#xA0;</p><br><br>
<table cellspacing="0" cellpadding="0" border="0">
  <tr>
    <td width="90%"><span class="header">D. Printing Variables Using the <code>System.out</code> Object</span></td>
    <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 6 of 14</nobr></font></td>
  </tr>
</table>
  <br>
  <ol class="text">
    <li>The <code>System.out</code> object is automatically created in every Java program. It has methods for displaying text strings and numbers in plain text format on the system display, which is sometimes referred to as the &#x201C;console.&#x201D; For example:</li>
  <p align="center"><img src="http://iws.punahou.edu/user/DKiang/apcs/LessonA3/images/Code_Sample_3_2.gif" width="370" height="293"><br>
    Code Sample 3-2  </p></ol>
  <ol class="text" start="2">
    <li><p>Method <code>System.out.println</code> displays (or prints) a line of text in the console window. When <code>System.out.println</code> completes its task, it automatically positions the output cursor (the location where the next character will be displayed) to the beginning of the next line in the console window (this is similar to pressing the <em>Enter</em> key when typing in a text editor-the cursor is repositioned at the beginning of the next line).</p></li>
	<li>The expression</li>
	</ol>
  <blockquote class="text">
    <p class="text"><code>&quot;number = &quot; + number</code></p>
  <p>from the statement</p>
    <p><code>System.out.println(&quot;number = &quot; + number);</code></p>
    <p>uses the + operator to &#x201C;add&#x201D; a string (the literal <code>&quot;number = &quot;</code>) and number (the <code>int</code> variable containing the number 5). Java defines a version of the + operator for <em>String concatenation</em> that enables a string and a value of another data type to be concatenated (added). The result of this operation is a new (and normally longer) String. String concatenation is discussed in more detail later on.</p>
  </blockquote>  <ol class="text" start="4">
    <li>The lines</li>
    </ol>  <blockquote>
    <p class="text"><code>System.out.print(&quot;The &quot;);<br>
  System.out.println(&quot;End!&quot;);</code></p>
  <p class="text">of Code Sample 3-2 display one line in the console window. The first statement uses <code>System.out</code>&#x2019;s method, <code>print</code>, to display a string. Unlike <code>println</code>, <code>print</code> does not position the output cursor at the beginning of the next line in the console window after displaying its argument. The next character displayed in the console window appears immediately after the last character displayed with <code>print</code>.</p>
    </blockquote>  <ol class="text" start="5">
        <li><p>Note the distinction between sending a String literal, &quot;<code>number = </code>&quot;, versus a variable, number, to the <code>System.out</code> object. A <strong><code>boolean</code></strong> variable will be printed as <strong><code>true</code></strong> or <strong><code>false</code></strong>.</p>
        </li>
        <li>The result (or output) of formulas using Strings may also be printed. Note how the placement of the quotes affects the output.</li>
        </ol>  <blockquote>
      <p><img src="http://iws.punahou.edu/user/DKiang/apcs/LessonA3/images/Fig_3_4.gif" width="281" height="106"></p>
    </blockquote>    <p>&#xA0;</p><br><br>
<table cellspacing="0" cellpadding="0" border="0">
  <tr>
    <td width="90%"><span class="header">E. Assignment Statements</span></td>
    <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 7 of 14</nobr></font></td>
  </tr>
</table>
  <br>
<ol class="text">
	<li><p>An assignment statement has the following basic syntax:</p></li>
</ol>
<blockquote class="text">
    <p class="text"><code>variable = expression;</code></p>
    <p>The assignment operator (=) assigns the value of the expression on the right to the variable. </p>
    <blockquote>
      <p><code>a = 5;</code></p>
    </blockquote>
    <p>This is not the same as saying, &#x201C;a equals five,&#x201D; but is more akin to, &#x201C;a receives the value five.&#x201D;</p>
    <p>The expression can be a literal constant value such as 2, 12.25, &apos;t&apos; or it can also be a numeric expression involving operands (variables or constants) and operators.</p>
    <blockquote>
      <p><code>a = 5 + 2;<br>
          b = 6 * a;</code></p>
    </blockquote>
    <p>The assignment operator returns the value of the expression. Returning values in this way allows for chaining of assignment operators. Chaining is when you have more than one assignment in a statement as shown below. </p>
    <blockquote>
      <p><code>a = b = 5;</code></p>
    </blockquote>
    <p>The assignment operator is right-associative. This means that the above statement is really solved in this order:</p>
    <blockquote>
      <p><code>a = (b = 5);// solved from right to left.</code></p>
    </blockquote>
    <p>Since (b = 5) returns the integer 5, the value 5 is also assigned to variable a.</p>
</blockquote>
<ol class="text" start="2">
	<li>Variables contain either primitive data or object references. Notice that there is a difference between the two statements:
	  <blockquote>
	    <p class="text"><code>primitiveValue = 18234;</code></p>
	    </blockquote>
	</li>
	</ol>
<blockquote>
  <p class="text">and</p>
  <blockquote>
    <p class="text"><code>myPencil = new DrawingTool();</code></p>
  </blockquote>
  <p class="text">A variable will <em>never</em> actually contain an object, only a reference to an object. In the first statement, <code>primitiveValue</code> is a primitive type, so the assignment statement puts the data directly into it. In the second statement, <code>myPencil</code> is an object reference variable (the only other possibility) so a reference to the object is put into that variable. The object reference tells the program where to find an object.</p>
  <table width="80%" border="0" align="center" cellpadding="0" cellspacing="0">
  <tr><td bgcolor="#000000">
  <table width="100%" border="0" align="center" cellpadding="4" cellspacing="1">
    <tr valign="top" class="text">
      <td width="30%" bgcolor="#FFFFFF"><strong>Variable Type</strong></td>
      <td width="40%" bgcolor="#FFFFFF"><strong>Information It Contains</strong></td>
      <td width="40%" bgcolor="#FFFFFF"><strong>When On the Left of &quot;=&quot;</strong></td>
    </tr>
    <tr valign="top" class="text">
      <td width="30%" bgcolor="#FFFFFF">primitive</td>
      <td width="40%" bgcolor="#FFFFFF">Contains actual data</td>
      <td width="40%" bgcolor="#FFFFFF">Previous data is replaced with new data</td>
    </tr>
    <tr valign="top" class="text">
      <td width="30%" bgcolor="#FFFFFF">object</td>
      <td width="40%" bgcolor="#FFFFFF">Contains a reference, i.e. information on how to find the object referred to by the variable</td>
      <td width="40%" bgcolor="#FFFFFF">Old reference is replaced with a new reference</td>
    </tr>
  </table>
  </td></tr>
  </table>
  <p class="text">&#xA0;</p>
</blockquote>
<ol class="text" start="3">
  <li><p>The two types of variables are distinguished by how they are declared. Unless it was declared to be of a primitive type, it is an object reference variable. A variable will not change its declared type.</p>
  </li>
<li>  Be aware. Because these assignments work differently with primitive data types and with objects, you may experience unexpected behavior. Consider the following:
  <blockquote>
    <p class="text"><img src="http://iws.punahou.edu/user/DKiang/apcs/LessonA3/images/Fig_3_5.gif" width="416" height="88"></p>
  </blockquote>
</li>
</ol>
<blockquote>
  <p class="text">In this example, pencil will draw a blue line instead of red. This happens because we have only created one object here; we only have one new statement. When we say DrawingTool pen = pencil, all we are doing is assigning the variable name of &#x2018;pen&#x2019; to the same object that pencil is already assigned to. This means that both pen and pencil refer to the same DrawingTool object, and what you tell pen to do is also happening to the pencil, because they are the same object. This may be confusing at first, but once you begin to utilize OOP, it will begin to make more sense.</p>
</blockquote><p>&#xA0;</p>
<br><br>
<table cellspacing="0" cellpadding="0" border="0">
  <tr>
    <td width="90%"><span class="header">F. Math Operators</span></td>
    <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 8 of 14</nobr></font></td>
  </tr>
</table>
  <br>
<ol class="text">
	<li>
	  <p>Java provides 5 math operators as listed below:</p>
	<blockquote>
	    <table width="400" border="0" cellspacing="0" cellpadding="2">
          <tr class="text">
            <td width="50"><code>+</code></td>
            <td>Addition, as well as unary +</td>
          </tr>
          <tr class="text">
            <td width="50"><code>-</code></td>
            <td>Subtraction, as well as unary -</td>
          </tr>
          <tr class="text">
            <td width="50"><code>*</code></td>
            <td>Multiplication</td>
          </tr>
          <tr class="text">
            <td width="50"><code>/</code></td>
            <td>Floating point and integer division</td>
          </tr>
          <tr class="text">
            <td width="50"><code>%</code></td>
            <td>Modulus, remainder of integer or floating point division</td>
          </tr>
        </table>
	    </blockquote>
	</li>
<li><p>The numerical result and data type of the answer depends on the type of operands used in a problem.</p>
	  </li>
	<li>For all the operators, if both operands are integers, the result is an integer. Examples:
	  <blockquote>
	    <table width="500" border="0" cellspacing="0" cellpadding="2">
          <tr class="text">
            <td width="50%"><code>2 + 3 -&gt; 5</code></td>
            <td width="50%"><code>9 - 3 -&gt; 6</code></td>
          </tr>
          <tr class="text">
            <td width="50%"><code>4 * 8 -&gt; 32</code></td>
            <td width="50%"><code>11/2 -&gt; 5</code></td>
          </tr>
        </table>
	    </blockquote>
	<p>Notice that 11/2 is 5, and not 5.5. This is because ints work <em>only</em> with whole numbers. The remaining half is lost in integer division.</p>
	</li>
<li>If either of the operands is a double type, the result is a double type. Examples:
  <blockquote>
    <p><code>2 + 3.000 -&gt; 5.000 <br>
  25 / 6.75 -&gt; 3.7037 <br>
  11.0 / 2.0 -&gt; 5.5</code></p>
    </blockquote>
<p>When an integer and a double are used in a binary math expression, the integer is promoted to a double value, and then the math is executed. In the example <code>2 + 3.000 -&gt; 5.000</code>, the integer value 2 is promoted to a double (<code>2.000</code>) and then added to the <code>3.000</code>.</p>
</li>
<li>The modulus operator (<code>%</code>) returns the remainder of dividing the first operand by the second. For example:
  <blockquote>
    <table width="500" border="0" cellspacing="0" cellpadding="2">
      <tr class="text">
        <td width="50%"><code>10 % 3 -&gt; 1</code></td>
        <td width="50%"><code>2 % 4 -&gt; 2</code></td>
      </tr>
      <tr class="text">
        <td width="50%"><code>16 % 2 -&gt; 0</code></td>
        <td width="50%"><code>27.475 % 7.22 -&gt; 5.815</code></td>
      </tr>
    </table>
    </blockquote>
</li>
<li>Changing the sign of a value can be accomplished with the negation operator (-), often called the unary (-) operator. A unary operator works with only one value. Applying the negation operator to an integer returns an integer, while applying it to a double returns a double value. For example:
  <blockquote>
    <table width="500" border="0" cellspacing="0" cellpadding="2">
      <tr class="text">
        <td width="50%"><code>-(67) -&gt; -67</code></td>
        <td width="50%"><code>-(-2.345) -&gt; 2.345</code></td>
      </tr>
    </table>
    </blockquote>
</li>
<li>To obtain the answer of 5.5 to a question like 11/2, we must cast one of the operands.
  <blockquote>
    <table width="500" border="0" cellspacing="0" cellpadding="2">
      <tr class="text">
        <td width="50%"><code>(<strong>double</strong>)11/2</code></td>
        <td width="50%">results in <code>5.5</code></td>
      </tr>
    </table>
    </blockquote>
<p>The casting operators are unary operators with the following syntax:</p>
<blockquote>
  <p><code>(<em><strong>type</strong></em>) operand</code></p>
  </blockquote>
<p>The same effect can also result from simply</p>
<blockquote>
  <p>11.0/2</p>
</blockquote>
</li>
</ol>
<p>&#xA0;</p><br><br>
<table cellspacing="0" cellpadding="0" border="0">
  <tr>
    <td width="90%"><span class="header">G. Precedence of Math Operators</span></td>
    <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 9 of 14</nobr></font></td>
  </tr>
</table>
  <br>
<ol class="text">
	<li><p>Precedence rules govern the order in which an expression is solved. For example:</p>
	  <blockquote>
	    <table width="450" border="0" cellspacing="0" cellpadding="2">
          <tr class="text">
            <td><code>2 + 3 * 6 -&gt; 20</code></td>
            <td>the * operator has priority over +.</td>
          </tr>
        </table>
	    </blockquote>
	</li>
<li>
  <p>Associativity refers to the order in which operators are applied if they have the same precedence level. The two possibilities are from left-to-right or right-to-left.</p>
</li>
<li>
  <p>A unary operator is used on only one number. An example of a unary operator is the negative sign in the expression <em>-a</em>, meaning the negative of <em>a</em>.</p>
</li>
<li><p>The following table summarizes precedence and associativity of math operators:</p>
<blockquote>
  <table width="90%" border="0" cellpadding="2" cellspacing="0">
    <tr class="text">
      <td width="33%"><div align="center"><strong>Level of Precedence</strong></div></td>
      <td width="33%"><div align="center"><strong>Operator</strong></div></td>
      <td width="33%"><div align="center"><strong>Associativity</strong></div></td>
    </tr>
    <tr class="text">
      <td width="33%"><div align="center"></div></td>
      <td width="33%"><div align="center"></div></td>
      <td width="33%"><div align="center"></div></td>
    </tr>
    <tr class="text">
      <td width="33%"><div align="center">Highest</div></td>
      <td width="33%"><div align="center">unary -</div></td>
      <td width="33%"><div align="center">right to left</div></td>
    </tr>
    <tr class="text">
      <td width="33%"><div align="center"></div></td>
      <td width="33%"><div align="center"><code>* / %</code></div></td>
      <td width="33%"><div align="center">left to right</div></td>
    </tr>
    <tr class="text">
      <td width="33%"><div align="center">Lowest</div></td>
      <td width="33%"><div align="center"><code>+ -</code></div></td>
      <td width="33%"><div align="center">left to right</div></td>
    </tr>
  </table>
</blockquote>
</li>
  <li class="text"><p>An example follows:</p>
<blockquote>
  <table width="95%" border="0" cellspacing="0" cellpadding="2">
    <tr class="text">
      <td><div align="center"><code>9 + 16 / 3 * 7 % 8 - 5</code></div></td>
      <td>(solve / first)</td>
    </tr>
    <tr class="text">
      <td><div align="center"><code>9 + 5 * 7 % 8 - 5</code></div></td>
      <td>(solve * second)</td>
    </tr>
    <tr class="text">
      <td><div align="center"><code>9 + 35 % 8 - 5</code></div></td>
      <td>(solve % next)</td>
    </tr>
    <tr class="text">
      <td><div align="center"><code>9 + 3 - 5</code></div></td>
      <td>(solve left-to-right)</td>
    </tr>
    <tr class="text">
      <td><div align="center"><code>7</code></div></td>
      <td>&#xA0;</td>
    </tr>
  </table>
  </blockquote>
  </li>
  <li class="text"><p>Parentheses take priority over all the math operators.</p>
    <blockquote>
      <p><code>(5+6)/(9-7) -&gt; 11/2 -&gt; 5</code><br>
        (integer division, which drops remainders, is used here)</p>
    </blockquote>
  </li>
</ol>
<p>&#xA0;</p>
<br><br>
<table cellspacing="0" cellpadding="0" border="0">
  <tr>
    <td width="90%"><span class="header">H. Assignment Operators</span></td>
    <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 10 of 14</nobr></font></td>
  </tr>
</table>
  <br>
<ol class="text">
	<li><p>The statement <code>number = number + 5;</code> is an example of an accumulation statement. The old value of <code>number</code> is incremented by <code>5</code> and the new value is stored in <code>number</code>.</p></li>
	<li><p>The above statement can be replaced as follows:</p>
	  <blockquote>
	    <p><code>number += 5;</code></p>
	    </blockquote>
	</li>
<li><p>Java provides the following assignment operators:</p>
  <blockquote>
    <p><code>+=&#xA0;&#xA0; -= &#xA0;&#xA0;*= &#xA0;&#xA0;/= &#xA0;&#xA0;%=</code></p>
    </blockquote>
<p>These statements are preferable to saying number <code>=</code> number + 5 because they are more convenient and easier to read. You can immediately tell at a glance exactly what is being done.</p>
</li>
<li><p>The following examples are equivalent statements:</p>
<blockquote>
  <table width="500" border="0" cellspacing="0" cellpadding="2">
    <tr class="text">
      <td><code>rate *= 1.05;</code></td>
      <td><code>rate = rate * 1.05;</code></td>
    </tr>
    <tr class="text">
      <td><code>sum += 25;</code></td>
      <td><code>sum = sum + 25;</code></td>
    </tr>
    <tr class="text">
      <td><code>number %= 5;</code></td>
      <td><code>number = number % 5;</code></td>
    </tr>
  </table>
  </blockquote>
  </li>
  <li class="text"><p>The precedence of the assignment operators is the lowest of all operators.</p></li>
</ol>
<p>&#xA0;</p><br><br>
<table cellspacing="0" cellpadding="0" border="0">
  <tr>
    <td width="90%"><span class="header">I. Increment and Decrement Operators</span></td>
    <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 11 of 14</nobr></font></td>
  </tr>
</table>
  <br>
<ol class="text">
	<li><p>Incrementing or decrementing by one is a common task in programs. This task can be accomplished by the statements:</p>
	  <blockquote>
	    <p class="text"><code>n = n + 1;</code> &#xA0;&#xA0;&#xA0;or <code>&#xA0;&#xA0;n += 1;</code></p>
	    </blockquote>
	</li>
<li><p>Java also provides a unary operator called an increment operator, ++.</p>
	  </li>
	<li><p>The statement <code>n = n + 1</code> can be rewritten as <code>++n</code>. The following statements are equivalent:</p>
	  <blockquote>
	    <table width="100%" border="0" cellspacing="0" cellpadding="2">
          <tr class="text">
            <td width="50%"><code>n = n + 1;</code></td>
            <td width="50%"><code>++n;</code></td>
          </tr>
          <tr class="text">
            <td width="50%"><code>sum = sum + 1;</code></td>
            <td width="50%"><code>++sum;</code></td>
          </tr>
        </table>
	    </blockquote>
	</li>
<li><p>Java also provides for a decrement operator, <code>--</code>, which decrements a value by one. The following are equivalent statements:</p>
  <blockquote>
    <table width="100%" border="0" cellspacing="0" cellpadding="2">
      <tr class="text">
        <td width="50%"><code>n = n - 1;</code></td>
        <td width="50%"><code>--n;</code></td>
      </tr>
      <tr class="text">
        <td width="50%"><code>sum = sum - 1;</code></td>
        <td width="50%"><code>--sum;</code></td>
      </tr>
    </table>
  </blockquote>
</li>
<li>          The increment and decrement operators can be written as either a prefix or postfix unary operator. If the <code>++</code> is placed before the variable it is called a pre-increment operator (<code>++number</code>), but it can follow after the variable (<code>number++</code>), which is called a post-increment operator. The following three statements have the same effect:
  <blockquote>
    <p><code>++number; &#xA0;&#xA0;&#xA0;number++; &#xA0;&#xA0;&#xA0;number = number + 1;</code></p>
  </blockquote>
</li>
<li><p>Before looking at the difference between prefix and postfix unary operators, it is important to remember Java operators solve problems and often return values. Just as the assignment operator (=) returns a value, the <code>++</code> and <code>--</code> operators return values. Consider the following code fragments:</p>
<p align="center"><img src="http://iws.punahou.edu/user/DKiang/apcs/LessonA3/images/Fig_3_6.gif" width="507" height="94"></p></li>
      <li><p>The statement <code>b = ++a</code> uses the pre-increment operator. It increments the value of <code>a</code> and returns the <u>new</u> value of <code>a</code>.</p></li>
      <li><p>The statement <code>b = a++</code> uses the post-increment operator. It returns the value of <code>a</code> and then increments <code>a</code> by 1.</p></li>
      <li>The precedence and associativity of the unary increment and decrement operators is the same as the unary - operator.</li>
</ol>
<p>&#xA0;</p>
<br>  
  <br>  <table cellspacing="0" cellpadding="0" border="0">
    <tr>
      <td width="90%"><span class="header">LAB ASSIGNMENT A3.2</span></td>
      <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 14 of 14</nobr></font></td>
    </tr>
  </table>
  <p class="subhead">Coins</p>
  <p><span class="subhead">Background:</span></p>
  
  <p class="text">Some cash register systems use change machines that automatically dispense coins. This lab will investigate the problem solving and programming behind such machinery. You always want to use the fewest coins possible. You should use integer mathematics to solve this problem.</p>
  <p class="text">Provide the number of cents through the constructor. Write a method that calculates the number of each type of coin.</p>
  <pre class="text"><code>Examples:
     
 35 cents =&gt;
 Quarter(s)   1
 Dime(s)      1
 Nickel(s)    0
 Penny(s)     0
 
 41 cents =&gt;
 Quarter(s)   1
 Dime(s)      1
 Nickel(s)    1
 Penny(s)     1</code></pre>
  <p><span class="subhead">Assignment:</span></p>
  <ol>
    <li class="text">
      <p>Follow the same format that was used in Lab Assignment A3.1 (Easter), using a driver and a class called Coins.</p>
    </li>
  <li class="text">
    <p>Run the samples from above to check your work.</p>
  </li>
  <li class="text">Run the following three samples and copy the sample runs into your class file, print out the code for the class and hand in.
    <blockquote>
      <p>94 cents<br>
        59 cents<br>
        19 cents</p>
    </blockquote>
  </li>
<li class="text">Do not worry about singular versus plural endings, i.e. quarter/quarters.</li>
  </ol>  <p>&#xA0;</p>
  <br>  
  <br>
  <table cellspacing="0" cellpadding="0" border="0">
    <tr>
      <td width="90%"><span class="header">Summary/Review</span></td>
      <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 12 of 14</nobr></font></td>
    </tr>
  </table>
  <br>
  <p class="text">This lesson has covered a great amount of detail regarding the Java language. At first, it is necessary to memorize the syntax of data types and their operations, but with time and practice, fluency will come. As classes are designed and code is written to solve problems, a primitive data type will often be chosen to store basic information.</p>
  <br><br><br><h2>Chapter 4</h2><br>  
  <br>
  <table cellspacing="0" cellpadding="0" border="0">
    <tr>
      <td width="90%"><span class="header">A4 Introduction</span></td>
      <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 1 of 11</nobr></font></td>
    </tr>
  </table>
  <br>
  <p class="text">It was recognized long ago that programming is best accomplished by working with smaller sections of code that are connected in very specific and formal ways. Programs of any significant size should be broken down into smaller pieces. Classes can be used to create objects that will solve those smaller pieces. We determine what behaviors these objects will perform. These behaviors of the objects are called methods.</p>
  <p class="text">The key topics for this lesson are:</p>
  <ol type="A" class="text">
    <li class="text"><a href="A4-A.html">Writing Methods in Java</a></li>
    <li class="text"><a href="A4-B.html">Parameters and Arguments</a></li>
  <li class="text"><a href="A4-C.html">Returning Values</a></li>
  <li class="text"><a href="A4-D.html">The Signature of a Method</a> </li>
  <li class="text"><a href="A4-E.html">Lifetime, Initialization, and Scope of Variables</a></li>
  <li class="text"><a href="A4-F.html">Getters and Setters</a> </li>
  </ol><br>  
  <br>
  <table cellspacing="0" cellpadding="0" border="0">
    <tr>
      <td width="90%"><span class="header"><a href="../vocabulary/index_A.html#A4">A4 Vocabulary</a></span></td>
      <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 2 of 11</nobr></font></td>
    </tr>
  </table>
  <br>
  <table width="500" border="0">
    <tr class="text">
      <td width="50%">ARGUMENT</td>
      <td width="50%">GETTERS</td>
    </tr>
    <tr class="text">
      <td width="50%">METHOD</td>
      <td width="50%">PARAMETER</td>
    </tr>
    <tr class="text">
      <td width="50%"><code>return</code></td>
      <td width="50%">SCOPE</td>
    </tr>
    <tr class="text">
      <td width="50%">SETTERS</td>
      <td width="50%">SIGNATURE</td>
    </tr>
    <tr>
      <td width="50%">&#xA0;</td>
      <td width="50%">&#xA0;</td>
    </tr>
  </table>
  <br>
  <br>  
  <br>
  <table cellspacing="0" cellpadding="0" border="0">
    <tr>
      <td width="90%"><span class="header">A. Writing Methods in Java</span></td>
      <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 3 of 11</nobr></font></td>
    </tr>
  </table>
  <br>
  <ol class="text">
    <li>Methods are what an object can actually do, such as in our DrawingTool example:
      <blockquote>
        <p><code>myPencil.forward(100);<br>
          myPencil.turnLeft();</code></p>
      </blockquote>
    </li>
<li>Revisiting our example from Student Lesson A2, we can see that we have already been using methods.
  <blockquote>
    <p align="center"><img src="http://iws.punahou.edu/user/DKiang/apcs/LessonA4/images/Code_Sample_4_1.gif" width="394" height="339"><br>
      Code Sample 4-1 </p>
    </blockquote>
<p align="left">We wrote our own methods (<code>DrawSquare</code>, <code>draw</code>) and we used some methods from the DrawingTool class (<code>forward</code>, <code>turnLeft</code>). </p>
</li>
<li>Remember from A2 that the general syntax of a method is:
  <blockquote>
    <p><img src="http://iws.punahou.edu/user/DKiang/apcs/LessonA4/images/Fig_4_1.gif" width="400" height="49"></p>
  </blockquote>
</li>
<p>&#xA0;</p>
</ol>
  <br><br>  
  <table cellspacing="0" cellpadding="0" border="0">
    <tr>
      <td width="90%"><span class="header">B. Parameters and Arguments</span></td>
      <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 4 of 11</nobr></font></td>
    </tr>
  </table>
  <br>
  <ol class="text">
    <li><p>Parameters and arguments are used to pass information to a method. Parameters are used when defining a method, and arguments are used when calling the method.</p></li>
    </ol>
  <ol class="text" start="2">
      <li><p>In Code Sample 4-1, we use the <code>DrawingTool&#x2019;s forward</code> method to move the <code>myPencil</code> object. However, we must tell the <code>forward</code> method how far to move, or it would not be a very useful method. We do this by passing an argument to it. In our example, we sent it the <code>int</code> value 100. The <code>turnLeft</code> method will default to 90 degrees if we don&#x2019;t pass it a value. If we want it to turn a different amount, we can send how far left we want it to turn in degrees.</p>
        <blockquote>
          <p><code>myPencil.turnLeft(60);</code></p>
        </blockquote>
      </li>
<li><p>When a method is called with an argument, the parameter receives the value of the argument. If the data type is primitive, we can change the value of the parameter within the method as much as we want and not change the value of the argument passed in the method call. Object variables, however, are references to the object&#x2019;s physical location. When we pass an object&#x2019;s variable name, we get a copy of that reference. Therefore, when we use the passed in reference to access this object within the method, we are in fact working with the same data of the object that was passed as an argument and have the ability to directly change the data inside the object. This can get very messy if the programmer doesn&#x2019;t realize what is going on.</p>
  </li>
  </ol>  <ol class="text" start="4">
	<li><p>When defining a method, the list of parameters can contain multiple parameters. For example:</p>
	  <blockquote>
	    <p><img src="http://iws.punahou.edu/user/DKiang/apcs/LessonA4/images/Fig_4_2.gif" width="310" height="66"></p>
	    </blockquote>
	<p>When this method is called, the arguments fed to the doMath method must be the correct type and must be in the same order. The first argument must be an int. The second argument can be a double or an int (since an int will automatically be converted by Java).</p>
	<blockquote>
	  <p><img src="http://iws.punahou.edu/user/DKiang/apcs/LessonA4/images/Fig_4_3.gif" width="483" height="49"></p>
	  </blockquote>
	</li>
<li><p>Arguments can be either literal values <code>(2, 3.5)</code> or variables <code>(a, x)</code>.</p>
  <blockquote>
    <p><img src="http://iws.punahou.edu/user/DKiang/apcs/LessonA4/images/Fig_4_4.gif" width="449" height="109"></p>
  </blockquote>
</li>
  </ol>
  <p>&#xA0;</p>
  <br><br>
<table cellspacing="0" cellpadding="0" border="0">
  <tr>
    <td width="90%"><span class="header">C. Returning Values</span></td>
    <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 5 of 11</nobr></font></td>
  </tr>
</table>
  <br>
<ol class="text">
    <li>Sometimes we want a method to return a value.</li>
</ol>  <ol class="text" start="2">
      <li><p>In order for a method to return a value, there must be a return statement somewhere in the body of the method.</p>
        </li>
      <li>You must also declare which type of data value will be returned in the method declaration. This can be any primitive data type, a Java class, or any class that you have defined yourself.
        <blockquote>
          <p><img src="http://iws.punahou.edu/user/DKiang/apcs/LessonA4/images/Fig_4_5.gif" width="221" height="64"></p>
        </blockquote>
      </li>
<li><p>If a method returns no value, the keyword void should be used. For example:</p>
  <blockquote>
    <p><img src="http://iws.punahou.edu/user/DKiang/apcs/LessonA4/images/Fig_4_6.gif" width="329" height="48"></p>
  </blockquote>
</li>
</ol>
<p>&#xA0;</p>
<br><br>
<table cellspacing="0" cellpadding="0" border="0">
  <tr>
    <td width="90%"><span class="header">D. The Signature of a Method</span></td>
    <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 6 of 11</nobr></font></td>
  </tr>
</table>
  <br>
  <ol class="text">
    <li><p>In order to call a method legally, you need to know its name, how many parameters it has, the type of each parameter, and the order of those parameters. This information is called the method&#x2019;s <em>signature</em>. The signature of the method <code>doMath</code> can be expressed as:</p>
      <blockquote>
        <p><code>doMath(<strong>int</strong>, <strong>double</strong>)</code></p>
        </blockquote>
    <p>Note that the signature does not include the names of the parameters. If you just want to use the method, you don&apos;t need to know what the parameter names are, so the names are not part of the signature.</p>
    </li>
<li><p>Java allows two different methods in the same class to have the same name, provided that their signatures are different. We say that the name of the method is <em>overloaded</em> because it has different meanings. The Java compiler doesn&apos;t get the methods mixed up. It can tell which one you want to call by the number and types of the arguments that you provide in the call statement. You have already seen overloading used in the <code>System.out</code> object, which is an instance of the <code>PrintStream</code> class. This class defines many different methods named <code>println</code>. These methods all have different signatures, such as:</p>
  <blockquote>
    <table width="100%" border="0" cellspacing="0" cellpadding="2">
      <tr class="text">
        <td><code>println(<strong>int</strong>)</code></td>
        <td><code>println(<strong>double</strong>)</code></td>
        <td><code>println(<strong>String</strong>)</code></td>
      </tr>
      <tr class="text">
        <td><code>println(<strong>char</strong>)</code></td>
        <td><code>println(<strong>boolean</strong>)</code></td>
        <td><code>println()</code></td>
      </tr>
    </table>
    </blockquote>
<p>In addition to these, we have been using this concept with the <code>DrawingTool</code> class and its <code>turnLeft</code> method.</p>
<blockquote>
  <p><code>turnLeft() &#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;turnLeft(120)</code></p>
</blockquote>
</li>
<li><p>It is illegal to have two methods in the same class that have the same signature but have different return types. For example, it would be a syntax error for a class to contain two methods defined as:</p>
  <blockquote>
    <p><code><strong>double</strong> doMath(<strong>int a</strong>, <strong>double x</strong>){}<br>
        <strong>int</strong> doMath(<strong>int a</strong>, <strong>double x</strong>){}</code></p>
    </blockquote>
<p>The Java compiler cannot differentiate return values so it uses the signature to decide which method to call.&#xA0;</p>
</li>
</ol>
<p>&#xA0;</p>
  <br><br>
<table cellspacing="0" cellpadding="0" border="0">
  <tr>
    <td width="90%"><span class="header">E. Lifetime, Initialization, and Scope of Variables</span></td>
    <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 7 of 11</nobr></font></td>
  </tr>
</table>
  <br>
<ol class="text">
	<li>	  
	  <p>Three categories of Java variables have been explained thus far in these lessons.</p>
	<ul class="textd">
	    <li>Instance variables</li>
	    <li>Local variables</li>
	    <li>Parameters</li>
	    </ul>
	    <br>
	</li>
	<li><p>The lifetime of a variable defines the portion of runtime during which the variable exists. When an object is constructed, all its instance variables are created. As long as any part of the program can access the object, it stays alive. A local variable is created when the program executes the statement that defines it. It stays alive until the block that encloses the variable definition is exited. When a method is called, its parameters are created. They stay alive until the method returns to the caller.</p></li>
    <li><p>The type of the variable determines its initial state. Instance variables are automatically initialized with a default value (0 for numbers, <strong><code>false</code></strong> for <strong><code>boolean</code></strong>, <strong><code>null</code></strong> for objects). Parameters are initialized with copies of the arguments. Local variables are not initialized by default so an initial value must be supplied. The compiler will generate an error if an attempt is made to use a local variable that may not have been initialized.</p></li>
	<li><p>Scope refers to the area of a program in which an identifier is valid and has meaning. Instance variables are usually declared <strong><code>private</code></strong> and have class scope. Class scope begins at the opening left brace ({) of the class definition and terminates at the closing brace (}). Class scope enables methods to directly access all of its instance variables. The scope of a local variable extends from the point of its definition to the end of the enclosing block. The scope of a parameter is the entire body of its method.</p></li>
	<li>An example of the scope of a variable is given in Code Sample 4-2. The class <code>ScopeTest</code> is created with three methods:
	  <blockquote>
	    <p align="center"><img src="http://iws.punahou.edu/user/DKiang/apcs/LessonA4/images/Code_Sample_4_2.gif" width="463" height="578"><br>
	      Code Sample 4-2	    </p>
	    </blockquote>
	</li>
<li><p>The results show the following about the scope of the variable test:</p>
	      <ul class="textd">
	      <li>Within the scope of <code>main</code>, the value of test is 10, the value assigned within the <code>main</code> method.</li>
	      <li>Within the scope of <code>printLocalTest</code>, the value of test is 20, the value assigned within the <code>printLocalTest</code> method</li>
	      <li>Within the scope of <code>printClassTest</code>, the value of <code>test</code> is 30, the private value assigned within <code>ScopeTest</code>, because there is no value given to <code>test</code> within the <code>printClassTest</code> method</li>
	      <li>Within the scope of <code>printParamTest</code>, the value of test is 40, the value sent to the <code>printParamTest</code> method</li>
	      </ul>
	      <br>
	    </li>
</ol>
<p>&#xA0;</p>
<br><br>
<table cellspacing="0" cellpadding="0" border="0">
  <tr>
    <td width="90%"><span class="header">F. Getters/Setters</span></td>
    <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 8 of 11</nobr></font></td>
  </tr>
</table>
  <br>
<ol class="text">
	<li><p>When you are first starting to program, some of the most commonly used methods are called Getters and Setters (some like to call them Mutators and Accessors). These methods deal directly with attributes of the object they are associated with.</p></li>
</ol>
<ol class="text" start="2">
	<li><p>When we are working with an object, sometimes we will need to know certain pieces of information about the object that only the object can tell us reliably. Recall the <code>DrawSquare</code> class that we worked with earlier. We might remember the length of a side, but if that length has changed for some reason during the life of the object, we might be in for a surprise if we used that value. Here we would want to store the side length in a private instance variable and provide a Getter method along the lines of <code>double getSideLength()</code>. The Getter method&#x2019;s purpose would be to give us current information about that object. We don&#x2019;t want to let other objects access the side length directly, because they might alter that data when we don&#x2019;t want them to. The <code>getSideLength</code> method allows other objects to look at the data in our <code>DrawSquare</code> object and storing the length in a private variable prevents these objects from directly accessing the length.</p></li>
	<li><p>What happens if we do want to change that side length from outside our class? As it stands right now, that would not be possible. However, we could create a Setter method in the <code>DrawSquare</code> class that would do this for us, <code>void setSideLength(double d)</code>. This method&#x2019;s basic purpose is to change the value of the sides for us, but it could also do a bit more. For instance, what if someone passed <code>setSideLength</code> a value of negative 10? Our square could obviously not exist with a negative side value, so our Setter program should check for validity of the values. Setters can often do calculations for us when necessary, so they are not always simply changing a value and doing nothing else. Often, Setter methods are given a return type of <code>boolean</code> which will return true if the value was valid and false if the value was not. This lets clients know if their value was accepted or not. If the client sends an invalid value to a method, it is usually good for them to know that they tried to use the method incorrectly.</p></li>
</ol>
<p>&#xA0;</p>
<br>  
  <br>
  <table cellspacing="0" cellpadding="0" border="0">
    <tr>
      <td width="90%"><span class="header">Summary/Review</span></td>
      <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 9 of 11</nobr></font></td>
    </tr>
  </table>
  <br>
  <p class="text">As you become more experienced, your programs will grow in size and complexity. When this happens, it becomes more difficult to get your program to do what it is meant to do. Breaking a large task up into smaller tasks by using methods helps make the process easier. Designing methods is complex; the design must integrate a parameter list, the return value, and the goal of the method. Methods should accomplish small tasks within your classes in an easy and organized way. When your programs start to become very large, good commenting and formatting habits will help you stay organized. Knowing these tools will also help you read code written by other people, which is a great way to learn.</p>
  <br><br><br><h2>Chapter 5</h2><br>  
  <br>
  <table cellspacing="0" cellpadding="0" border="0">
    <tr>
      <td width="90%"><span class="header">A5 Introduction</span></td>
      <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 1 of 11</nobr></font></td>
    </tr>
  </table>
  <br>
  <p class="text">This lesson discusses how to design your own classes. This can be the most challenging part of programming. A truly good design can be the difference between hundreds of hours working with complex code and two hours working in an elegant system. A well thought out design can make the programming portion far easier. In fact, for many professional projects, more time is spent designing programs than actually typing in code. Imagine a million lines of code in a project with a design flaw. Redesigning that much code could be horrendous!</p>
  <p class="text">The key topics for this lesson are:</p>
  <ol type="A" class="text">
    <li class="text"><a href="A5-A.html">Designing a Class</a></li>
    <li class="text"><a href="A5-B.html">Determining Object Behavior</a></li>
    <li class="text"><a href="A5-C.html">Instance Variables</a></li>
    <li class="text"><a href="A5-D.html">Implementing Methods</a></li>
    <li class="text"><a href="A5-E.html">Constructors</a></li>
    <li class="text"><a href="A5-F.html">Using Classes</a></li>
    </ol><br>  
  <br>
  <table cellspacing="0" cellpadding="0" border="0">
    <tr>
      <td width="90%"><span class="header"><a href="../vocabulary/index_A.html#A5">A5 Vocabulary</a></span></td>
      <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 2 of 11</nobr></font></td>
    </tr>
  </table>
  <br>
  <table width="500" border="0">
    <tr class="text">
      <td>ACCESS SPECIFIER</td>
      <td>ATTRIBUTES</td>
    </tr>
    <tr class="text">
      <td>BEHAVIORS</td>
      <td>CONSTRUCTOR</td>
    </tr>
    <tr class="text">
      <td>ENCAPSULATION</td>
      <td>INSTANCE VARIABLE</td>
    </tr>
    <tr class="text">
      <td>OVERLOADING</td>
      <td>PSEUDOCODE</td>
    </tr>
    <tr class="text">
      <td>REFERENCE</td>
      <td>TOP DOWN DESIGN</td>
    </tr>
    <tr class="text">
      <td>VARIABLE</td>
      <td>&#xA0;</td>
    </tr>
    <tr>
      <td>&#xA0;</td>
      <td>&#xA0;</td>
    </tr>
  </table>
  <br>
  <br>  
  <br>
  <table cellspacing="0" cellpadding="0" border="0">
    <tr>
      <td width="90%"><span class="header">A. Designing a Class</span></td>
      <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 3 of 11</nobr></font></td>
    </tr>
  </table>
  <br>
  <ol class="text">
    <li><p>One of the advantages of object-oriented design is that it allows a programmer to create a new data type that is reusable in other situations.</p></li>
  <li>
    <p>When designing a new class, three components must be identified &#x2014; attributes, behaviors, and constructors. To determine attributes of a class, look at the nouns associated with that object. To determine behaviors, look at the verbs.</p>
  </li>
  <li><p>Let&#x2019;s consider a checking account at a bank. The account would need to record such things as the account number, the current balance, the type of checking account it is, etc (these are nouns). These would be the attributes of the checking account. It would also need to be able to do certain actions, such as withdrawing or depositing money (these are verbs). These would be the behaviors of the checking account. Finally, the checking account object needs to be created in order to be used, so the class must define how the creation process works. This is accomplished in the constructors.</p></li>
      </ol>
  <p>&#xA0;</p>
  <br><br>  
  <table cellspacing="0" cellpadding="0" border="0">
    <tr>
      <td width="90%"><span class="header">B. Determining Object Behavior</span></td>
      <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 4 of 11</nobr></font></td>
    </tr>
  </table>
  <br>
  <ol class="text">
    <li>      
      <p>In this section, you will learn how to create a simple class that describes the behavior of a bank account. Before you start programming, you need to understand how the objects of your class behave. Operations that can be carried out with a checking account could be:      </p>
    </li>
<ul class="textd">
      <li>Accepting a deposit</li>
    <li>Withdrawing from the account</li>
<li>Getting the current balance</li>
</ul><br>
    <li>      
      <p>In Java, these operations are expressed as <em>method calls</em>. For example, assume we have an object <code>checking</code> of type <code>CheckingAccount</code>. Here are the methods that invoke the required behaviors:</p>
  <blockquote>
    <p class="text"><code>checking.deposit(1000);<br>
      checking.withdraw(250);<br>
      System.out.println(&quot;Balance: &quot; + checking.getBalance());</code></p>
    <p class="text">These methods form the behaviors of the <code>CheckingAccount</code> class. The behaviors are the list of methods that you can apply to objects of a given class. To the client, an object of type <code>CheckingAccount</code> can be viewed as a &#x201C;black box&#x201D; that can carry out its methods. The programming concept of not needing to know how things are done internally is called abstraction. </p>
  </blockquote>
      </li>
    <li>Once we understand what objects of the CheckingAccount class need to do, it is possible to design a Java class that implements these behaviors. To describe object behavior, you first need to implement a class and then implement methods within that class.</li>
  </ol>  <blockquote>
    <p><span class="text"><img src="http://iws.punahou.edu/user/DKiang/apcs/LessonA5/images/Fig_5_1.gif" width="489" height="116"></span></p>
    <p class="text">Next we implement the three methods that have already been identified:</p>
    <ul class="text">
      <li><code>deposit</code></li>
    <li><code>withdraw</code></li>
    <li><code>getBalance</code></li>
    </ul>
  <p><img src="http://iws.punahou.edu/user/DKiang/apcs/LessonA5/images/Fig_5_2.gif" width="489" height="249"></p>
  </blockquote>
  <ol class="text" start="4">
    <li>      What we have been doing here is not real code and wouldn&#x2019;t actually do anything. However, it is useful to lay out what your class will look like. When we use a mixture of English and Java to show what we are doing, it is called <em>pseudocode</em>. In this example the implementation of the methods is left out because we do not have all the information that we need yet. However, we can still write out what the methods will do with pseudocode so that it becomes easier to see how everything will fit together. This process of starting with a very broad concept or outline and working down to smaller and smaller details is called <em>top-down</em> design.</li>
    </ol>  <blockquote>
    <p><img src="http://iws.punahou.edu/user/DKiang/apcs/LessonA5/images/Fig_5_3.gif" width="414" height="281"></p>
  </blockquote>  <ol class="text" start="5">
    <li>A method header consists of the following parts:</li>
  </ol>  <blockquote>
    <p align="left" class="text"><code><em><strong>access_specifier return_type</strong></em> <em>method_name</em> ( <em>parameters</em> )</code></p>
  <ol type="a">
      <li class="text">
        <p>An <em><strong><code>access_specifier</code></strong></em> (such as <strong><code>public</code></strong>). The access specifier controls where this method can be accessed from. Methods should be declared as public if the method needs to be accessed by something other than the object containing the method. If it should only be accessed within the object, you should declare the method as private.</p>
      </li>
      <li class="text">
        <p>The <em><strong><code>return_type</code></strong></em> of the method such as <strong><code>double</code></strong>, <strong><code>void</code></strong>, or <strong><code>DrawingTool</code></strong>. The return type is the data type that the method sends back to the call of the method. This can be any primitive type or any object that your class knows about. For example, in the <code>CheckingAccount</code> class, the <code>getBalance</code> method returns the current account balance, which is a floating-point number, so its return type is <strong><code>double</code></strong>. The <code>deposit</code> and <code>withdraw</code> methods don&#x2019;t return any value. To indicate that a method does not return a value, you use the keyword <strong><code>void</code></strong>.</p>
      </li>
      <li class="text">
        <p>The <em><code>method_name</code></em> (such as <code>deposit</code>). The name needs to follow the rules of identifiers and should indicate the method&#x2019;s purpose.</p>
      </li>
      <li class="text">
        <p>A list of the <em><code>parameters</code></em> of the method. The parameters are the input to the method. The <code>deposit</code> and <code>withdraw</code> methods each have one parameter, the amount of money to deposit or withdraw. The type of parameter, such as <strong><code>double</code></strong>, and name for each parameter, such as <code>amount</code>, must be specified. If a method has no parameters, like <code>getBalance</code>, it is still necessary to supply a pair of parentheses () behind the method name.</p>
      </li>
    </ol>
  </blockquote>  <ol start="6">
    <li class="text">
      <p>Once the method header has been specified, the implementation of the method must be supplied in a block that is delimited by braces {...}. The <code>CheckingAccount</code> methods will be implemented later in Section D.</p>
    </li>
  </ol>  <p>&#xA0;</p><br><br>
<table cellspacing="0" cellpadding="0" border="0">
  <tr>
    <td width="90%"><span class="header">C. Instance Variables</span></td>
    <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 5 of 11</nobr></font></td>
  </tr>
</table>
  <br>
<ol class="text">
    <li>
      <p>Before any code can be written for the behaviors, the object must know how to store its current <em>state</em>. The state is the set of attributes that describes the object and that influences how an object reacts to method calls. In the case of our checking account objects, the state includes the current balance and an account identifier.</p>
      </li>
</ol>  <ol class="text" start="2">
      <li><p>Each object stores its state in one or more <em>instance variables</em>.</p>
          <p><img src="http://iws.punahou.edu/user/DKiang/apcs/LessonA5/images/Fig_5_4.gif" width="278" height="125"></p>
      </li>
      <li><p>An instance variable declaration consists of the following parts:</p>
      <p align="left" class="text"><em><code><strong>access_specifier type</strong> variable_name</code></em></p>
      <ol type="a">
        <li>
          <p>          The <em><strong><code>access_specifier</code></strong></em> (such as <strong><code>private</code></strong>) tells who can access that data member. Instance variables are generally declared with the access specifier <strong><code>private</code></strong>. That means they can be accessed only by methods of the same class. In particular, the balance variable can be accessed only by the <code>deposit</code>, <code>withdraw</code>, and <code>getBalance</code> methods.</p>
        </li>
        <li>
          <p>          The <em><strong><code>type</code></strong></em> of the variable (such as <strong><code>double</code></strong>).</p>
        </li>
        <li>
          <p>          The <em><code>variable_name</code></em> (such as <code>myBalance</code>).</p>
        </li>
      </ol>
      </li>
      <li>
        <p>If instance variables are declared private, then all external data access must occur through the non-private methods. This means that the instance variables of an object are hidden. The process of hiding data is called encapsulation. Although it is possible in Java to define instance variables as public (leave them unencapsulated), it is very uncommon in practice. In this curriculum, instance variables will always be made private.</p>
      </li>
<li>For example, because the myBalance instance variable is private, it cannot be accessed from outside of the class:</li>
</ol>
<blockquote>
  <p class="text"><code><strong>double</strong> balance = checking.myBalance; // <span class="style1">compiler ERROR!</span></code></p>
  <p class="text">However, the public getBalance method to inquire about the balance can be called:</p>
  <p class="text"><code><strong>double</strong> balance = checking.getBalance(); // OK</code></p>
</blockquote><p>&#xA0;</p><br><br>
<table cellspacing="0" cellpadding="0" border="0">
  <tr>
    <td width="90%"><span class="header">D. Implementing Methods</span></td>
    <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 6 of 11</nobr></font></td>
  </tr>
</table>
  <br>
  <ol class="text">
    <li><p>Now that we know how the object stores its state, we can provide the implementations for the methods of the class. The implementation for three methods of the CheckingAccount class is given below.</p>      
	<p><img src="http://iws.punahou.edu/user/DKiang/apcs/LessonA5/images/Fig_5_5.gif" width="310" height="248"></p>
    </li>
<li>
  <p>The implementation of the methods is straightforward. When some amount of money is deposited or withdrawn, the balance increases or decreases by that amount.</p>
    </li>
    <li><p>The <code>getBalance</code> method simply <em>returns</em> the current balance. A <strong><code>return</code></strong> statement obtains the value of a variable and exits the method immediately. The return value becomes the value of the method call expression. The syntax of a <strong><code>return</code></strong> statement is:</p>
    </li>
    </ol>
  <blockquote>
    <p class="text"><code><strong>return</strong> expression;</code></p>
    <p class="text">or</p>
    <p class="text"><code><strong>return;</strong> // Exits the method without sending back a value</code></p>
  </blockquote>
  <p>&#xA0;</p>
  <br><br>
<table cellspacing="0" cellpadding="0" border="0">
  <tr>
    <td width="90%"><span class="header">E. Constructors</span></td>
    <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 7 of 11</nobr></font></td>
  </tr>
</table>
  <br>
<ol class="text">
	<li><p>The final requirement to implement the <code>CheckingAccount</code> class is to define a <em>constructor</em>, whose purpose is to initialize the values of instance variables of an object. To construct objects of the <code>CheckingAccount</code> class, it is necessary to declare an object variable first.</p></li>
</ol>
<blockquote>
  <p class="text"><code>CheckingAccount checking;
  </code></p>
  <p class="text">Object variables such as <code>checking</code> are <em>references</em> to objects. Instead of holding an object itself, a reference variable holds the information necessary to find the object in memory. This is the <em>address</em> of the object.</p>
</blockquote>
<ol class="text" start="2">
	<li>The object identifier <code>checking</code> does not refer to any object yet. An attempt to invoke a method on this variable would cause a runtime null pointer exception error. To initialize the variable, it is necessary to create a new <code>CheckingAccount</code> object using the <strong><code>new</code></strong> operator
	  <p><code>checking = new CheckingAccount();</code></p>
	  <p>Constructors are always invoked using the <strong><code>new</code></strong> operator. The <strong><code>new</code></strong> operator allocates memory for the objects, and the constructor initializes it. The &#x201C;new&#x201D; operator returns the reference to the newly constructed object. </p>
	  <p>In most cases, you will declare and store a reference to an object in an object identifier on one line as follows:</p>
	  <p><code>CheckingAccount checking = new CheckingAccount();</code></p>
	  <p>Occasionally, it would be repetitive and unnecessary to create an object identifier. If the purpose of creating the object is only to pass it in as an argument, you can simply create the object within the method call. For example, when creating <code>DrawingTool</code> objects, and you are providing a <code>SketchPad</code> object, you do not need to create an identifier for that <code>SketchPad</code> object:</p>
	  <p><code>DrawingTool pen = new DrawingTool(new SketchPad(500,500));</code></p>
	  <p>Notice that we never create an object identifier for the SketchPad object.</p>
	</li>
<li><p>Constructors always have the same name as their class. Similar to methods, constructors are generally declared as public to enable any code in a program to construct new objects of the class. Unlike methods, constructors do not have return types.</p>
</li>
<li>
  <p>Instance variables are automatically initialized with a default value (0 for number, false for boolean, null for objects). Even though initialization is handled automatically for instance variables, it is a matter of good style to initialize all instance variables explicitly. Generally, all of your instance variables should be initialized in your constructor.</p>
</li>
<li>  Many classes define more than one constructor through overloading. For example, you can supply a second constructor for the CheckingAccount class that sets the myBalance and myAccountNumber instance variables to initial values, which are the parameters of the constructor:</li>
</ol>
<blockquote>
  <p><img src="http://iws.punahou.edu/user/DKiang/apcs/LessonA5/images/Fig_5_6.gif" width="497" height="267"></p>
  <p class="text">The second constructor is used if you supply a starting balance and an account number as construction parameters.</p>
  <p class="text"><code>CheckingAccount checking = new CheckingAccount(5000.0, 12345);</code></p>
  <p class="text">The number of constructors is based on the needs of the client.</p>
  </blockquote>
<ol class="text" start="6">
  <li>    The implementation of the CheckingAccount class is complete and given below:</li>
</ol>
<blockquote>
  <p><img src="http://iws.punahou.edu/user/DKiang/apcs/LessonA5/images/Fig_5_7.gif" width="512" height="402"></p>
</blockquote><p>&#xA0;</p>
<br><br>
<table cellspacing="0" cellpadding="0" border="0">
  <tr>
    <td width="90%"><span class="header">F. Using Classes</span></td>
    <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 8 of 11</nobr></font></td>
  </tr>
</table>
  <br>
<ol class="text">
	<li>
	  <p>Using the <code>CheckingAccount</code> class is best demonstrated by writing a program that solves a specific problem. We want to study the following scenario:</p>
	</li>
</ol>
<blockquote class="text">
  <p>An interest bearing checking account is created with a balance of $1,000. For two years in a row, add 2.5% interest. How much money is in the account after two years?</p>
</blockquote>
<ol class="text" start="2">
	<li>	  Two classes are required: the <code>CheckingAccount</code> class that was developed in the preceding sections, and a second class called <code>CheckingTester</code>. The main method of the <code>CheckingTester</code> class constructs a <code>CheckingAccount</code> object, adds the interest twice, then prints out the balance.</li>
	</ol>
<blockquote>
  <p><img src="http://iws.punahou.edu/user/DKiang/apcs/LessonA5/images/Fig_5_8.gif" width="484" height="329"></p>
</blockquote><p>&#xA0;</p>
<br>  
  <br>
  <table cellspacing="0" cellpadding="0" border="0">
    <tr>
      <td width="90%"><span class="header">Summary/Review</span></td>
      <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 9 of 11</nobr></font></td>
    </tr>
  </table>
  <br>
  <p class="text">The topics in this lesson are critical to your study of computer science. The concepts of abstraction and OOP will continue to be developed in future lessons. Designing your classes is the most important part of programming. Without good design in the beginning, a complex program can quickly grow out of control.</p>
  <br><br><br><h2>Chapter 6</h2><br>  
  <br>
  <table cellspacing="0" cellpadding="0" border="0">
    <tr>
      <td width="90%"><span class="header">A6 Introduction</span></td>
      <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 1 of 12</nobr></font></td>
    </tr>
  </table>
  <br>
  <p class="text">Now that you have learned how to design your own classes, we will explore how to take advantage of the huge number of pre-made classes provided with Java. We will also learn how to read the APIs that come with those classes so that you will be able to take any class that comes with an API and teach yourself how to use that class. In this chapter, we will start with APIs, explore a few useful classes and their APIs, and then finish by learning how to write our own APIs so that other people can use our classes.</p>
  <p class="text">The key topics for this lesson are:</p>
  <ol type="A" class="text">
    <li class="text"><a href="A6-A.html">Understanding APIs</a></li>
    <li class="text"><a href="A6-B.html">Final and Static</a></li>
    <li class="text"><a href="A6-C.html">DrawingTool</a></li>
    <li class="text"><a href="A6-D.html">Point2D.Double</a></li>
    <li class="text"><a href="A6-E.html">Random</a></li>
    <li class="text"><a href="A6-F.html">Math</a></li>
    <li class="text"><a href="A6-G.html">Javadoc Tool</a></li>
    </ol><br>  
  <br>
  <table cellspacing="0" cellpadding="0" border="0">
    <tr>
      <td width="90%"><span class="header"><a href="../vocabulary/index_A.html#A6">A6 Vocabulary</a></span></td>
      <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 2 of 12</nobr></font></td>
    </tr>
  </table>
  <br>
  <table width="500" border="0">
    <tr class="text">
      <td>API</td>
      <td>PACKAGES</td>
    </tr>
    <tr class="text">
      <td>STATIC</td>
      <td>FINAL</td>
    </tr>
    <tr class="text">
      <td>JAVADOC</td>
      <td>&#xA0;</td>
    </tr>
    <tr class="text">
      <td>&#xA0;</td>
      <td>&#xA0;</td>
    </tr>
    <tr class="text">
      <td>&#xA0;</td>
      <td>&#xA0;</td>
    </tr>
    <tr class="text">
      <td>&#xA0;</td>
      <td>&#xA0;</td>
    </tr>
    <tr>
      <td>&#xA0;</td>
      <td>&#xA0;</td>
    </tr>
  </table>
  <br>
  <br>  
  <br>
  <table cellspacing="0" cellpadding="0" border="0">
    <tr>
      <td width="90%"><span class="header">A. Understanding APIs</span></td>
      <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 3 of 12</nobr></font></td>
    </tr>
  </table>
  <br>
  <ol class="text">
    <li><p>API stands for Application Programming Interface and is one of the most useful tools you will have while working with Java. APIs show exactly how to use pre-made classes. The DrawingTool Class Specifications handout in Lesson A1 is an example of a simplified API. It lists the classes and constructors so that we know which methods are available. APIs do not tell us how the programmer dealt with a problem or what kind of formulas they used internally, but just tells us what methods we can access, how to interact with those methods, and what those methods will return back to us.</p></li>
  <li><p>You can always access the Java APIs at <a href="http://java.sun.com" target="_blank">java.sun.com</a>. Click on API Specifications on the main page and then choose the version of Java you wish to retrieve the API for. You can also download the APIs to your computer for offline access. Many Java programming environments can be set up to access the APIs from within your code.</p>
  </li>
  <li>
    <p>The Java APIs are organized both by package and by class. Packages are groups of related classes that are &#x201C;packaged&#x201D; together. When you use the code <code>import gpdraw.*;</code> you are adding the entire gpdraw package to your code. If you only need one or two classes from a package, you can add the classes individually with the code <code>import gpdraw.DrawingTool;</code>.</p>
  </li>
      </ol>
  <p>&#xA0;</p>
  <br><br>  
  <table cellspacing="0" cellpadding="0" border="0">
    <tr>
      <td width="90%"><span class="header">B. Final and Static</span></td>
      <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 4 of 12</nobr></font></td>
    </tr>
  </table>
  <br>
  <ol class="text">
    <li><p>Before you look at these APIs in depth, you need to learn what the keywords <em>final</em> and <em>static</em> mean, as they frequently come up in the API documentation.</p></li>
    </ol>
  <ol class="text" start="2"><li>When used with a primitive data type, final means that the value of the variable will never change. This is useful in many cases, such as tax rates, math constants such as PI, and base values that are used in several places in your code. Identifiers with final are generally made with only capital letters so they are easily distinguishable from the rest of the code.
    <blockquote>
      <p><code>final double TAXRATE = 0.0825;<br>
        final double ROUNDS_IN_GAME = 100;</code></p>
    </blockquote>
  </li>
<li><p>A program that repeatedly uses a constant identifier, such as TAXRATE, can be quickly modified by assigning a value to TAXRATE at the top of the program. If the value of the tax rate is hard coded everywhere it is used, then changing the tax rate would involve changing that value everywhere it appears in the program. This involves searching through your program and finding every single time that value is used, and then changing it to the new value. It would be easy to accidentally miss a value or two or possibly change something that was similar but wasn&#x2019;t supposed to be the tax rate. Using final values will not only save time but can also reduce the number of errors in your program.</p>
    </li>
  </ol>  <blockquote>
    <p><span class="text"><code><strong>import</strong> gpdraw.*;</code></span></p>
  </blockquote>
  <ol class="text" start="4">
	<li><p>Once a final variable is given a value within a program, that value may never change in that run. In order to change that value, you must change it within your code, recompile, and run the program again. You may still define this value within the constructors so that the value can be determined at run time; it need not be defined at the same time that the variable is declared.</p></li>
	<li>
	  <p>Objects and methods can also take a final keyword. However, they behave differently than primitive data types. We have not yet discussed the concepts that these final objects and methods affect, but we will cover them in Lesson A11 - Inheritance.</p>
	</li>
  <li>
    <p>Using the keyword static means that the data member or method is attached to the class rather than to an object of that class.</p>
  </li>
  <li>    With a static method, you only need to type the name of the class followed by the name of the method. You never need to create a new object when dealing with static methods. You can think of static methods as belonging to the class itself, whereas non-static methods are attached to the objects created from that class.
    <blockquote>
      <p><code>int jason = Math.pow(3,4);</code></p>
      </blockquote>
  <p><code>jason</code> receives and stores the result of 3 to the 4<sup>th</sup> power, which is 81.</p>
  <p>Notice how there was never any need to create an object of type Math. Instead, we just have an int assigned the value created by the static pow method of the Math class.</p>
  </li>
  <li>    Data members that are static may also be used without creating an object of that class. They also have specific behavior when using that value of the data member within the class. While we may make a hundred objects from one class, any static variables of that class will in fact be shared by each of those objects. If one object changes the value of that static variable, then the value is changed for all of the other objects of that type. This is because the variable and its value do not belong to any of the objects individually, but to the class itself.</li>
  </ol>  <p>&#xA0;</p><br><br>
<table cellspacing="0" cellpadding="0" border="0">
  <tr>
    <td width="90%"><span class="header">C. DrawingTool</span></td>
    <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 5 of 12</nobr></font></td>
  </tr>
</table>
  <br>
<ol class="text">
    <li>
      <p>You have already been looking at an API for DrawingTool. The purpose of Handout A1.1 was to give you an introduction to the purpose of the class and how to use its various methods.</p>
    </li>
<li>
  <p>When instructed to draw a circle, you probably looked at Handout A1.1 and saw this:</p>
  <table width="90%" border="0" cellspacing="0" cellpadding="1">
    <tr>
      <td bgcolor="#000000"><table width="100%" border="0" cellpadding="3" cellspacing="1" bgcolor="#FFFFFF">
        <tr>
          <td><p class="text"><code>public drawCircle (double r);</code></p>
            <p class="text"><em>postcondition</em></p>
            <ul class="textd">
            <li class="text">If the object is in drawing mode, a circle of radius r is drawn around the current location using the current <code>width</code> and <code>color</code>.
            </li></ul>
            </td>
        </tr>
      </table></td>
    </tr>
  </table>
</li>
</ol>  <blockquote>
  <p class="text">This tells us exactly what we need to know to use this method. We have the name of the method and the type of argument it takes. We also know what will happen after the method is called.</p>
</blockquote><ol class="text" start="3">
        <li><p>This is not the official Java format for an API, but it accomplishes the same thing. Without this handout, how would you have known how to draw a circle? How about when you made the picture of the house? How would you have known to use the forward method, turnLeft, down, or up? As you can see, APIs are an essential tool that must be looked at before a programmer can understand how to use pre-made classes.</p>
        </li>
    <li>
      <p>Now that you understand how to read the DrawingTool API, take a look at a sample (the Pizza Parlor assignment) in the Javadoc folder for this lesson. Open up the <code>index-all.html</code> file in your Web browser to see a basic package view. Click on the Help Link at the top to access a page on &#x201C;How This API Document is Organized&#x201D;. Links that do not work are simply placeholders. The feature that you are clicking on does not exist for that class.</p>
    </li>
</ol><p>&#xA0;</p><br><br>
<table cellspacing="0" cellpadding="0" border="0">
  <tr>
    <td width="90%"><span class="header">D. Point2D.Double</span></td>
    <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 6 of 12</nobr></font></td>
  </tr>
</table>
  <br>
  <ol class="text">
    <li>
      <p>The Point2D class is useful for storing locations on a two dimensional space. It also contains several methods that can be used to do certain calculations. There are two sub-classes of Point2D, but you will generally only want to use Point2D.Double.</p>      
	</li>
  </ol>
  <ol class="text" start="2">
    <li><p>Consider an application where you need to track the locations of two mice in a flat-bottomed box. You could use two Point2D.Double objects to keep track of their locations.</p></li>
	<li>What if we want to be able to tell how far apart the two mice are at any given time? We could use the distance formula from Geometry to calculate the distance. However, if we take a quick look at the Point2D API, we can find this method:</li>
	</ol>
  <blockquote>
    <table width="90%" border="0" cellpadding="0" cellspacing="0" bgcolor="#000000">
      <tr>
        <td><table width="100%" border="0" cellpadding="2" cellspacing="1">
          <tr valign="top" class="text">
            <td bgcolor="#FFFFFF"><code>double</code></td>
            <td bgcolor="#FFFFFF"><code><strong>distance</strong>(Point2D pt)</code> <br>
              &#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;Returns the distance from this <code>Point2D</code> to a specified <code>Point2D</code>.</td>
          </tr>
        </table></td>
      </tr>
    </table>
    <p class="text">A line of code as simple as</p>
      <blockquote>
        <p class="text"><code>double distance = rat1.distance(rat2);</code></p>
      </blockquote>
      <p class="text">will give us the distance between the two rats. This is much simpler than trying to do all the calculations ourselves. Remember, whenever possible we want to avoid writing code that has already been written. By doing a slight bit of research, we have saved ourselves the hassle of writing and then debugging code.</p>
  </blockquote>  <p>&#xA0;</p>
  <br><br>
<table cellspacing="0" cellpadding="0" border="0">
  <tr>
    <td width="90%"><span class="header">E. Random</span></td>
    <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 7 of 12</nobr></font></td>
  </tr>
</table>
  <br>
<ol class="text">
	<li><p>As the name suggests, the java.util package is full of utility classes that you will find very useful. Many of them are going to be far too advanced for what you need at this stage, but as you progress in skill you should browse through the classes and see which ones you begin to understand. During this course, you will learn several of the util classes in detail, but for now we will just concentrate on this one, java.util.Random.</p></li>
</ol>
<ol class="text" start="2"><li>Random is probably the most fun of all the classes in the java.util package. Any sort of game or in depth simulation (such as inspecting a transportation system to see how efficient it is) will generally need some sort of randomness in order to work the way we want. That&#x2019;s where the Random class comes in. Let&#x2019;s take a look at it now.</li>
	</ol>
<blockquote>
  <table width="90%" border="0" cellspacing="0" cellpadding="0">
    <tr>
      <td bgcolor="#000000"><table width="100%" border="0" cellspacing="1" cellpadding="4">
        <tr bgcolor="#9999CC">
          <td colspan="2" class="text"><strong>Constructor Summary</strong></td>
          </tr>
        <tr>
          <td bgcolor="#FFFFFF" class="text"><code><strong>Random</strong>()</code><br>
            &#xA0;&#xA0;&#xA0;&#xA0;&#xA0;Creates a new random number generator.</td>
          <td bgcolor="#FFFFFF">&#xA0;</td>
        </tr>
      </table></td>
    </tr>
  </table>
  <br>
  <table width="90%" border="0" cellspacing="0" cellpadding="0">
    <tr>
      <td bgcolor="#000000"><table width="100%" border="0" cellspacing="1" cellpadding="4">
          <tr bgcolor="#9999CC">
            <td colspan="2" class="text"><strong>Method Summary</strong></td>
          </tr>
          <tr valign="top" class="text">
            <td bgcolor="#FFFFFF" class="text"><code>double</code></td>
            <td bgcolor="#FFFFFF"><code><strong>nextDouble</strong>()</code> <br>
              &#xA0;&#xA0;&#xA0;&#xA0;&#xA0;Returns the next pseudorandom, uniformly distributed double value between 0.0 and 1.0 from this random number generator&apos;s sequence.</td>
          </tr>
          <tr valign="top" class="text">
            <td bgcolor="#FFFFFF" class="text"><code>int</code></td>
            <td bgcolor="#FFFFFF"><code><strong>nextInt</strong>(int n) </code><br>
              &#xA0;&#xA0;&#xA0;&#xA0;&#xA0;Returns a pseudorandom, uniformly distributed int value between 0 (inclusive) and the specified value (exclusive), drawn from this random number generator&apos;s sequence.</td>
          </tr>
      </table></td>
    </tr>
  </table>
  <p>&#xA0;</p>
</blockquote><ol class="text" start="3"><li><p>These are the methods that you will be likely to find the most useful. The constructor is very basic and requires no arguments. The word &#x201C;pseudorandom&#x201D; just indicates that the number is not completely random. Computers are not physically capable of creating true random numbers. Therefore, in Computer Science, we refer to computer generated random numbers as &#x201C;pseudorandom.&#x201D; </p>
  </li>
  <li>  Let&#x2019;s look at a situation where we might use this class. Consider an electronic raffle for a prize. There are 200 participants with one number each between 1 and 200. We can create an object of type Random to determine who the winner is.  </li>
  <blockquote>
      <p><code>Random chooser = new Random();<br>
        int winner = chooser.nextInt(200) + 1;</code></p>
    </blockquote>
</ol>
<blockquote>
  <p class="text">This code will give us a value between 1 and 200 in our winner variable.</p>
</blockquote>
<ol class="text" start="5">
  <li>The Random class has many uses. Most board games you have played probably use six sided dice to give the game an element of chance. Video and computer games also use randomness to determine whether you hit your enemy or not, modified by the skill of the character you are using. Think about the lottery as well. Without an element of chance, it would be pretty boring to buy lottery tickets and the game would cease to exist.</li>
</ol><p>&#xA0;</p>
<br><br>
<table cellspacing="0" cellpadding="0" border="0">
  <tr>
    <td width="90%"><span class="header">F. Math</span></td>
    <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 8 of 12</nobr></font></td>
  </tr>
</table>
  <br>
<ol class="text">
	<li><p>The Math class in the <code>java.lang</code> package contains class methods for commonly used mathematical functions. Java loads the <code>java.lang</code> package automatically, so no special actions are required to access these.</p></li>
</ol>
<ol class="text" start="2">
	<li><p>The Math class contains both methods and the numerical values for two important mathematical constants, e and Pi. These constant values are accessed the same way as normal variables, but they can never be modified directly by your code.</p></li>
	<li>The Math class is most useful for complex mathematical formulas, for example:
	  <blockquote>
	    <p><img src="http://iws.punahou.edu/user/DKiang/apcs/LessonA6/images/Fig_6_1.gif" width="111" height="66"></p>
	    </blockquote>
	<p>Using the Math class, we can create a line of code to solve this calculation much like you would type the same equation into your calculator:</p>
	  <blockquote>
	    <p><code>(1.0/2.0) * Math.sin(x - Math.PI / Math.pow(y, 3));</code></p>
	    </blockquote>
	</li>
<li><p>Let&#x2019;s see what other kind of methods the Math class provides for us. Go ahead and take a look at the Java APIs. (Remember: Access the Java APIs on the Web at java.sun.com - click on API Specifications in the left column, and then pick the version of Java, such as <a href="http://java.sun.com/j2se/1.4.2/docs/api/" target="_blank">J2SE 1.4.2</a>, that you wish to see.) Find the Math class within the Java.lang package. Hint: You can find it either in the long list of classes on the left hand side by scrolling down to the M section, or you can access the Java.lang package first in the upper left section and then look for the Math class. You should find something similar to this:</p>
  <img src="http://iws.punahou.edu/user/DKiang/apcs/LessonA6/images/Fig_6_10.gif" width="601" height="157"><br>
  <br>
  <table width="90%" border="0" cellspacing="0" cellpadding="0">
    <tr>
      <td bgcolor="#000000"><table width="100%" border="0" cellspacing="1" cellpadding="4">
          <tr bgcolor="#9999CC">
            <td colspan="2" class="text"><strong>Field Summary</strong></td>
          </tr>
          <tr valign="top" class="text">
            <td width="15%" bgcolor="#FFFFFF" class="text">static double</td>
            <td bgcolor="#FFFFFF"><span class="style1"><code>E</code></span> <br>
&#xA0;&#xA0;&#xA0;&#xA0;The double value that is closer than any other to e, the base of the natural logarithms.</td>
          </tr>
          <tr valign="top" class="text">
            <td width="15%" bgcolor="#FFFFFF" class="text">static double</td>
            <td bgcolor="#FFFFFF"><span class="style2"><code>PI</code></span> <br>
&#xA0;&#xA0;&#xA0;&#xA0;The double value that is closer than any other to pi, the ratio of the circumference of a circle to its diameter.</td>
          </tr>
      </table></td>
    </tr>
  </table>
  <br>
  <table width="90%" border="0" cellspacing="0" cellpadding="0">
    <tr>
      <td bgcolor="#000000"><table width="100%" border="0" cellspacing="1" cellpadding="4">
          <tr bgcolor="#9999CC">
            <td colspan="2" class="text"><strong>Method Summary</strong></td>
          </tr>
          <tr valign="top" class="text">
            <td width="15%" bgcolor="#FFFFFF" class="text">static double</td>
            <td bgcolor="#FFFFFF"><code><strong>abs</strong>(double a) </code><br>
&#xA0;&#xA0;&#xA0;&#xA0;Returns the absolute value of a double value.</td>
          </tr>
          <tr valign="top" class="text">
            <td width="15%" bgcolor="#FFFFFF" class="text">static int </td>
            <td bgcolor="#FFFFFF"><code><strong>abs</strong>(int a)</code> <br>
&#xA0;&#xA0;&#xA0;&#xA0;Returns the absolute value of an int value.</td>
          </tr>
          <tr valign="top" class="text">
            <td width="15%" bgcolor="#FFFFFF" class="text">static double</td>
            <td bgcolor="#FFFFFF"><code><strong>pow</strong>(double a, double b) </code><br>
&#xA0;&#xA0;&#xA0;&#xA0;Returns the value of the first argument raised to the power of the second argument.</td>
          </tr>
          <tr valign="top" class="text">
            <td width="15%" bgcolor="#FFFFFF" class="text">static double</td>
            <td bgcolor="#FFFFFF"><code><strong>sqrt</strong>(double a)</code> <br>
&#xA0;&#xA0;&#xA0;&#xA0;Returns the correctly rounded positive square root of a double value.</td>
          </tr>
      </table></td>
    </tr>
  </table>
  <br>
</li>
<li>
  <p>The list shown here is much shorter than you will find online. However, let&#x2019;s look at the layout. At the very top is java.lang, the name of the package this class is in. Below that is the name of the class, followed by a series of class names. You will learn more about this later, but for now just think of the classes listed there as the parents of the current class. Below that comes the description of the class, which gives an introduction to the purpose of the class. This allows programmers to quickly decide if this class will do what they need. Next is the list of attributes and behaviors, labeled as &#x201C;Field Summary&#x201D; and &#x201C;Method Summary.&#x201D;</p>
</li>
    <li><p>The &#x201C;Field Summary&#x201D; section contains two items in it. In the left side of the table, we can see they are both labeled as static double. This tells us the type of the variable so we know how to use it. On the right, we see the name of the variables followed by a brief description of it. If you are looking at this on the Internet, you can click on the name label (E or PI) to be taken to a more detailed description of the variable. We don&#x2019;t generally need more information on variables, but the links are provided in the API just in case.</p></li>
    <li><p>The &#x201C;Method Summary&#x201D; section has all of the available methods provided by the Math class. Once again, we can see that the table is laid out in a similar manner, with a small section on the left and a larger section on the right. With the first listed method, abs, we can see the left section has the same label (static double) as we found with the E and PI values. However, this time it is telling us the return type of the methods. On the right, we again get the name and a brief description but we also get the arguments that must be passed to the method. Clicking on the name to go to the full description of methods is often much more useful than with the variables. If we click on the name abs we find much more information than we originally had with the short description:</p>
          <table width="90%" border="0" cellspacing="0" cellpadding="0">
            <tr>
              <td bgcolor="#000000"><table width="100%" border="0" cellspacing="1" cellpadding="4">
                <tr>
                  <td bgcolor="#FFFFFF"><span class="text"><strong>abs</strong>
                    </span>
                    <p class="text"><code>public static double <strong>abs</strong>(double a)</code></p>
                    <blockquote>
                      <p class="text">Returns the absolute value of a double value. If the argument is not negative, the argument is returned. If the argument is negative, the negation of the argument is returned. Special cases:</p>
                      <ul class="textd">
                        <li class="text">If the argument is positive zero or negative zero, the result is positive zero.</li>
                        <li class="text">If the argument is infinite, the result is positive infinity.</li>
                        <li class="text">If the argument is NaN, the result is NaN.</li>
                      </ul>
                      <p class="text">In other words, the result is the same as the value of the expression: <br>
                        <code>Double.longBitsToDouble((Double.doubleToLongBits(a)&lt;&lt;1)&gt;&gt;&gt;1)</code></p>
                      <p>                  <span class="text"><strong>Parameters:</strong> <br>
                        a - the argument whose absolute value is to be determined </span></p>
                      <p class="text"><strong>Returns:</strong> <br>
	                    the absolute value of the argument.</p>
                    </blockquote></td>
                </tr>
              </table></td>
            </tr>
          </table><br>
    </li>
    <li><p>Here we gain much more information about the abs method and what its purpose is. We learn some basics about what it does to the value. It even gives us some special cases that, while rare, can still occur. Note: NaN means Not a Number.</p>
      </li>
    <li><p>Here are some examples using the abs method.</p>
    </li>
</ol>
<blockquote>
  <table width="400" border="0" cellspacing="0" cellpadding="4">
    <tr class="text">
      <td>Math.abs(25) -&gt; 25</td>
      <td>Math.abs(-25) -&gt; 25</td>
    </tr>
    <tr class="text">
      <td>Math.abs(0) -&gt; 0</td>
      <td>Math.abs(17/5) -&gt; 3</td>
    </tr>
  </table>
  </blockquote><p>&#xA0;</p>
<br><br>
<table cellspacing="0" cellpadding="0" border="0">
  <tr>
    <td width="90%"><span class="header">G. Javadoc Tool</span></td>
    <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 9 of 12</nobr></font></td>
  </tr>
</table>
  <br>
<ol class="text">
	<li>The basics of creating your own APIs are pretty simple. When you add comments in your code, you can use the tag /**...*/ before each class, variable, constructor, and method to create block comments. These comments work within your code in essentially the same way as the regular block comment tag /*...*/. However, once we run the Javadoc tool, APIs will be created based on these comments.</li>
</ol>
<ol class="text" start="2">
	<li><p>The first line of the comment should be a quick description that sums up what it is in front of. This first line will turn into the quick description that we discussed earlier. The rest of your paragraph should consist of a more detailed description of the item.</p></li>
	<li><p>When you run your javadoc.exe program on your Java class file (as discussed in <a href="HA6_1JavaDocs.html" target="_blank">Handout A6.1</a>, Javadocs), it will create a few .html files in the local directory. If you open up index.html with your Web browser, you will find yourself looking at an API created for your class.</p>
	</li>
</ol>
<p>&#xA0;</p>
<br>  
  <br>
  <table cellspacing="0" cellpadding="0" border="0">
    <tr>
      <td width="90%"><span class="header">Summary/Review</span></td>
      <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 10 of 12</nobr></font></td>
    </tr>
  </table>
  <br>
  <p class="text">As a Java programmer, you want to avoid redoing work already done. This is why we try to design methods and classes that do small jobs and can therefore be reused in other spots. Pre-made java classes help with this process by providing a huge library of commonly needed classes. APIs are our instruction books, which we use to understand the purpose and applicability of these classes.</p>
  <br><br><br><h2>Chapter 7</h2><br>  
  <br>
  <table cellspacing="0" cellpadding="0" border="0">
    <tr>
      <td width="90%"><span class="header">A7 Introduction</span></td>
      <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 1 of 7</nobr></font></td>
    </tr>
  </table>
  <br>
  <p class="text">The input and output of a program&#x2019;s data is usually referred to as I/O. There are many different ways that a Java program can perform I/O. In this lesson, we present some very simple ways to handle text input typed in at the keyboard as well as how to format text to the screen. The Advanced Placement subset does not require that you know how to use any specific input and output classes, only that you know how to use I/O in some manner. This curriculum will use the Scanner class and the <code>printf()</code> method provided with Java 1.5.</p>
  <p class="text">The key topics for this lesson are:</p>
  <ol type="A" class="text">
    <li class="text"><a href="A7-A.html">Reading Input with the <code>Scanner</code> Class</a></li>
    <li class="text"><a href="A7-B.html">Multiple Line Stream Output Expressions</a></li>
    <li class="text"><a href="A7-C.html">Formatting Output</a></li>
    </ol><br>  
  <br>
  <table cellspacing="0" cellpadding="0" border="0">
    <tr>
      <td width="90%"><span class="header"><a href="../vocabulary/index_A.html#A7">A7 Vocabulary</a></span></td>
      <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 2 of 7</nobr></font></td>
    </tr>
  </table>
  <br>
  <table width="500" border="0">
    <tr class="text">
      <td>CONVERSION</td>
      <td>FLAGS</td>
    </tr>
    <tr class="text">
      <td>PRECISION</td>
      <td><code>printf</code></td>
    </tr>
    <tr class="text">
      <td><code>Scanner</code></td>
      <td><code>System.in</code></td>
    </tr>
    <tr class="text">
      <td><code>System.out</code></td>
      <td>WIDTH</td>
    </tr>
    <tr class="text">
      <td>&#xA0;</td>
      <td>&#xA0;</td>
    </tr>
    <tr class="text">
      <td>&#xA0;</td>
      <td>&#xA0;</td>
    </tr>
    <tr>
      <td>&#xA0;</td>
      <td>&#xA0;</td>
    </tr>
  </table>
  <br>
  <br>  
  <br>
  <table cellspacing="0" cellpadding="0" border="0">
    <tr>
      <td width="90%"><span class="header">A. Reading Input with the Scanner Class</span></td>
      <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 3 of 7</nobr></font></td>
    </tr>
  </table>
  <br>
  <ol class="text">
    <li><p>Some of the programs from the preceding lessons have been written without any flexibility. To change any of the data values in the programs, it is necessary to change the variable initializations, recompile the program, and run it again. Sometimes prompting the user for a value and then processing the data is more efficient and convenient.</p></li>
  <li>
    <p>However, accepting user input in Java can be complex. Throughout this curriculum, we will use the <code>Scanner</code> class to make processing input easier and less tedious.</p>
  </li>
  <li><p>Just as the System class provides <code>System.out</code> for output, there is an object for input, <code>System.in</code>. Unfortunately, Java&#x2019;s <code>System.in</code> object does not directly support convenient methods for reading numbers and strings. We need to have a class sitting between the <code>System.in</code> object and ourselves to filter what comes through. This is what the <code>Scanner</code> class does.</p></li>
        <li>Scanner is part of the java.util package, so we need to start off by adding the Scanner class to our import section.
          <blockquote>
            <p><code>import java.util.Scanner;</code></p>
          </blockquote>
        </li>
<li>Next, we create our Scanner object and pass in the System.in object.
  <blockquote>
    <p><code>Scanner in = new Scanner(System.in);</code></p>
    </blockquote>
<p>This tells the Scanner to look at the System.in object for all of its input. In Student Lesson A13, we will learn how to change the object we pass to the Scanner so that we can read the data stored in text files.</p>
</li>
<li>Here are some example statements:
  <blockquote>
    <p><img src="http://iws.punahou.edu/user/DKiang/apcs/LessonA7/images/Fig_7_1.gif" width="222" height="108"></p>
    </blockquote>
<p>When the statement <code>num1 = in.nextInt()</code> is encountered, the program pauses until an appropriate value is entered on the keyboard.</p>
</li>
<li><p>Any whitespace (spaces, tabs, newline) will separate input values. When reading values, whitespace keystrokes are ignored.</p>
</li>
  <li>When requesting data from the user via the keyboard, it is good programming practice to provide a prompt. An unintroduced input statement leaves the user hanging without a clue of what the program wants. For example:
    <blockquote>
      <p><code>System.out.print(&quot;Enter an integer --&gt; &quot;);<br>
        number = in.nextInt();</code></p>
    </blockquote>
  </li>
  </ol>
  <p>&#xA0;</p>
  <br><br>  
  <table cellspacing="0" cellpadding="0" border="0">
    <tr>
      <td width="90%"><span class="header">B. Multiple Line Stream Output Expressions</span></td>
      <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 4 of 7</nobr></font></td>
    </tr>
  </table>
  <br>
  <ol class="text">
    <li>We have already used examples of multiple output statements such as:
      <blockquote>
        <p><code>System.out.println(&quot;The value of sum = &quot; + sum);</code></p>
      </blockquote>
    </li>
<li>When the length of an output statement exceeds one line of code, it can be broken up several different ways:
  <blockquote>
    <p><code>System.out.println(&quot;The sum of &quot; + num1 + &quot; and &quot; + num2 +<br>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&quot; = &quot; + (num1 + num2));</code></p>
    </blockquote>
<p>or</p>
<blockquote>
  <p><code>System.out.print(&quot;The sum of &quot; + num1 + &quot; and &quot; + num2);<br>
  System.out.println( &quot; = &quot; + (num1 + num2));</code></p>
</blockquote>
</li>
<li><p>You cannot break up a String constant and wrap it around a line.</p>
        </li>
  </ol>
  <blockquote class="text">
    <p><code>System.out.print(&quot;A long string constant must be broken<br>
  up into two separate quotes. This will NOT work.&quot;);</code></p>
  <p><code>System.out.print(&quot;A long string constant must be broken up&quot;<br>
  &#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;+ &quot; into two separate quotes. This will work.&quot;);</code></p>
  </blockquote>
  <p>&#xA0;</p><br><br>
<table cellspacing="0" cellpadding="0" border="0">
  <tr>
    <td width="90%"><span class="header">C. Formatting Output</span></td>
    <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 5 of 7</nobr></font></td>
  </tr>
</table>
  <br>
<ol class="text">
    <li>
      <p>To format, we will learn a new printing method, <code>printf()</code>. It works similarly to the <code>print()</code> and <code>println()</code> methods that you have already been using to output text.</p>
      </li>
</ol>  <ol class="text" start="2">
      <li><p>The <code>printf()</code> method takes two arguments. The first one is the formatting String, a special sequence of characters that tells <code>printf()</code> how to display the second argument. The syntax for the formatting String is:</p>
          <blockquote>%[flags][width][.precision]conversion</blockquote>
        <p>The &#x2018;%&#x2019; sign tells the printf method that formatting is coming. All of your formatted String constants will start with %. It does not have to be the very first thing in your String constant, just the first part of any formatted text.</p>
      </li>
      <li><p>The last part of the formatting String, conversion, is one of the most important parts. It is what determines how the <code>printf()</code> method reacts to a message you send it. The most important conversion tags for you to know are &#x2018;s&#x2019;, &#x2018;d&#x2019;, and &#x2018;f&#x2019;. &#x2018;d&#x2019; is used for integers (base-10 notation), &#x2018;f&#x2019; is for numbers with decimal places (doubles), and &#x2018;s&#x2019; is for String literals. The conversion tag always comes at the end of the formatting String.</p>
        <table width="90%" border="0" cellpadding="0" cellspacing="0" bgcolor="#000000">
          <tr>
            <td><table width="100%" border="0" cellspacing="1" cellpadding="3">
              <tr bgcolor="#FFFFFF" class="text">
                <td width="20%"><div align="center"><strong>Conversion Tag</strong></div></td>
                <td width="30%"><div align="center"><strong>Usage Type</strong></div></td>
                <td width="50%"><div align="center"><strong>Example</strong></div></td>
              </tr>
              <tr bgcolor="#FFFFFF" class="text">
                <td width="20%"><div align="center">s</div></td>
                <td width="30%">String literals</td>
                <td width="50%"><code>printf(&#x201C;%s&#x201D;, &#x201C;Sam&#x201D;)</code></td>
              </tr>
              <tr bgcolor="#FFFFFF" class="text">
                <td width="20%"><div align="center">d</div></td>
                <td width="30%">ints</td>
                <td width="50%"><code>printf(&#x201C;%d&#x201D;, 5182)</code></td>
              </tr>
              <tr bgcolor="#FFFFFF" class="text">
                <td width="20%"><div align="center">f</div></td>
                <td width="30%">doubles</td>
                <td width="50%"><code>printf(&#x201C;%f&#x201D;, 2.123456)</code></td>
              </tr>
            </table></td>
          </tr>
        </table>
        <p align="left" class="text">&#xA0;</p>
      </li>
      <li>        Precision is very easy and straightforward. When using a formatting String with the &#x2018;s&#x2019; conversion tag, this will tell <code>printf()</code> the maximum number of characters to print out. When used with the &#x2018;f&#x2019; conversion tag, you can specify how many decimal places to print out, rounded to the closest number. If you don&#x2019;t specify how many decimal places to display with &#x2018;f&#x2019; then it will default to six places.
        <blockquote>
          <p><code>System.out.printf(&#x201C;%.2s&#x201D;, &#x201C;Hello&#x201D;) -&gt; He<br>
  System.out.printf(&#x201C;%.10s&#x201D;, &#x201C;Hello&#x201D;) -&gt; Hello<br>
  System.out.printf(&#x201C;%.5f&#x201D;, Math.PI) -&gt; 3.14159<br>
  System.out.printf(&#x201C;%.4f&#x201D;, Math.PI) -&gt; 3.1416<br>
  System.out.printf(&#x201C;%f&#x201D;, Math.PI) -&gt; 3.141593</code></p>
        </blockquote>
      </li>
<li>Width tells <code>printf()</code> the minimum number of characters to print out. This allows for creating right-aligned lists or menus. <code>printf()</code> does not distinguish between normal characters and special characters (escape sequences), so &#x201C;<code>Prices:</code>&#x201D; and &#x201C;<code>Prices:\n</code>&#x201D; are two different sizes. If you want to print your data out left-aligned, you can simply add a &#x2018;-&#x2018; character to the left of the width value.
  <p>Note: In the example below, the first line has a width of 11 instead of 10 to adjust for the <code>\n</code> error. Because numeric entries cannot use these special characters, it is better to use <code>println()</code> to separate lines when utilizing <code>printf()</code>. The example below shows one instance of using the <code>\n</code> character as well as doing two columns of formatted output.</p>
<blockquote>
    <p><code>System.out.printf(&#x201C;%-10s&#x201D;, &#x201C;Name:&#x201D;);<br>
      System.out.printf(&#x201C;%11s&#x201D;, &#x201C;Price:\n&#x201D;);<br>
      System.out.printf(&#x201C;%-10s&#x201D;, &#x201C;Soda&#x201D;);<br>
      System.out.printf(&#x201C;%10.2f&#x201D;, 10.25);<br>
      System.out.println();<br>
      System.out.printf(&#x201C;%-10s&#x201D;, &#x201C;Candy&#x201D;);<br>
      System.out.printf(&#x201C;%10.2f&#x201D;, 1.50);</code></p>
  <p><code>Output:</code></p>
    <p><code>Name: &#xA0;&#xA0;&#xA0;&#xA0;&#xA0;Price:<br>
      Soda &#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;10.25<br>
      Candy &#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;1.50</code></p>
</blockquote>
</li>
<li>  Flags are special characters that give special properties to the values passed in. Adding a &#x2018;+&#x2019; sign in the formatting String will give numbers a positive or negative sign when printed. Putting in a &#x2018;(&#x2019; will cause negative numbers to be enclosed with parentheses. The most useful of the flags is &#x2018;,&#x2019; because it will add commas into large numbers (in the correct spot for the region, i.e. Japan puts numbers into groups of four unlike the US, which puts numbers in groups of three). To get a dollar sign directly before your printed value, place the &#x2018;$&#x2019; character directly before the &#x2018;%&#x2019; sign.
  <blockquote>
    <p><code>System.out.printf(&#x201C;%,d&#x201D;, 12345678) -&gt; 12,345,678<br>
  System.out.printf(&#x201C;$%,d&#x201D;, 12345678) -&gt; $12,345,678<br>
  System.out.printf(&#x201C;%,(d&#x201D;, 12345678) -&gt; 12,345,678<br>
  System.out.printf(&#x201C;%,(d&#x201D;, -12345678) -&gt; (12,345,678)</code></p>
  </blockquote>
</li>
<li>        You may put multiple arguments in one call to <code>printf()</code> for organizational purposes. Simply put multiple formatting Strings in the first passed argument to <code>printf()</code> and then add your additional arguments, separated by commas.
  <blockquote>
    <p><code>double mySum = 123.456<br>
      System.out.printf(&#x201C;%10s %10.2f&#x201D;, &#x201C;Total:&#x201D;, mySum);</code></p>
  </blockquote>
</li>
<li>This curriculum uses just a few of the many things that <code>printf()</code> is capable of. Once you get more familiar with using the formatting options shown in this guide, you can look at the API for the Formatter class for more information on formatting Strings. The <code>printf()</code> method is an easy way to manage the Formatter class in a way that is very similar to the common <code>print()</code> and <code>println()</code> functions.</li>
</ol>
<p>&#xA0;</p><br>  
  <br>
  <table cellspacing="0" cellpadding="0" border="0">
    <tr>
      <td width="90%"><span class="header">Summary/Review</span></td>
      <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 6 of 7</nobr></font></td>
    </tr>
  </table>
  <br>
  <p class="text">These two classes, <code>Scanner</code> and <code>Formatter</code>, will be used in many programs. They provide you with the flexibility needed to start creating very robust programs. You can now interact with a user instead of simply displaying results on the screen. Go back through some of the programs you have already made and see which ones could benefit from accepting user input or formatting data.</p>
  <br><br><br><h2>Chapter 8</h2><br>  
  <br>
  <table cellspacing="0" cellpadding="0" border="0">
    <tr>
      <td width="90%"><span class="header">A8 Introduction</span></td>
      <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 1 of 17</nobr></font></td>
    </tr>
  </table>
  <br>
  <p class="text">Any sort of complex program must have some ability to control flow. Without this control, programs become limited to one basic job each time the program is run. The most basic of these control structures is the <strong>if</strong> statement, followed by the <strong>if-else</strong>, and then the <strong>switch</strong> statement. </p>
  <p class="text">The key topics for this lesson are:</p>
  <ol type="A" class="text">
    <li class="text"><a href="A8-A.html">Structured Programming</a></li>
    <li class="text"><a href="A8-B.html">Control Structures</a></li>
    <li class="text"><a href="A8-C.html">Algorithm Development and Pseudocode</a></li>
    <li class="text"><a href="A8-D.html">Relational Operators</a></li>
    <li class="text"><a href="A8-E.html">Logical Operators</a></li>
    <li class="text"><a href="A8-F.html">Precedence and Associativity of Operators</a></li>
    <li class="text"><a href="A8-G.html">The if-else Statements</a></li>
    <li class="text"><a href="A8-H.html">Compound Statements</a></li>
    <li class="text"><a href="A8-I.html">Nested if-else Statements</a></li>
  <li class="text"><a href="A8-J.html">Conditional Operator</a></li>
  <li class="text"><a href="A8-K.html">Boolean Identifiers</a></li>
  <li class="text"><a href="A8-L.html">Switch Statements (Optional)</a></li>
  </ol><br>  
  <br>
  <table cellspacing="0" cellpadding="0" border="0">
    <tr>
      <td width="90%"><span class="header"><a href="../vocabulary/index_A.html#A8">A8 Vocabulary</a></span></td>
      <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 2 of 17</nobr></font></td>
    </tr>
  </table>
  <br>
  <table width="500" border="0">
    <tr class="text">
      <td>ALGORITHM</td>
      <td>BOOLEAN IDENTIFIER</td>
    </tr>
    <tr class="text">
      <td>COMPOUND STATEMENT</td>
      <td>CONDITIONAL OPERATOR</td>
    </tr>
    <tr class="text">
      <td>CONTROL STRUCTURE</td>
      <td>IF-ELSE</td>
    </tr>
    <tr class="text">
      <td>ITERATION</td>
      <td>LOGICAL OPERATOR</td>
    </tr>
    <tr class="text">
      <td>PSEUDOCODE</td>
      <td>RELATIONAL OPERATOR</td>
    </tr>
    <tr class="text">
      <td>STEPWISE REFINEMENT</td>
      <td>STRUCTURED PROGRAMMING</td>
    </tr>
    <tr>
      <td>&#xA0;</td>
      <td>&#xA0;</td>
    </tr>
  </table>
  <br>
  <br>  
  <br>
  <table cellspacing="0" cellpadding="0" border="0">
    <tr>
      <td width="90%"><span class="header">A. Structured Programming</span></td>
      <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 3 of 17</nobr></font></td>
    </tr>
  </table>
  <br>
  <ol class="text">
    <li><p>In the early days of programming (1960&apos;s), the approach to writing software was relatively primitive and ineffective. Much of the code was written with <strong><code>goto</code></strong> statements that transferred program control to another line in the code. Tracing this type of code was an exercise in jumping from one spot to another, leaving behind a trail of lines similar to spaghetti. The term &quot;spaghetti code&quot; comes from trying to trace code linked together with <strong><code>goto</code></strong> statements. The complexity this added to code led to the development of structured programming.</p></li>
  <li>
    <p>The research of Bohm and Jacopini has led to the rules of structured programming. Here are five tenets of structured programming.</p>
  <ol type="a">
	<li>No <strong><code>goto</code></strong> statements are to be used in writing code.</li>
	<li>All programs can be written in terms of three control structures: sequence, selection, and iteration.</li>
	<li>Each control structure has one entrance point and one exit point. We will sometimes allow for multiple exit points from a control structure using the <strong><code>break</code></strong> statement.</li>
	<li>Control structures may be stacked (sequenced) one after the other.</li>
	<li>Control structures may be nested inside other control structures.</li>
	<br>
  </ol><br>
  </li>
  <li><p>The control structures of Java encourage structured programming. Staying within the guidelines of structured programming has led to great productivity gains in the field of software engineering.</p></li>
      </ol>
  <p>&#xA0;</p>
  <br><br>  
  <table cellspacing="0" cellpadding="0" border="0">
    <tr>
      <td width="90%"><span class="header">B. Control Structures</span></td>
      <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 4 of 17</nobr></font></td>
    </tr>
  </table>
  <br>
  <ol class="text">
    <li><p>There are only three necessary control structures needed to write programs: sequence, selection, and iteration.</p></li>
    </ol>
  <ol class="text" start="2">
      <li><p>Sequence refers to the line-by-line execution as used in your programs so far. The program enters the sequence, does each step, and exits the sequence. This allows for sequences to do only a limited job during each execution.</p></li>
      <li><p>Selection is the control structure that allows choice among different paths. Java provides different levels of selection:</p>
        <ul class="textd">
          <li>One-way selection with an <strong><code>if</code></strong> structure</li>
          <li>Two-way selection with an <strong><code>if-else</code></strong> structure</li>
          <li>Multiple selection with a <strong><code>switch</code></strong> structure</li>
        </ul>
      </li><br>
<li><p>Iteration refers to looping. Java provides three loop structures. These will be discussed in length in Student Lesson A12.</p>
	    <ul class="textd">
	      <li><span class="style1"><code>while</code></span> loops</li>
	      <li><span class="style2"><code>do-while</code></span> loops</li>
	      <li><span class="style3"><code>for</code></span> loops</li>
	      </ul>
</li>
  </ol>  <p>&#xA0;</p><br><br>
<table cellspacing="0" cellpadding="0" border="0">
  <tr>
    <td width="90%"><span class="header">C. Algorithm Development and Pseudocode</span></td>
    <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 5 of 17</nobr></font></td>
  </tr>
</table>
  <br>
<ol class="text">
    <li><p>An algorithm is a solution to a problem. Computer scientists are in the problem-solving business. They use techniques of structured programming to develop solutions to problems. Algorithms will range from the easier &quot;finding the average of two numbers&quot; to the more difficult &quot;visiting all the subdirectories on a hard disk, searching for a file.&quot;</p>
      </li>
</ol>  <ol class="text" start="2">
      <li><p>A major task of the implementation stage is the conversion of rough designs into refined algorithms that can then be coded in the implementation language of choice.</p>
          </li>
      <li><p>Pseudocode refers to a rough-draft outline of an answer, written in English-like terms. These generally use phrases and words that are close to programming languages, but avoid using any specific language syntax. Once the pseudocode has been developed, translation into code occurs more easily than if we had skipped this pseudocode stage.</p>
      </li>
      <li>Stepwise refinement is the process of gradually developing a more detailed description of an algorithm. Problem solving in computer science involves overall development of the sections of a program, expanding each section with more detail, later working out the individual steps of an algorithm using pseudocode, and then finally writing a code solution.</li>
</ol>
<br><br>
<table cellspacing="0" cellpadding="0" border="0">
  <tr>
    <td width="90%"><span class="header">D. Relational Operators</span></td>
    <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 6 of 17</nobr></font></td>
  </tr>
</table>
  <br>
  <ol class="text">
    <li><p>A relational operator is a binary operator that compares two values. The following symbols are used in Java as relational operators:</p>      
	<blockquote>
	    <table width="400" border="0" cellspacing="0" cellpadding="4">
          <tr class="text">
            <td>&lt;</td>
            <td>less than</td>
          </tr>
          <tr class="text">
            <td>&gt;</td>
            <td>greater than</td>
          </tr>
          <tr class="text">
            <td>&lt;=</td>
            <td>less than or equal to</td>
          </tr>
          <tr class="text">
            <td>&gt;=</td>
            <td>greater than or equal to</td>
          </tr>
          <tr class="text">
            <td>==</td>
            <td>equal to</td>
          </tr>
          <tr class="text">
            <td>!=</td>
            <td>not equal to</td>
          </tr>
        </table>
	    </blockquote>
    </li>
  </ol>
  <ol class="text" start="2">
    <li><p></p>A relational operator is used to compare two values, resulting in a relational expression. For example:<p></p>
	<blockquote>
        <table width="90%" border="0" cellspacing="0" cellpadding="3">
            <tr class="text">
              <td width="33%"><code>number &gt; 16</code></td>
              <td width="33%"><code>grade == &apos;F&apos;</code></td>
              <td width="33%"><code>passing &gt;= 60</code></td>
            </tr>
              </table>
	    </blockquote>
		</li>
  <li>
    <p>The result of a relational expression is a <strong><code>boolean</code></strong> value of either <strong><code>true</code></strong> or <strong><code>false</code></strong>.</p>
  </li>
  <li>    When character data is compared, the ASCII code values are used to determine the answer. The following expressions result in the answers given:
    <blockquote>
      <table width="400" border="0" cellspacing="0" cellpadding="4">
        <tr class="text">
          <td width="30%">&apos;A&apos; &lt; &apos;B&apos;</td>
          <td width="70%">evaluates as true, (65 &lt; 66)</td>
        </tr>
        <tr class="text">
          <td width="30%">&apos;d&apos; &lt; &apos;a&apos;</td>
          <td width="70%">evaluates as false, (100 &lt; 97)</td>
        </tr>
        <tr class="text">
          <td width="30%">&apos;t&apos; &lt; &apos;X&apos;</td>
          <td width="70%">evaluates as false, (116 &lt; 88)</td>
        </tr>
      </table>
      </blockquote>
  <p>In the last example, you must remember that upper case letters come first in the ASCII collating sequence; the lower case letters follow after and consequently have larger ASCII values than do upper case (&apos;A&apos; = 65, &apos;a&apos; = 97).</p>
  </li>
  </ol>
  <p>&#xA0;</p><br><br>
<table cellspacing="0" cellpadding="0" border="0">
  <tr>
    <td width="90%"><span class="header">E. Logical Operators</span></td>
    <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 7 of 17</nobr></font></td>
  </tr>
</table>
  <br>
<ol class="text">
	<li>The three logical operators in the AP subset are AND, OR, and NOT. These operators are represented by the following symbols in Java:
	  <blockquote>
	    <table width="400" border="0" cellspacing="0" cellpadding="4">
          <tr class="text">
            <td width="30%">AND</td>
            <td width="70%"><code>&amp;&amp;</code></td>
          </tr>
          <tr class="text">
            <td width="30%">OR</td>
            <td width="70%"><code>||</code> (two vertical bars)</td>
          </tr>
          <tr class="text">
            <td width="30%">NOT</td>
            <td width="70%"><code>!</code></td>
          </tr>
        </table>
	    </blockquote>
	<p>These logical operators allow us to combine conditions. For example, if a dog is gray and weighs less than 15 pounds it is the perfect lap dog.</p>
	</li>
<li>The <code>&amp;&amp;</code> (and) operator requires both operands (values) to be true for the result to be true.
  <blockquote>
    <p><code>(true &amp;&amp; true) -&gt; <strong>true</strong><br>
  (true &amp;&amp; false) -&gt; <strong>false</strong><br>
  (false &amp;&amp; true) -&gt; <strong>false</strong><br>
  (false &amp;&amp; false) -&gt; <strong>false</strong></code></p>
  </blockquote>
</li>
<li>The following are Java examples of using the &amp;&amp; (and) operator.
  <blockquote>
    <p><code>((2 &lt; 3) &amp;&amp; (3.5 &gt; 3.0)) -&gt; <strong>true</strong><br>
  ((1 == 0) &amp;&amp; (2 != 3)) -&gt; <strong>false</strong></code></p>
    </blockquote>
<p>The <code>&amp;&amp;</code> operator performs short-circuit evaluation in Java. If the first operand in <code>&amp;&amp;</code> statement is false, the operator immediately returns false without evaluating the second half.</p>
</li>
<li>  The <code>||</code> (or) operator requires only one operand (value) to be true for the result to be true.
  <blockquote>
    <p><code>(true || true) -&gt; <strong>true</strong><br>
  (true || false) -&gt; <strong>true</strong><br>
  (false || true) -&gt; <strong>true</strong><br>
  (false || false) -&gt; <strong>false</strong></code></p>
  </blockquote>
</li>
<li>  The following is a Java example of using the <code>||</code> (or) operator.
  <blockquote>
    <p><code>((2+3 &lt; 10) || (19 &gt; 21)) -&gt; true</code></p>
    </blockquote>
<p>The <code>||</code> operator also performs short-circuit evaluation in Java. If the first half of an <code>||</code> statement is true, the operator immediately returns true without evaluating the second half.</p>
</li>
<li>The <code>!</code> operator is a unary operator that changes a <strong><code>boolean</code></strong> value to its opposite.
  <blockquote>
    <p><code>(! false == true) -&gt; true<br>
  (! true == false) -&gt; true<br>
  (! true == true) -&gt; false<br>
  !(2 &lt; 3) -&gt; false</code></p>
  </blockquote>
</li>
</ol>
<p>&#xA0;</p>
<br><br>
<table cellspacing="0" cellpadding="0" border="0">
  <tr>
    <td width="90%"><span class="header">F. Precedence and Associativity of Operators</span></td>
    <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 8 of 17</nobr></font></td>
  </tr>
</table>
  <br>
<ol class="text">
	<li><p>Introducing two new sets of operators (relational and logical) adds to the complexity of operator precedence in Java. An abbreviated precedence chart is included here.</p>
	  <blockquote>
	    <table width="400" border="0" cellspacing="0" cellpadding="4">
          <tr class="text">
            <td width="50%"><strong>Operator</strong></td>
            <td width="50%"><div align="center"><strong>Associativity</strong></div></td>
          </tr>
          <tr class="text">
            <td width="50%"><code>! unary - ++ --</code></td>
            <td width="50%"><div align="center">right to left</div></td>
          </tr>
          <tr class="text">
            <td width="50%"><code>* / %</code></td>
            <td width="50%"><div align="center">left to right</div></td>
          </tr>
          <tr class="text">
            <td width="50%"><code>+ -</code></td>
            <td width="50%"><div align="center">left to right</div></td>
          </tr>
          <tr class="text">
            <td width="50%"><code>&lt; &lt;= &gt; &gt;=</code></td>
            <td width="50%"><div align="center">left to right</div></td>
          </tr>
          <tr class="text">
            <td width="50%"><code>== !=</code></td>
            <td width="50%"><div align="center">left to right</div></td>
          </tr>
          <tr class="text">
            <td><code>&amp;&amp; (and)</code></td>
            <td><div align="center">left to right</div></td>
          </tr>
          <tr class="text">
            <td><code>|| (or)</code></td>
            <td><div align="center">left to right</div></td>
          </tr>
          <tr class="text">
            <td><code>= += -= *= /=</code></td>
            <td><div align="center">right to left</div></td>
          </tr>
          <tr class="text">
            <td colspan="2"><div align="center">Table 8-1 Precedence and Associativity of Operators</div></td>
            </tr>
        </table>
	    </blockquote>
	</li>
<li>Because the logical operators have low precedence in Java, parentheses are not needed to maintain the correct order of solving problems. However, they can be used to make complex expressions more readable.
  <blockquote>
    <p><code>((2 + 3 &lt; 10) &amp;&amp; (75 % 12 != 12)) // easier to read<br>
  (2 + 3 &lt; 10 &amp;&amp; 75 % 12 != 12) &#xA0;&#xA0;&#xA0;&#xA0;// harder to read</code></p>
  </blockquote>
</li>
	</ol>
<p>&#xA0;</p>
<br><br>
<table cellspacing="0" cellpadding="0" border="0">
  <tr>
    <td width="90%"><span class="header">G. The if-else Statements</span></td>
    <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 9 of 17</nobr></font></td>
  </tr>
</table>
  <br>
<ol class="text">
	<li><p>The general syntax of the if statement is as follows:</p>
	  <blockquote>
	    <p class="text"><code><strong>if</strong> (expression){<br>
statement1;<br>
}</code></p>
	    </blockquote>
	<p class="text">If the expression evaluates to true, statement1 is executed. If expression is false then nothing is executed and the program execution picks up after the ending curly brace (}). The following diagram shows the flow of control:</p>
	</li>
</ol>
<blockquote>
  <p><img src="http://iws.punahou.edu/user/DKiang/apcs/LessonA8/images/Fig_8_1.gif" width="200" height="149"></p>
</blockquote><ol class="text" start="2">
        <li>To provide for two-way selection an if statement may add an else option.
          <blockquote>
            <p><code><strong>if</strong> (expression){<br>
statement1;<br>
}<strong>else</strong>{<br>
statement2;<br>
}</code></p>
          </blockquote>
        <p>If the expression evaluates to true, the statement is executed. In an if-else statement, if the expression is false then statement2 would be executed. The following flowchart illustrates the flow of control.</p>
        </li>
</ol>
<blockquote>
  <p align="center"><img src="http://iws.punahou.edu/user/DKiang/apcs/LessonA8/images/Fig_8_2.gif" width="330" height="223"></p>
</blockquote><ol class="text" start="3">
  <li><p>The expression being tested must always be placed in parentheses. This is a common source of syntax errors.</p>
        </li>
</ol><p>&#xA0;</p>
<br><br>
<table cellspacing="0" cellpadding="0" border="0">
  <tr>
    <td width="90%"><span class="header">H. Compound Statements</span></td>
    <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 10 of 17</nobr></font></td>
  </tr>
</table>
  <br>
<ol class="text">
	<li><p>The statement executed in a control structure can be a block of statements, grouped together into a single compound statement.</p></li>
</ol>
<ol class="text" start="2">
	<li>	  A compound statement is created by enclosing any number of single statements by braces as shown in the following example:
	  <blockquote>
	    <p><code><strong>if</strong> (expression){<br>
statement1;<br>
statement2;<br>
statement3;<br>
}<strong>else</strong>{<br>
statement4;<br>
statement5;<br>
statement6;<br>
}</code></p>
	    </blockquote>
	</li>
	</ol><br><br>
<table cellspacing="0" cellpadding="0" border="0">
  <tr>
    <td width="90%"><span class="header">I. Nested if-else Statements</span></td>
    <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 11 of 17</nobr></font></td>
  </tr>
</table>
  <br>
<ol class="text">
	<li>The statement inside of an <strong><code>if</code></strong> or <strong><code>else</code></strong> option can be another <strong><code>if-else</code></strong> statement. Placing an <strong><code>if-else</code></strong> inside another is known as nested <strong><code>if-else</code></strong> constructions. For example:
	  <blockquote>
	    <p><code><strong>if</strong> (expression1){<br>
&#xA0;&#xA0;<strong>if</strong> (expression2){<br>
&#xA0;&#xA0;&#xA0;&#xA0;statement1;<br>
&#xA0;&#xA0;}<strong>else</strong>{<br>
&#xA0;&#xA0;&#xA0;&#xA0;statement2;<br>
&#xA0;&#xA0;}<br>
}<strong>else</strong>{<br>
&#xA0;&#xA0;statement3;<br>
}</code></p>
	    </blockquote>
	</li>
<li>
  <p>Here, your braces will need to be correct to ensure that the ifs and elses get paired with their partners.</p>
</li>
	<li>
	  <p>The above example has three possible different outcomes as shown in the following chart:</p>
	</li>
<li>  Technically, braces are not needed for if and if-else structures if you only want one statement to execute. However, caution must be shown when using else statements inside of nested if-else structures. For example:
  <blockquote>
    <p><code><strong>if</strong> (expression1)<br>
        <strong>&#xA0;&#xA0;if</strong> (expression2)<br>
&#xA0;&#xA0;&#xA0;&#xA0;statement1;<br>
<strong>else</strong><br>
&#xA0;&#xA0;statement2;</code></p>
    </blockquote>
<p>Indentation is ignored by the compiler, hence it will pair the else statement with the inner if. If you want the else to get paired with the outer if as the indentation indicates, you need to add braces:</p>
<blockquote>
  <p><code><strong>if</strong> (expression1){<br>
&#xA0;&#xA0;<strong>if</strong> (expression2)<br>
&#xA0;&#xA0;&#xA0;&#xA0;statement1;<br>
}<strong>else</strong><br>
&#xA0;&#xA0;statement2;</code></p>
  </blockquote>
<p>The braces allow the else statement to be paired with the outer <strong><code>if</code></strong>.</p>
<table width="90%" border="0" cellspacing="0" cellpadding="0">
  <tr>
    <td bgcolor="#000000"><table width="100%" border="0" cellspacing="1" cellpadding="4">
      <tr valign="top" class="text">
        <td width="20%" nowrap="" bgcolor="#FFFFFF"><strong>Important Concept</strong></td>
        <td width="80%" bgcolor="#FFFFFF">However, if you always use braces when writing <strong><code>if</code></strong> and <strong><code>if-else</code></strong> statements, you will never have this problem.</td>
      </tr>
    </table></td>
  </tr>
</table><br>
</li>
<li> 
  <p>Another alternative to the example in Section 4 makes use of the &amp;&amp; operator. A pair of nested if statements can be coded as a single compound &amp;&amp; statement. Both of these blocks of code would have the exact same effect, but the second one is slightly easier to read. </p>
</li>
<blockquote>
          <p><code><strong>if</strong>(expression1){<br>
&#xA0;&#xA0;<strong>if</strong>(expression2){<br>
&#xA0;&#xA0;&#xA0;&#xA0;statement1;<br>
&#xA0;&#xA0;} <br>
      }</code></p>
        <p><code>//or...</code></p>
          <p><code><strong>if</strong> (expression1 &amp;&amp; expression2){<br>
  &#xA0;&#xA0;statement1;<br>
        }</code></p>
        </blockquote>
  <p>The second block of code makes the conditions clearer to another programmer.</p>
  <li>Consider the following example of determining the type of triangle given the three sides A, B, and C.
    <blockquote>
      <p><code><strong>if</strong> ( (A == B) &amp;&amp; (B == C) )<br>
  &#xA0;&#xA0;System.out.println(&quot;Equilateral triangle&quot;);<br>
  <strong>else if</strong> ( (A == B) || (B == C) || (A == C) )<br>
&#xA0;&#xA0;System.out.println(&quot;Isosceles triangle&quot;);<br>
<strong>else</strong><br>
&#xA0;&#xA0;System.out.println(&quot;Scalene triangle&quot;);</code></p>
      </blockquote>
  <p>If an equilateral triangle is encountered, the rest of the code is ignored. This can help to reduce the execution time of a program.</p>
  </li>
</ol>
<p>&#xA0;</p><br><br>
<table cellspacing="0" cellpadding="0" border="0">
  <tr>
    <td width="90%"><span class="header">J. Conditional Operator</span></td>
    <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 12 of 17</nobr></font></td>
  </tr>
</table>
  <br>
<ol class="text">
	<li>Java provides an alternate method of coding an <strong><code>if-else</code></strong> statement using the conditional operator. This operator is the only ternary operator in Java, as it requires three operands. The general syntax is:</li>
</ol>
<blockquote>
  <p class="text"><code>(condition) ? statement1 : statement2;</code></p>
</blockquote><ol class="text" start="2">
	<li><p>If the condition is true, <code>statement1</code> is executed. If the condition is false, <code>statement2</code> is executed.</p></li>
	<li>This is appropriate in situations where the conditions and statements are fairly compact.
	  <blockquote>
	    <p><code><strong>int</strong> max(<strong>int</strong> a, int b){ // returns the larger of two integers<br>
  &#xA0;&#xA0;(a &gt; b) ? <strong>return</strong> a : <strong>return</strong> b;<br>
}</code></p>
	    </blockquote>
	</li>
</ol>
<p>&#xA0;</p>
<br><br>
<table cellspacing="0" cellpadding="0" border="0">
  <tr>
    <td width="90%"><span class="header">K. Boolean Identifiers</span></td>
    <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 13 of 17</nobr></font></td>
  </tr>
</table>
  <br>
<ol class="text">
	<li>The execution of <strong><code>if-else</code></strong> statements depends on the value of the Boolean expression. We can use <strong><code>boolean</code></strong> variables to write code that is easier to read.</li>
</ol>
<ol class="text" start="2">
	<li>For example, the <strong><code>boolean</code></strong> variable done could be used to write code that reads more like English.
	  <p>Instead of</p>
	<p><code><strong>if</strong>(done == <strong>true</strong>){ <br>
  &#xA0;&#xA0;System.out.println(&quot;We are done!&quot;);<br>
  }</code></p>
	  <p>we can write</p>
	  <p><code><strong>if</strong>(done){ <br>
  &#xA0;&#xA0;System.out.println(&quot;We are done!&quot;);<br>
  }</code></p>
	</li>
<li><p>Programmers often use <strong><code>boolean</code></strong> variables to aid in program flow and readability. The second version is the more preferred way of using a <strong><code>boolean</code></strong> variable in this situation because it is less dangerous. If you make a mistake and only put = instead of == Java will not catch that and interprets the statement as assignment. Some strange results could occur and it can take the programmer a while to catch the error.</p>
</li>
</ol>
<p>&#xA0;</p>
<br><br>
<table cellspacing="0" cellpadding="0" border="0">
  <tr>
    <td width="90%"><span class="header">L. Switch Statements (Optional)</span></td>
    <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 14 of 17</nobr></font></td>
  </tr>
</table>
  <br>
<ol class="text">
	<li><p>Consider a simple user menu for a store simulation program. There should be options to buy certain items, check your total money spent, cancel items selected, exit, and finish and pay. We could take the input from this menu and do a complicated, nested series of <strong><code>if-else</code></strong> statements, but that would quickly become bulky and difficult to read. However, there is an easy way to handle such data input with a <strong><code>switch</code></strong> statement. Depending on which command is chosen, the program will select one direction out of many. The AP exam does not test on the <strong><code>switch</code></strong> statement, but we include it here at the end of this chapter because it is a very useful tool to have in your programming toolkit.</p></li>
	<li><p>The general form of a <strong><code>switch</code></strong> statement is:</p>
	  <p><img src="http://iws.punahou.edu/user/DKiang/apcs/LessonA8/images/Code_Sample_8_1.gif" width="479" height="354"></p>
	</li>
<li><p>The flow of control of a <strong><code>switch</code></strong> statement is illustrated in this diagram:</p></li>
</ol>
<blockquote>
  <p><img src="http://iws.punahou.edu/user/DKiang/apcs/LessonA8/images/Fig_8_3.gif" width="300" height="395"></p>
  </blockquote>
<ol class="text" start="4">
  <li>
    <p>The <strong><code>switch</code></strong> statement attempts to match the integer value of the expression with one of the <strong><code>case</code></strong> values.</p>
  </li>
<li>
  <p>If a match occurs, then all statements past the <strong><code>case</code></strong> value are executed until a <strong><code>break</code></strong> statement is encountered.</p>
</li>
<li>
  <p>The effect of the break statement causes program control to jump to the end of the switch statement. No other cases are executed.</p>
</li>
<li>
  <p>A very common error when coding a <strong><code>switch</code></strong> control structure is forgetting to include the <strong><code>break</code></strong> statements to terminate each case value. If the <strong><code>break</code></strong> statement is omitted, all the statements following the matching <strong><code>case</code></strong> value are executed. This is usually very undesirable.</p>
</li>
<li>  If it is possible that none of the case statements will be true, you can add a <strong><code>default</code></strong> statement at the end of the <strong><code>switch</code></strong>. This will only execute if none of the case statements happened. If all possibilities are covered in your case statements, the <strong><code>default</code></strong> statement is unnecessary. Note that the <strong><code>default</code></strong> statement can actually be placed anywhere. If you place the <strong><code>default</code></strong> in the beginning or middle of the <strong><code>switch</code></strong>, you will probably want to end the <strong><code>default</code></strong> case with a <strong><code>break</code></strong>. Otherwise, execution will continue with the case after the <strong><code>default</code></strong>.  
  <p><img src="http://iws.punahou.edu/user/DKiang/apcs/LessonA8/images/Code_Sample_8_2.gif" width="431" height="149"></p>
</li>
<li>        The following example applies the switch statement to printing the work day of the week corresponding to a value. We pass in the integer day:
  <p><img src="http://iws.punahou.edu/user/DKiang/apcs/LessonA8/images/Code_Sample_8_3.gif" width="477" height="121"></p>
</li>
<li>  Suppose we wanted to count the occurrences of vowels and consonants in a stream of text.
  <p><img src="http://iws.punahou.edu/user/DKiang/apcs/LessonA8/images/Code_Sample_8_4.gif" width="522" height="153"></p>
<ol type="a">
    <li>Note that multiple case values can lead to one set of statements.</li>
  <li>It is good programming practice to include a break statement at the end of the switch structure. If you need to go back and add another case statement at the end of the switch structure, a break statement already terminates the previous case statement and there is no chance that you might forget to add a break statement.</li>
</ol><br>
</li>
<li>  
  <p>There are programming situations where the <strong><code>switch</code></strong> statement should not replace an <strong><code>if-else</code></strong> chain. If the value being compared must fit in a range of values, the <strong><code>if-else</code></strong> statement should be used.
  </p>
    <p><img src="http://iws.punahou.edu/user/DKiang/apcs/LessonA8/images/Code_Sample_8_5.gif" width="329" height="109"></p>
    <p><strong>etc...</strong></p>
    <blockquote>
      <p>You should not replace the above structure with a switch statement.</p>
</blockquote>
</li>
<li>Finally, the <strong><code>switch</code></strong> statement cannot compare <strong><code>double</code></strong> values.</li>
</ol>
<p>&#xA0;</p>
<br>  
  <br>
  <table cellspacing="0" cellpadding="0" border="0">
    <tr>
      <td width="90%"><span class="header">Summary/Review</span></td>
      <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 15 of 17</nobr></font></td>
    </tr>
  </table>
  <br>
  <p class="text">Control structures are a fundamental part of Java. You will need to practice control structures in Java to become familiar with what types of situations they are useful in. Also, Boolean expressions are very useful and should be used whenever appropriate to make coding easier.</p>
  <br><br><br><h2>Chapter 9</h2><br>  
  <br>
  <table cellspacing="0" cellpadding="0" border="0">
    <tr>
      <td width="90%"><span class="header">A9 Introduction</span></td>
      <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 1 of 8</nobr></font></td>
    </tr>
  </table>
  <br>
  <p class="text">Recursion is the process of a method calling itself as part of the solution to a problem. It is a problem solving technique that can turn long and difficult solutions into compact and elegant answers. </p>
  <p class="text">The key topics for this lesson are:</p>
  <ol type="A" class="text">
    <li class="text"><a href="A9-A.html">Recursion</a></li>
    <li class="text"><a href="A9-B.html">Pitfalls of Recursion</a></li>
    <li class="text"><a href="A9-C.html">Recursion Practice</a></li>
    </ol><br>  
  <br>
  <table cellspacing="0" cellpadding="0" border="0">
    <tr>
      <td width="90%"><span class="header"><a href="../vocabulary/index_A.html#A9">A9 Vocabulary</a></span></td>
      <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 2 of 8</nobr></font></td>
    </tr>
  </table>
  <br>
  <table width="500" border="0">
    <tr class="text">
      <td width="50%">BASE CASE</td>
      <td width="50%">RECURSION</td>
    </tr>
    <tr class="text">
      <td width="50%">STACK</td>
      <td width="50%">STACK OVERFLOW ERROR</td>
    </tr>
    <tr class="text">
      <td width="50%">&#xA0;</td>
      <td width="50%">&#xA0;</td>
    </tr>
    <tr class="text">
      <td width="50%">&#xA0;</td>
      <td width="50%">&#xA0;</td>
    </tr>
    <tr class="text">
      <td width="50%">&#xA0;</td>
      <td width="50%">&#xA0;</td>
    </tr>
    <tr class="text">
      <td width="50%">&#xA0;</td>
      <td width="50%">&#xA0;</td>
    </tr>
    <tr>
      <td width="50%">&#xA0;</td>
      <td width="50%">&#xA0;</td>
    </tr>
  </table>
  <br>
  <br>  
  <br>
  <table cellspacing="0" cellpadding="0" border="0">
    <tr>
      <td width="90%"><span class="header">A. Recursion</span></td>
      <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 3 of 8</nobr></font></td>
    </tr>
  </table>
  <br>
  <ol class="text">
    <li><p>Recursion occurs when a method calls itself to solve another version of the same problem. With each recursive call, the problem becomes simpler and moves towards a base case. A base case is when the solution to the problem can be calculated without another recursive call.</p></li>
  <li><p>Recursion involves the internal use of a stack. A stack is a data abstraction that works like this: New data is &quot;pushed,&quot; or added to the top of the stack. When information is removed from the stack it is &quot;popped,&quot; or removed from the top of the stack. The recursive calls of a method will be stored on a stack and manipulated in a similar manner.</p></li>
  <li><p>The problem of computing factorials is our first example of recursion. The factorial operation in mathematics is illustrated below.</p>
    <blockquote>
      <table width="350" border="0" cellspacing="0" cellpadding="4">
        <tr class="text">
          <td width="45%"><code>1! = 1</code></td>
          <td width="15%"><div align="center"></div></td>
          <td width="30%"><div align="center"></div></td>
        </tr>
        <tr class="text">
          <td width="45%"><code>2! = 2 * 1</code></td>
          <td width="15%"><div align="center">or</div></td>
          <td width="30%"><div align="center"><code>2 * 1!</code></div></td>
        </tr>
        <tr class="text">
          <td width="45%"><code>3! = 3 * 2 * 1</code></td>
          <td width="15%"><div align="center">or</div></td>
          <td width="30%"><div align="center"><code>3 * 2!</code></div></td>
        </tr>
        <tr class="text">
          <td width="45%"><code>4! = 4 * 3 * 2 *1</code></td>
          <td width="15%"><div align="center">or</div></td>
          <td width="30%"><div align="center"><code>4 * 3!</code></div></td>
        </tr>
      </table>
      </blockquote>
  <p>Notice that each successive line can be solved in terms of the previous line. For example, 4! is equivalent to</p>
  <blockquote>
    <p><code>4 * 3!</code></p>
    </blockquote>
  <p>A recursive method to solve the factorial problem is given below. Notice the recursive call in the last line of the method. The method calls another implementation of itself to solve a smaller version of the problem.</p>
  <blockquote>
    <p><code><strong>int</strong> fact(<strong>int</strong> n){<br>
      // returns the value of n!<br>
      // precondition: n &gt;= 1<br>
&#xA0;&#xA0;<strong>if</strong> (n == 1){<br>
&#xA0;&#xA0;&#xA0;&#xA0;<strong>return</strong> 1;<br>
&#xA0;&#xA0;}<strong>else{</strong><br>
&#xA0;&#xA0;&#xA0;&#xA0;<strong>return</strong> n * fact(n - 1);<br>
&#xA0;&#xA0;<strong>}</strong><br>
}</code></p>
  </blockquote>
  </li>
<li><p>The base case is a fundamental situation where no further problem solving is necessary. In the case of finding factorials, <code>1!</code> is by definition <code>1</code>. No further work is needed. Each recursive method must have at least one base case.</p>
        </li>
        <li><p>Suppose we call the method to solve <code>fact(4)</code>. This will result in four calls of method <code>fact</code>.</p>
        </li>
        <li><p>When a recursive call is made, the current computation is temporarily suspended and placed on the stack with all its current information available for later use.</p>
        </li>
        <li><p>A completely new copy of the method is used to evaluate the recursive call. When that is completed, the value returned by the recursive call is used to complete the suspended computation. The suspended computation is removed from the stack and its work now proceeds.</p>
        </li>
  <li><p>When the base case is encountered, the recursion will now unwind and result in a final answer. The expressions below should be read from right to left.</p>
    <p><img src="http://iws.punahou.edu/user/DKiang/apcs/LessonA9/images/Fig_9_1a.gif" width="479" height="58"></p>
  <p>Figure 9.1 below diagrams what happens:</p>
  <p align="center"><img src="http://iws.punahou.edu/user/DKiang/apcs/LessonA9/images/Fig_9_1.gif" width="315" height="389"><br>
    Figure 9.1 - Recursive Boxes </p>
  <p>Each box represents a call of method fact. To solve fact(4) requires four calls of method fact.</p>
  </li>
<li><p>Notice that when the recursive calls were made inside the <strong><code>else</code></strong> statement, the value fed to the recursive call was (<code>n-1</code>). This is where the problem is getting simpler with the eventual goal of solving <code>1!</code>.</p></li>
  </ol>
  <p>&#xA0;</p>
  <br><br>  
  <table cellspacing="0" cellpadding="0" border="0">
    <tr>
      <td width="90%"><span class="header">B. Pitfalls of Recursion</span></td>
      <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 4 of 8</nobr></font></td>
    </tr>
  </table>
  <br>
  <ol class="text">
    <li><p>If the recursion never reaches a base case, the recursive calls will continue until the computer runs out of memory and the program crashes. Experienced programmers try to examine the remains of a crash. The message &#x201C;stack overflow error&#x201D; or &#x201C;heap storage exhaustion&#x201D; indicates a possible runaway recursion.</p></li>
    </ol>
  <ol class="text" start="2">
      <li><p>When programming recursively, you need to make sure that the algorithm is moving toward a base case. Each successive call of the algorithm must be solving a version of the problem that is closer to a base case.</p></li>
      </ol>  <br><br>
<table cellspacing="0" cellpadding="0" border="0">
  <tr>
    <td width="90%"><span class="header">C. Recursion Practice</span></td>
    <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 5 of 8</nobr></font></td>
  </tr>
</table>
  <br>
<ol class="text">
    <li><p>To provide some practice, write a recursive power method that raises a base to some exponent, <code>n</code>. Use integers to keep things simple.</p>
      <blockquote>
        <p><code><strong>double</strong> power(<strong>int</strong> base, <strong>int</strong> n){<br>
          // Recursively determines base raised to<br>
          // the nth power. Assumes 0 &lt;= n &lt;= 10.</code></p>
        <p>&#xA0;</p>
        <p>&#xA0;</p>
        <p>&#xA0;</p>
        <p><code>}</code></p>
      </blockquote>
    </li>
</ol>  <p>&#xA0;</p><br>  
  <br>
  <table cellspacing="0" cellpadding="0" border="0">
    <tr>
      <td width="90%"><span class="header">Summary/Review</span></td>
      <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 6 of 8</nobr></font></td>
    </tr>
  </table>
  <br>
  <p class="text">Recursion takes some time and practice to get used to. Eventually, you want to be able to think recursively without the aid of props and handouts. Study the examples provided in these notes and work it through for yourself. Recursion is a very powerful programming tool for solving difficult problems.</p>
  <br><br><br><h2>Chapter 10</h2><br>  
  <br>
  <table cellspacing="0" cellpadding="0" border="0">
    <tr>
      <td width="90%"><span class="header">A10 Introduction</span></td>
      <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 1 of 17</nobr></font></td>
    </tr>
  </table>
  <br>
  <p class="text">Strings are needed in many programming tasks. Much of the information that identifies a person must be stored as a string: name, address, city, social security number, etc. This lesson covers the specifications of the String class and how to use it to solve string-processing problems.</p>
  <p class="text">The key topics for this lesson are:</p>
  <ol type="A" class="text">
    <li class="text"><a href="A10-A.html">The String Class</a></li>
    <li class="text"><a href="A10-B.html">String Constructors</a></li>
  <li class="text"><a href="A10-C.html">Object References</a></li>
  <li class="text"><a href="A10-D.html">The null Value</a></li>
  <li class="text"><a href="A10-E.html">String Query Methods</a></li>
  <li class="text"><a href="A10-F.html">String Translation Methods</a></li>
  <li class="text"><a href="A10-G.html">Immutability of Strings</a></li>
  <li class="text"><a href="A10-H.html">Comparing Strings</a></li>
  <li class="text"><a href="A10-I.html">Strings and Characters</a></li>
  <li class="text"><a href="A10-J.html">The toString Method</a></li>
  <li class="text"><a href="A10-K.html">String I/O</a></li>
  </ol><br>  
  <br>
  <table cellspacing="0" cellpadding="0" border="0">
    <tr>
      <td width="90%"><span class="header"><a href="../vocabulary/index_A.html#A10">A10 Vocabulary</a></span></td>
      <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 2 of 17</nobr></font></td>
    </tr>
  </table>
  <br>
  <table width="500" border="0">
    <tr class="text">
      <td width="50%"><code>charAt</code></td>
      <td width="50%"><code>compareTo</code></td>
    </tr>
    <tr class="text">
      <td width="50%">CONCATENATION</td>
      <td width="50%"><code>equals</code></td>
    </tr>
    <tr class="text">
      <td width="50%">GARBAGE</td>
      <td width="50%">GARBAGE COLLECTION</td>
    </tr>
    <tr class="text">
      <td width="50%">IMMUTABLE</td>
      <td width="50%"><code>length</code></td>
    </tr>
    <tr class="text">
      <td width="50%"><code>nextLine</code></td>
      <td width="50%"><code>next</code></td>
    </tr>
    <tr class="text">
      <td width="50%">STRING CLASS</td>
      <td width="50%"><code>null</code></td>
    </tr>
    <tr class="text">
      <td width="50%"><code>substring</code></td>
      <td width="50%">STRING LITERAL</td>
    </tr>
    <tr class="text">
      <td><code>toString</code></td>
      <td><code>toLowerCase</code></td>
    </tr>
    <tr class="text">
      <td><code>trim</code></td>
      <td><code>toUpperCase</code></td>
    </tr>
    <tr class="text">
      <td>&#xA0;</td>
      <td>&#xA0;</td>
    </tr>
  </table>
  <br>
  <br>  
  <br>
  <table cellspacing="0" cellpadding="0" border="0">
    <tr>
      <td width="90%"><span class="header">A. The String Class</span></td>
      <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 3 of 17</nobr></font></td>
    </tr>
  </table>
  <br>
  <ol class="text">
    <li><p>Groups of characters in Java are not represented by primitive types as are <strong><code>int</code></strong> or <strong><code>char</code></strong> types. Strings are objects of the <code>String</code> class. The <code>String</code> class is defined in <code>java.lang.String</code>, which is automatically imported for use in every program you write. We&#x2019;ve used String literals, such as <code>&quot;Enter a value&quot;</code> with <code>System.out.print</code> statements in earlier examples. Now we can begin to explore the <code>String</code> class and the capabilities that it offers.</p></li>
  <li>So far, our experience with Strings has been with String literals, consisting of any sequence of characters enclosed within double quotation marks. For example:
    <p><code>&quot;This is a string&quot;<br>
&quot;Hello World!&quot;<br>
&quot;\tHello World!\n&quot;</code></p>
  <p>The characters that a <code>String</code> object contains can include escape sequences. This example contains a tab (<code>\t</code>) and a linefeed (<code>\n</code>) character.</p>
  </li>
<li>
  <p>A second unique characteristic of the <code>String</code> class is that it supports the &quot;<code>+</code>&quot; operator to concatenate two <code>String</code> expressions. For example:</p>
          <p><code>sentence = &quot;I &quot; + &quot;want &quot; + &quot;to be a &quot; + &quot;Java programmer.&quot;;</code></p>
        <p>The &quot;+&quot; operator can be used to combine a String expression with any other expression of primitive type. When this occurs, the primitive expression is converted to a String representation and concatenated with the string. For example, consider the following instruction sequence:</p>
        <p><code>PI = 3.14159;<br>
  System.out.println(&quot;The value of PI is &quot; + PI);</code></p>
<p>Run Output:</p>
        <p><code>The value of PI is 3.14159</code></p>
<p>To invoke the concatenation, at least one of the items must be a String.</p>
</li>
</ol>
  <p>&#xA0;</p>
  <br>  
  <br>
  <table cellspacing="0" cellpadding="0" border="0">
    <tr>
      <td width="90%"><span class="header">B. String Constructors</span></td>
      <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 4 of 17</nobr></font></td>
    </tr>
  </table>
  <br>
  <ol class="text">
    <li>Because Strings are objects, you can create a <code>String</code> object by using the keyword <strong><code>new</code></strong> and a <code>String</code> constructor method, just as you would create any other object.
      <p><code>String name = new String();<br>
        String name2 = new String(&#x201C;Nancy&#x201D;);</code></p>
    </li>
<li>Though they are not primitive types, strings are so important and frequently used that Java provides additional syntax for declaration:
          <p><code>String aGreeting = &quot;Hello world&quot;;</code></p>
        <p>A <code>String</code> created in this short-cut way is called a <em>String literal</em>. Only <code>Strings</code> have a shortcut like this. All other objects are constructed by using the <strong><code>new</code></strong> operator.</p>
    <p>Many new Java programmers get confused because of this shortcut and believe that <code>Strings</code> are primitive data types. However, <code>Strings</code> are objects and therefore have behaviors and attributes.</p>
</li>
    </ol>
  <p>&#xA0;</p>
  <br>  
  <br>
  <table cellspacing="0" cellpadding="0" border="0">
    <tr>
      <td width="90%"><span class="header">C. Object References</span></td>
      <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 5 of 17</nobr></font></td>
    </tr>
  </table>
  <br>
  <ol class="text">
    <li>
      <p>Recall from Lesson A2 that an object is constructed as an instance of a particular class. The object is most often referenced using an identifier. The identifier is a variable that stores the reference to the object. This identifier is called an object reference. Now that we are working with a simple class, <code>String</code>, it is a good time to discuss object references. </p>
    </li>
<li>
  <p>Whenever the new operator is used, a new object is created. Each time an object is created, there is a reference to where it is stored in memory. The reference can be saved in a variable. The reference is used to find the object.</p>
</li>
    <li>      It is possible to store a new object reference in a variable. For example:
      <blockquote>
        <p><code>String str;<br>
            <br>
            str = new String(&quot;first string&quot;);<br>
          System.out.println(str);</code></p>
      <p><code>str = new String(&quot;second string&quot;);<br>
          System.out.println(str);</code></p>
        <p><em>Run Output:</em></p>
        <p><code>first string<br>
          second string</code></p>
      </blockquote>
    <p>In the example above, the variable <code>str</code> is used to store a reference to the <code>String</code>, &#x201C;first string&#x201D;. In the second part of the example a reference to the <code>String</code>, &#x201C;second string&#x201D; is stored in the variable <code>str</code>. If another reference is saved in the variable, it <em>replaces</em> the previous reference (see diagram below).</p>
    <p align="center"><img src="http://iws.punahou.edu/user/DKiang/apcs/LessonA10/images/Fig_10_1.gif" width="373" height="160"></p>
    </li>
<li>
        <p>If a reference to an object is no longer being used then there is no way to find it, and it becomes <em>&quot;garbage.&quot;</em> The word &quot;garbage&quot; is the correct term from computer science to use for objects that have no references. This is a common situation when new objects are created and old ones become unneeded during the execution of a program. While a program is running, a part of the Java system called the &quot;garbage collector&quot; reclaims each lost object (the &quot;garbage&quot;) so that the memory is available again. In the above example, the <code>String</code> object &#x201C;first string&#x201D; becomes garbage.</p>
</li>
    <li>    Multiple objects of the same class can be maintained by creating unique reference variables for each object.
          <blockquote>
            <blockquote>
              <p><code>String strA; // reference to the first object<br>
              String strB; // reference to the second object</code></p>
              <p><code>// create the first object and save its reference <br>
        strA = new String(&quot;first string&quot;); </code></p>
              <p><code>// print data referenced by the first object.<br>
              System.out.println(strA);</code></p>
              <p><code>// create the second object and save its reference<br>
        strB = new String(&quot;second string&quot;);</code></p>
              <p><code>// print data referenced by the second object.<br>
              System.out.println(strB);</code></p>
              <p><code>// print data referenced by the first object.<br>
              System.out.println(strA);</code> </p>
            </blockquote>
            <p>Run Output:</p>
            <p><code>first string<br>
              second string<br>
            first string</code></p>
          </blockquote>
        <p>This program has two reference variables, <code>strA</code> and <code>strB</code>. It creates two objects and places each reference in one of the variables. Since each object has its own reference variable, no reference is lost, and no object becomes garbage (until the program has finished running).</p>
    <p align="center"><img src="http://iws.punahou.edu/user/DKiang/apcs/LessonA10/images/Fig_10_2.gif" width="358" height="185"></p>
    </li>
<li>          Different reference variables that refer to the same object are called aliases. In effect, there are two names for the same object. For example:
  <blockquote>
      <blockquote>
        <p><code>String strA; // reference to the object<br>
          String strB; // another reference to the object</code></p>
        <p><code>// Create the only object and save its<br>
          // reference in strA<br>
          strA = new String(&quot;only one string&quot;);<br>
          System.out.println(strA); </code></p>
        <p><code>strB = strA; // copy the reference to strB. <br>
          System.out.println(strB);</code></p>
      </blockquote>
      <p>Run Output:</p>
    <p><code>only one string<br>
      only one string</code></p>
    </blockquote>
<p align="center"><code><img src="http://iws.punahou.edu/user/DKiang/apcs/LessonA10/images/Fig_10_3.gif" width="367" height="133"></code></p>
<blockquote>
  <p>When this program runs, only one object is created (by <strong><code>new</code></strong>). Information about how to find the object is put into <code>strA</code>. The assignment operator in the statement </p>
<p><code>strB = strA; // copy the reference to strB</code></p>
  <p>copies the information that is in <code>strA</code> to <code>strB</code>. It does not make a copy of the object.</p>
</blockquote>
</li>
</ol>
  <p>&#xA0;</p>
  <br>  
  <br>
  <table cellspacing="0" cellpadding="0" border="0">
    <tr>
      <td width="90%"><span class="header">D. The null Value</span></td>
      <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 6 of 17</nobr></font></td>
    </tr>
  </table>
  <br>
  <ol class="text">
    <li>
      <p>In most programs, objects are created and objects are destroyed, depending on the data and on what is being computed. A reference variable sometimes does and sometimes does not refer to an object. You may need a way to erase the reference inside a variable without creating a new reference. You do this by assigning <strong><code>null</code></strong> to the variable.</p>
    </li>
<li> The value null is a special value that means &quot;no object.&quot; A reference variable is set to null when it is not referring to any object.
  <blockquote>
    <p><code>String a = &#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;// 1. an object is created; <br>
  &#xA0;&#xA0;&#xA0;<strong>new</strong> String(&quot;stringy&quot;); // variable a refers to it<br>
String b = <strong>null</strong>; &#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;// 2. variable b refers to no<br>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;// object.<br>
String c = &#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;// 3. an object is created <br>
&#xA0;&#xA0;&#xA0;<strong>new</strong> String(&quot;&quot;); &#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;// (containing no characters)<br>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;// variable c refers to it<br>
<strong>if</strong> (a != <strong>null</strong>) &#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;// 4. statement true, so <br>
System.out.println(a); &#xA0;&#xA0;&#xA0;// the println(a) executes.<br>
<br>
<strong>if</strong> (b != <strong>null</strong>) &#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;// 5. statement false, so the<br>
System.out.println(b); &#xA0;&#xA0;&#xA0;// println(b) is skipped.</code></p>
  <p><code><strong>if</strong> (c != <strong>null</strong>) &#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;// 6. statement true, so the<br>
  System.out.println(c); &#xA0;&#xA0;&#xA0;// println(c) executes (but<br>
  &#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;// it has no characters to <br>
  &#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;// print).</code></p>
  <p><em>Run Output:</em></p>
  <p><code>stringy</code></p>
  </blockquote>
</li>
<li>Variables <code>a</code> and <code>c</code> are initialized to object references. Variable <code>b</code> is initialized to <strong><code>null</code></strong>. Note that variable <code>c</code> is initialized to a <em>reference</em> to a String object containing no characters. Therefore <code>println(c)</code> executes, but it has no characters to print. Having no characters is different from the value being <strong><code>null</code></strong>.  </li>
      </ol>
  <p>&#xA0;</p>
  <br>  
  <br>
  <table cellspacing="0" cellpadding="0" border="0">
    <tr>
      <td width="90%"><span class="header">E. String Query Methods</span></td>
      <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 7 of 17</nobr></font></td>
    </tr>
  </table>
  <br>
  <blockquote>
    <table width="95%" border="0" cellspacing="0" cellpadding="0">
      <tr>
        <td bgcolor="#000000"><table width="100%" border="0" cellspacing="1" cellpadding="4">
          <tr bgcolor="#FFFFFF" class="text">
            <td><div align="center"><strong>Query Method</strong></div></td>
            <td><div align="center"><strong>Sample Syntax</strong></div></td>
          </tr>
          <tr bgcolor="#FFFFFF" class="text">
            <td><code><strong>int</strong> length();</code></td>
            <td><code>String str1 = &quot;Hello!&quot;;<br>
                <strong>int</strong> len = str1.length(); // len == 6</code></td>
          </tr>
          <tr bgcolor="#FFFFFF" class="text">
            <td><code><strong>char</strong> charAt(<strong>int</strong> index);</code></td>
            <td><code>String str1 = &quot;Hello!&quot;;<br>
                <strong>char</strong> ch = str1.charAt(0); // ch == &apos;H&apos;</code></td>
          </tr>
          <tr bgcolor="#FFFFFF" class="text">
            <td><code><strong>int</strong> indexOf(String str);</code></td>
            <td><code>String str2 = &quot;Hi World!&quot;;<br>
                <strong>int</strong> n = str2.indexOf(&quot;World&quot;); // n == 3<br>
                <strong>int</strong> n = str2.indexOf(&quot;Sun&quot;); // n == -1</code></td>
          </tr>
          <tr bgcolor="#FFFFFF" class="text">
            <td><code><strong>int</strong> indexOf(<strong>char</strong> ch);</code></td>
            <td><code>String str2 = &quot;Hi World!&quot;;<br>
                <strong>int</strong> n = str2.indexOf(&apos;!&apos;); // n == 8<br>
                <strong>int</strong> n = str2.indexOf(&apos;T&apos;); // n == -1</code></td>
          </tr>
        </table></td>
      </tr>
    </table>
  </blockquote>  <ol class="text"><li><p>The <code><strong>int</strong> length()</code> method returns the number of characters in the <code>String</code> object.</p>
      </li>
      <li> The <code>charAt</code> method is a tool for extracting a character from within a <code>String</code>. The <code>charAt</code> parameter specifies the position of the desired character (0 for the leftmost character, 1 for the second from the left, etc.). For example, executing the following two instructions prints the char value &apos;X&apos;.
        <blockquote>
        <p><code>String stringVar = &quot;VWXYZ&quot;<br>
          System.out.println(stringVar.charAt(2));</code></p>
      </blockquote>
</li>
      <li>
        <p>The <code><strong>int</strong> indexOf(String str)</code> method will find the first occurrence of <code>str</code> within this <code>String</code> and return the index of the first character. If <code>str</code> does not occur in this <code>String</code>, the method returns -1.</p>
      </li>
  <li>The <code><strong>int</strong> indexOf(<strong>char</strong> ch)</code> method is identical in function and output to the other <code>indexOf</code> function except it is looking for a single character.</li>
  </ol>  <p>&#xA0;</p>
  <br>  
  <br>
  <table cellspacing="0" cellpadding="0" border="0">
    <tr>
      <td width="90%"><span class="header">F. String Translation Methods</span></td>
      <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 8 of 17</nobr></font></td>
    </tr>
  </table>
  <br>
  <blockquote>
    <table width="95%" border="0" cellspacing="0" cellpadding="0">
      <tr>
        <td bgcolor="#000000"><table width="100%" border="0" cellspacing="1" cellpadding="4">
          <tr bgcolor="#FFFFFF" class="text">
            <td width="50%"><div align="center"><strong>Translate Method</strong></div></td>
            <td width="50%"><div align="center"><strong>Sample Syntax</strong></div></td>
          </tr>
          <tr bgcolor="#FFFFFF" class="text">
            <td width="50%" valign="top"><code>String toLowerCase();</code></td>
            <td width="50%"><code>String greeting = &quot;Hi World!&quot;;<br>
              greeting = greeting.toLowerCase();<br>
              // greeting &lt;- &quot;hi world!&quot;</code></td>
          </tr>
          <tr bgcolor="#FFFFFF" class="text">
            <td width="50%" valign="top"><code>String toUpperCase();</code></td>
            <td width="50%"><code>String greeting = &quot;Hi World!&quot;;<br>
              greeting = greeting.toUpperCase();<br>
              // greeting &lt;- &quot;HI WORLD!&quot;</code></td>
          </tr>
          <tr bgcolor="#FFFFFF" class="text">
            <td width="50%" valign="top"><code>String trim();</code></td>
            <td width="50%"><code>String needsTrim = &quot; trim me! &quot;;<br>
              needsTrim = needsTrim.trim();<br>
              // needsTrim &lt;- &quot;trim me!&quot;</code></td>
          </tr>
          <tr bgcolor="#FFFFFF" class="text">
            <td width="50%" valign="top"><code>String substring(<strong>int</strong> beginIndex)</code></td>
            <td width="50%"><code>String sample = &quot;hamburger&quot;;<br>
              sample = sample.substring(3);<br>
              // sample &lt;- &quot;burger&quot;</code></td>
          </tr>
          <tr bgcolor="#FFFFFF" class="text">
            <td width="50%" valign="top"><code>String substring(<strong>int</strong> beginIndex, <strong>int</strong> endIndex)</code></td>
            <td width="50%"><code>String sample = &quot;hamburger&quot;;<br>
              sample = sample.substring(4, 8);<br>
              // sample &lt;- &quot;urge&quot;</code></td>
          </tr>
        </table></td>
      </tr>
    </table>
  </blockquote>  <ol class="text"><li><p><code>toLowerCase()</code> returns a <code>String</code> with the same characters as the <code>String</code> object, but with all characters converted to lowercase. Notice that in all of the above samples, the <code>String</code> object is placed on the left hand side of the assignment statement. This is necessary because <code>Strings</code> in Java are immutable. Please see section G for a full explanation of immutable.</p>
      </li>
      <li>
        <p> <code>toUpperCase()</code> returns a <code>String</code> with the same characters as the <code>String</code> object, but with all characters converted to uppercase.</p>
      </li>
      <li>
        <p><code>trim()</code> returns a <code>String</code> with the same characters as the <code>String</code> object, but with the leading and trailing whitespace removed.</p>
      </li>
        <li>
          <p><code>substring(<strong>int</strong> beginIndex)</code> returns the substring of the <code>String</code> object starting from <code>beginIndex</code> through to the end of the <code>String</code> object.</p>
        </li>
  <li><code>substring(<strong>int</strong> beginIndex, <strong>int</strong> endIndex)</code> returns the substring of the <code>String</code> object starting from <code>beginIndex</code> through, but not including, position endIndex of the <code>String</code> object. That is, the new <code>String</code> contains characters numbered <code>beginIndex</code> to <code>endIndex-1</code> in the original <code>String</code>.</li>
  </ol>  <p>&#xA0;</p>
  <br>  
  <br>
  <table cellspacing="0" cellpadding="0" border="0">
    <tr>
      <td width="90%"><span class="header">G. Immutability of Strings</span></td>
      <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 9 of 17</nobr></font></td>
    </tr>
  </table>
  <br>
  <blockquote>
    <p class="text">Immutability of <code>Strings</code> means you cannot modify any <code>String</code> object. </p>
    <p class="text">Notice the above example for the method <code>toLowerCase</code>. This method returns a new <code>String</code>, which is the lower case version of the object that invoked the method.</p>
    <p class="text"><code>String greeting = &quot;Hi World!&quot;;<br>
        greeting.toLowerCase();<br>
        System.out.println(greeting);</code></p>
    <p class="text"><em>Run Output:</em></p>
    <p class="text"><code>Hi World!</code></p>
    <p class="text">The object greeting did not change. To change the value of greeting, you need to assign the return value of the method to the object greeting.</p>
    <p class="text"><code>greeting = greeting.toLowerCase();<br>
        System.out.println(greeting);</code></p>
    <p class="text"><em>Run Output:</em></p>
    <p class="text"><code>hi world!</code></p>
  </blockquote>  <p>&#xA0;</p>
  <br>  
  <br>
  <table cellspacing="0" cellpadding="0" border="0">
    <tr>
      <td width="90%"><span class="header">H. Comparing Strings</span></td>
      <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 10 of 17</nobr></font></td>
    </tr>
  </table>
  <br>
  <ol class="text"><li><p>The following methods should be used when comparing String objects:</p>
    <table width="95%" border="0" cellspacing="0" cellpadding="0">
      <tr>
        <td bgcolor="#000000"><table width="100%" border="0" cellspacing="1" cellpadding="4">
          <tr bgcolor="#FFFFFF" class="text">
            <td width="50%"><div align="center"><strong>Comparison Method</strong></div></td>
            <td width="50%"><div align="center"><strong>Sample Syntax</strong></div></td>
          </tr>
          <tr bgcolor="#FFFFFF" class="text">
            <td width="50%" valign="top"><code><strong>boolean</strong> equals(String anotherString);</code></td>
            <td width="50%"><code>String aName = &quot;Mat&quot;;<br>
  String anotherName = &quot;Mat&quot;;<br>
              <strong>if</strong> (aName.equals(anotherName))<br>
              &#xA0;&#xA0;&#xA0;System.out.println(&quot;the same&quot;);</code></td>
          </tr>
          <tr bgcolor="#FFFFFF" class="text">
            <td width="50%" valign="top"><code><strong>boolean</strong> equalsIgnoreCase(String anotherString);</code></td>
            <td width="50%"><code>String aName = &quot;Mat&quot;;<br>
                <strong>if</strong> (aName.equalsIgnoreCase(&quot;MAT&quot;))<br>
  &#xA0;&#xA0;&#xA0;System.out.println(&quot;the same&quot;);</code></td>
          </tr>
          <tr bgcolor="#FFFFFF" class="text">
            <td width="50%" valign="top"><code><strong>int</strong> compareTo(String anotherString) </code></td>
            <td width="50%"><code>String aName = &quot;Mat&quot;<br>
  n = aName.compareTo(&quot;Rob&quot;); // n &lt; 0<br>
  n = aName.compareTo(&quot;Mat&quot;); // n == 0<br>
  n = aName.compareTo(&quot;Amy&quot;); // n &gt; 0</code></td>
          </tr>
        </table></td>
      </tr>
    </table><br>
      </li>
      <li><p>The <code>equals()</code> method evaluates the contents of two <code>String</code> objects to determine if they are equivalent. The method returns true if the objects have identical contents. For example, the code below shows two <code>String</code> objects and several comparisons. Each of the comparisons evaluate to <strong><code>true</code></strong>; each comparison results in printing the line <code>&quot;Name&apos;s the same&quot;</code>.</p>
        <p><code>String aName = &quot;Mat&quot;;<br>
  String anotherName = new String(&quot;Mat&quot;);</code></p>
      <p><code><strong>if</strong> (aName.equals(anotherName))<br>
  &#xA0;&#xA0;&#xA0;System.out.println(&quot;Name&apos;s the same&quot;);</code></p>
        <p><code><strong>if</strong> (anotherName.equals(aName))<br>
  &#xA0;&#xA0;&#xA0;System.out.println(&quot;Name&apos;s the same&quot;);</code></p>
        <p><code><strong>if</strong> (aName.equals(&quot;Mat&quot;))<br>
  &#xA0;&#xA0;&#xA0;System.out.println(&quot;Name&apos;s the same&quot;);</code></p>
      <p>Each <code>String</code> shown above, <code>aName</code> and <code>anotherName</code>, is an object of type <code>String</code>, so each <code>String</code> has access to the <code>equals()</code> method. The <code>aName</code> object can call <code>equals()</code> with <code>aName.equals(anotherName)</code>, or the <code>anotherName</code> object can call <code>equals()</code> with <code>anotherName.equals(aName)</code>. The <code>equals()</code> method can take either a variable <code>String</code> object or a literal <code>String</code> as its argument.</p>
      <p>In all three examples above, the boolean expression evaluates to <code>true</code>.</p>
      </li>
<li><p>The == operator can create some confusion when comparing objects. The == operator will check the reference value, or address, of where the object is being stored. It will not compare the data members of the objects. Because <code>Strings</code> are objects and not primitive data types, <code>Strings</code> cannot be compared with the == operator. However, due to the shortcuts that make String act in a similar way to primitive types, two <code>Strings</code> created without the <code>new</code> operator but with the same <code>String</code> literal will actually point to the same address in memory. Observe the following code segment and its output:</p>
  <p><code>String aGreeting1 = <strong>new</strong> String(&quot;Hello&quot;);<br>
  String anotherGreeting1 = <strong>new</strong> String(&quot;Hello&quot;);<br>
    <br>
    <strong>if</strong> (aGreeting1 == anotherGreeting1)<br>
    &#xA0;&#xA0;&#xA0;System.out.println(&quot;This better not work!&quot;);<br>
    <strong>else</strong><br>
  &#xA0;&#xA0;&#xA0;System.out.println(&quot;This prints since each object &quot; +<br>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&quot;reference is different.&quot;);<br>
  <br>
  String aGreeting2 = &quot;Hello&quot;;<br>
  String anotherGreeting2 = &quot;Hello&quot;;</code></p>
  <p> <code><br>
      <strong>if</strong> (aGreeting2 == anotherGreeting2)<br>
    &#xA0;&#xA0;&#xA0;System.out.println(&quot;This prints since both &quot; + <br>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&quot;object references are the same!&quot;);<br>
  <strong>else</strong><br>
  &#xA0;&#xA0;&#xA0;System.out.println(&quot;This does not print.&quot;);</code></p>
  <p><em>Run Output:</em></p>
  <p><code>This prints since each object reference is different.<br>
    This prints since both object references are the same!</code></p>
  <p>The objects <code>aGreeting1</code> and <code>anotherGreeting1</code> are each instantiated using the <strong><code>new</code></strong> command, which assigns a different reference to each object. The == operator compares the reference to each object, not their contents. Therefore the comparison <code>(aGreeting1 == anotherGreeting1)</code> returns <strong><code>false</code></strong> since the references are different. </p>
  <p>The objects <code>aGreeting2</code> and <code>anotherGreeting2</code> are <code>String</code> literals (created without the <strong><code>new</code></strong> command - i.e. using the short-cut instantiation process unique to Strings). In this case, Java recognizes that the contents of the objects are the same and it creates only one instance, with <code>aGreeting2</code> and <code>anotherGreeting2</code> each referencing that instance. Since their references are the same, <code>(aGreeting2 == anotherGreeting2)</code> returns <strong><code>true</code></strong>. </p>
</li>
  <li>
    <p>When comparing objects to see if they are equal, always use the <code>equals</code> method. It would be a rare occasion to care if they are occupying the same memory location. Remember that a <code>String</code> is an object!</p>
  </li>
  <li>
    <p>The <code>equalsIgnoreCase()</code> method is very similar to the <code>equals()</code> method. As its name implies, it ignores case when determining if two <code>Strings</code> are equivalent. This method is very useful when users type responses to prompts in your program. The <code>equalsIgnoreCase()</code> method allows you to test entered data without regard to capitalization.</p>
  </li>
  <li class="text">    The <code>compareTo()</code> method compares the calling <code>String</code> object and the <code>String</code> argument to see which comes first in the lexicographic ordering. Lexicographic ordering is the same as alphabetical ordering when both strings are either all uppercase or all lowercase. If the calling string is first lexicographically, it returns a negative value. If the two strings are equal, it returns zero. If the argument string comes first lexicographically, it returns a positive number.
    <blockquote>
      <p><code>String bob = &#x201C;Bob&#x201D;;<br>
        String bob2 = &#x201C;bob&#x201D;;<br>
        String steve = &#x201C;Steve&#x201D;;<br>
        System.out.println(bob.compareTo(bob2));<br>
        System.out.println(bob2.compareTo(bob));<br>
        System.out.println(steve.compareTo(bob2));<br>
        System.out.println(bob.compareTo(steve));</code></p>
    </blockquote>
  <p>The output for this block of code would be:</p>
  <blockquote>
    <p>              <code>-32<br>
              32<br>
              -15<br>
              -17</code></p>
  </blockquote>
  </li>
  </ol>  <p>&#xA0;</p>
  <br>  
  <br>
  <table cellspacing="0" cellpadding="0" border="0">
    <tr>
      <td width="90%"><span class="header">I. Strings and Characters</span></td>
      <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 11 of 17</nobr></font></td>
    </tr>
  </table>
  <br>
  <ol class="text">
    <li>
      <p>It is natural to think of a <strong><code>char</code></strong> as a <code>String</code> of length 1. Unfortunately, in Java the <strong><code>char</code></strong> and <code>String</code> types are incompatible since a <code>String</code> is an object and a <strong><code>char</code></strong> is a primitive type. This means that you cannot use a <code>String</code> in place of a <code>char</code> or use a <code>char</code> in place of a <code>String</code>.</p>
    </li>
<li><p>Extracting a <strong><code>char</code></strong> from within a <code>String</code> can be accomplished using the <code>charAt</code> method as previously described.</p>
</li>
    <li> Conversion from <strong><code>char</code></strong> to <code>String</code> can be accomplished by using the &quot;+&quot; (concatenation) operator described previously. Concatenating any <strong><code>char</code></strong> with an <em>empty string</em> (String of length zero) results in a string that consists of that <strong><code>char</code></strong>. The java notation for an empty string is two consecutive double quotation marks. For example, to convert myChar to a String it is added to &#x201C;&#x201D;.
      <blockquote>
        <p><code>char myChar = &#x2018;X&#x2019;;<br>
  String myString = &quot;&quot; + myChar;<br>
          System.out.println(myString);<br>
          char anotherChar = &#x2018;Y&#x2019;;<br>
          myString += anotherChar;<br>
          System.out.println(myString);</code></p>
      </blockquote>
    <p>The output of this block of code would be:</p>
      <blockquote>
        <p><code> X<br>
      XY</code></p>
        </blockquote>
    </li>
  </ol>
  <p>&#xA0;</p><br>  
  <br>
  <table cellspacing="0" cellpadding="0" border="0">
    <tr>
      <td width="90%"><span class="header">J. The toString method</span></td>
      <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 12 of 17</nobr></font></td>
    </tr>
  </table>
  <br>
  <ol class="text">
    <li>
      <p>Wouldn&#x2019;t it be nice to be able to output objects that you have made using the simple line System.out.print(Object name)? Let&#x2019;s consider the example of the RegularPolygon class discussed in Lesson A6. It would be nice to be able to print out the statistics of your RegularPolygon objects without having to do a lot of System.out.print statements. Thanks to the toString method, you have the ability to do this.</p>
    </li>
<li>You can create a toString method in any of your classes in the format of public String toString(). Within the toString() method, you can format your class variables into one String object and return that String. Then, when Java encounters your Object in a String format, it will call the toString() method. Let&#x2019;s look at an example using a RegularPolygon class.
  <p><code>public String toString(){<br>
String a = &#x201C;Sides: &#x201D; + getSides();<br>
a += &#x201C; Length: &#x201D; + getLength();<br>
a += &#x201C; Area: &#x201D; + getArea();<br>
return a;<br>
}</code></p>
<p><code>RegularPolygon square = new RegularPolygon(4, 10);<br>
    System.out.println(square);</code></p>
  <p><em>Run Output:</em></p>
  <p><code>Sides: 4 Length: 10 Area: 100</code></p>
</li>
<li> You must be careful when using this, because you are fixing the format of the output. Oftentimes, you will still want to format your output depending on the specific problem you are solving, but the <code>toString()</code> method provides a simple and quick way to look at the state of your objects. There are also many times when the <code>toString()</code> method will be very useful. Consider a Student class that contains member variables for first name, middle name, last name, a list of classes being taken, the student&#x2019;s address and phone number, etc. You could easily make a <code>toString()</code> method that would simply output the students first name, middle initial, and last name for quick reference.  Every time you design a class, you should stop and think about whether or not your class would benefit from having a <code>toString()</code> method and how you should format this <code>String</code>.
  <blockquote>&#xA0;</blockquote>
      </li>
  </ol>
  <br>  
  <br>
  <table cellspacing="0" cellpadding="0" border="0">
    <tr>
      <td width="90%"><span class="header">K. String I/O</span></td>
      <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 13 of 17</nobr></font></td>
    </tr>
  </table>
  <br>
  <ol class="text">
    <li>
      <p>The <code>Scanner</code> class has two methods for reading textual input from the keyboard.</p>
    </li>
<li>
  <p>The <code>next</code> method returns a reference to a <code>String</code> object that has from zero to many characters typed by the user at the keyboard. The <code>String</code> will end whenever it reaches white space. White space is defined as blank spaces, tabs, or newline characters in the input stream. When inputting from the keyboard, <code>next</code> stops adding text to the <code>String</code> object when the first white space is encountered from the input stream.</p>
</li>
<li>
  <p>A <code>nextLine</code> method returns a reference to a <code>String</code> object that contains from zero to many characters entered by the user. With <code>nextLine</code>, the <code>String</code> object may contain blank spaces and tabs but will end when it reaches a newline character. Therefore, <code>nextLine</code> will read in whole lines of input rather than only one word at a time.</p>
</li>
  <li>    String input is illustrated below.
    <p><code>Scanner keyboard = new Scanner(System.in);<br>
      String word1, word2, anotherLine;</code></p>
  <p><code>// prompt for input from the keyboard<br>
  System.out.print(&quot;Enter a line: &quot;);</code></p>
    <p><code>// grab the first &quot;word&quot;<br>
      word1 = keyboard.next();</code></p>
    <p><code>// grab the second &quot;word&quot;<br>
      word2 = keyboard.next();</code></p>
    <p><code>// prompt for input from the keyboard<br>
  System.out.print(&quot;Enter another line: &quot;);</code></p>
    <p><code>// discard any remaining input from previous line<br>
      // and read the next line of input<br>
      anotherLine = keyboard.nextLine(); //skip to the next line<br>
      anotherLine = keyboard.nextLine(); //grab all of the next line</code></p>
    <p><code>// output the strings<br>
  System.out.println(&quot;word1 = &quot; + word1);<br>
  System.out.println(&quot;word2 = &quot; + word2);<br>
  System.out.println(&quot;anotherLine = &quot; + anotherLine);</code></p>
    <p><em>Run Output:</em></p>
    <p><code>Enter a line: Hello World! This will be discarded.<br>
      Enter another line: This line includes whitespace.<br>
      word1 = Hello<br>
      word2 = World!<br>
      anotherLine = This line includes whitespace.</code></p>
  </li>
<li>  Formatting Strings is done with the same style as using the <code>printf()</code> method discussed in Lesson A7, Simple I/O. In fact, now that you know more about Strings, you should be able to recognize that you are really manipulating String literals when you use the <code>printf()</code> formatting rules. If you want to alter how a String object is stored without actually printing it to the String, you can simply use a Formatter object (which is actually the object that <code>printf()</code> uses itself). An example of how to use Formatter is shown below. Note: Don&#x2019;t forget to import the Formatter class.
  <blockquote>
    <p><code>import java.util.Formatter;</code></p>
  <p><code>Formatter f = new Formatter();<br>
  f.format(&quot;%10s&quot;,&quot;Bob&quot;);<br>
      String bob = f.toString();<br>
      System.out.println(bob.length());<br>
      System.out.println(bob);</code></p>
    <p><em>Run Output:</em></p>
    <p><code>10<br>
  &#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;Bob</code></p>
    </blockquote>
</li>
  </ol>  <p>&#xA0;</p><br>  
  <br>  <table cellspacing="0" cellpadding="0" border="0">
    <tr>
      <td width="90%"><span class="header">LAB ASSIGNMENT A10.3</span></td>
      <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 17 of 17</nobr></font></td>
    </tr>
  </table>
  <p class="subhead">RomanNumerals</p>
  <p><span class="subhead">Assignment:</span></p>
  
  <ol>
    <li class="text">
      <p>You will create a class with two <code>public static</code> methods. One will receive an <code>int</code> number and return a <code>String</code> with that <code>int</code> converted into Roman Numerals. The other method will receive a <code>String</code> of Roman Numerals and return the <code>int</code> value of the Roman Numerals.</p>
    </li>
    <li class="text">
      <p>These two methods are <code>static</code> because there is no reason to create an object just to run these calculations.</p>
    </li>
    <li class="text">
      <p>Think of using helper methods to reuse algorithms needed to solve these problems.</p>
    </li>
    <li class="text">
      <p>Assume that your client gives you valid Roman Numerals and the Arabic numbers are positive and less than 4000.</p>
    </li>
  </ol>  <p><span class="subhead">Instructions:</span></p>
  <blockquote>
    <p class="text">Roman Numerals work differently than our normal Arabic number system. Roman Numerals have symbols, all in capital letters (and sometimes in lower case), which represent Arabic numbers. Roman Numerals have been used for identifying movie sequels (i.e., <em>The Godfather: Part II</em>), for publication copyright dates, for numbering monarchs such as Queen Elizabeth II, and for numbering Super Bowls. See the following table for the Roman Numerals symbols up to 1000.</p>
    <table width="300" border="0" cellspacing="0" cellpadding="3">
      <tr class="text">
        <td><div align="center"><strong>Roman Numeral</strong></div></td>
        <td><div align="center"><strong>Arabic Number</strong></div></td>
      </tr>
      <tr class="text">
        <td><div align="center">I or i</div></td>
        <td><div align="center">1</div></td>
      </tr>
      <tr class="text">
        <td><div align="center">V</div></td>
        <td><div align="center">5</div></td>
      </tr>
      <tr class="text">
        <td><div align="center">X</div></td>
        <td><div align="center">10</div></td>
      </tr>
      <tr class="text">
        <td><div align="center">L</div></td>
        <td><div align="center">50</div></td>
      </tr>
      <tr class="text">
        <td><div align="center">C</div></td>
        <td><div align="center">100</div></td>
      </tr>
      <tr class="text">
        <td><div align="center">D</div></td>
        <td><div align="center">500</div></td>
      </tr>
      <tr class="text">
        <td><div align="center">M</div></td>
        <td><div align="center">1000</div></td>
      </tr>
    </table>
    <p class="text">Usually, numbers are formed by stringing the Roman numerals together and adding them up to make the required number (i.e., II = 2, or XII = 12). If smaller numbers follow larger numbers, the numbers are added (i.e., VIII = 5 + 3 or 8), but if a smaller number precedes a larger number, the smaller number is subtracted from the larger number (i.e., IX = 10 - 1 or 9). </p>
  <p class="text">There is shorthand for the case when there are four of the same symbols in a row. Instead of IIII for 4, it is written as IV or 5 - 1 = 4. This only applies to symbols that represent powers of ten. Since our numbers will be less than 4000, this only makes sense for I, X and C. Some people think this means you can write IC for 99 but that is not going to be allowed. When using this shortcut, a symbol can only precede a symbol whose value is 5 or 10 times its own value. For example, X (10) can only precede L (50) or C (100). So XL (40) is acceptable, but XD (490?) is not.</p>
  <table width="300" border="0" cellspacing="0" cellpadding="3">
    <tr class="text">
      <td><div align="center"><strong>Roman Numeral</strong></div></td>
      <td><div align="center"><strong>Arabic Number</strong></div></td>
    </tr>
    <tr class="text">
      <td><div align="center">XLVI</div></td>
      <td><div align="center">46</div></td>
    </tr>
    <tr class="text">
      <td><div align="center">XCIX</div></td>
      <td><div align="center">99</div></td>
    </tr>
    <tr class="text">
      <td><div align="center">MDCCCXIX</div></td>
      <td><div align="center">1819</div></td>
    </tr>
    <tr class="text">
      <td><div align="center">DCXLIX</div></td>
      <td><div align="center">649</div></td>
    </tr>
    <tr class="text">
      <td><div align="center">MCMLXXXIII</div></td>
      <td><div align="center">1983</div></td>
    </tr>
  </table>
  <p class="text">&#xA0;</p>
  </blockquote>
  <br>  
  <br>
  <table cellspacing="0" cellpadding="0" border="0">
    <tr>
      <td width="90%"><span class="header">Summary/Review</span></td>
      <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 14 of 17</nobr></font></td>
    </tr>
  </table>
  <br>
  <p class="text">Recursion takes some time and practice to get used to. Eventually, you want to be able to think recursively without the aid of props and handouts. Study the examples provided in these notes and work it through for yourself. Recursion is a very powerful programming tool for solving difficult problems.</p>
  <br><br><br><h2>Chapter 11</h2><br>  
  <br>
  <table cellspacing="0" cellpadding="0" border="0">
    <tr>
      <td width="90%"><span class="header">A11 Introduction</span></td>
      <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 1 of 10</nobr></font></td>
    </tr>
  </table>
  <br>
  <p class="text">Inheritance, a major component of OOP, is a technique that will allow you to define a very general class and then later define more specialized classes based upon it. You will do this by adding some new capabilities to the existing class definitions or changing the way the existing methods work. Inheritance saves work because the more specialized class inherits all the properties of the general class and you, the programmer, only need to program the new features.</p>
  <p class="text">The key topics for this lesson are:</p>
  <ol type="A" class="text">
    <li class="text"><a href="A11-A.html">Single Inheritance</a></li>
    <li class="text"><a href="A11-B.html">Class Hierarchies</a></li>
  <li class="text"><a href="A11-C.html">Using Inheritance</a></li>
  <li class="text"><a href="A11-D.html">Method Overriding</a></li>
  <li class="text"><a href="A11-E.html">Interfaces</a></li>
  </ol><br>  
  <br>
  <table cellspacing="0" cellpadding="0" border="0">
    <tr>
      <td width="90%"><span class="header"><a href="../vocabulary/index_A.html#A11">A11 Vocabulary</a></span></td>
      <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 2 of 10</nobr></font></td>
    </tr>
  </table>
  <br>
  <table width="500" border="0">
    <tr class="text">
      <td>BASE CLASS</td>
      <td>CHILD CLASS</td>
    </tr>
    <tr class="text">
      <td>DERIVED CLASS</td>
      <td><code>extends</code></td>
    </tr>
    <tr class="text">
      <td><code>implements</code></td>
      <td><code>interface</code></td>
    </tr>
    <tr class="text">
      <td>METHOD OVERRIDING</td>
      <td>PARENT CLASS</td>
    </tr>
    <tr class="text">
      <td>SUBCLASS</td>
      <td><code>super</code></td>
    </tr>
    <tr class="text">
      <td>SUPERCLASS</td>
      <td>&#xA0;</td>
    </tr>
    <tr>
      <td>&#xA0;</td>
      <td>&#xA0;</td>
    </tr>
  </table>
  <br>
  <br>  
  <br>
  <table cellspacing="0" cellpadding="0" border="0">
    <tr>
      <td width="90%"><span class="header">A. Single Inheritance</span></td>
      <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 3 of 10</nobr></font></td>
    </tr>
  </table>
  <br>
  <ol class="text">
    <li>
      <p><em>Inheritance</em> enables you to define a new class based on a class that already exists. The new class will inherit the characteristics of the existing class, but may also provide some additional capabilities. This makes programming easier, because you can reuse and extend your previous work and avoid duplication of code.</p>
    </li>
  <li><p>The class that is used as a basis for defining a new class is called a <em>superclass</em> (or <em>parent class</em> or <em>base class</em>). The new class based on the superclass is called a <em>subclass</em> (or <em>child class</em> or <em>derived class</em>.)</p></li>
  <li><p>The process by which a subclass inherits characteristics from just one parent class is called single inheritance. Some languages allow a derived class to inherit from more than one parent class in a process called multiple inheritance. Multiple inheritance makes it difficult to determine which class will contribute what characteristics to the child class. Java avoids these issues by only providing support for single inheritance.</p></li>
        <li> Figure 11.1 shows a superclass and a subclass. The line between them shows the &quot;is a&quot; relationship. The picture can be read as &quot;a <code>Student</code> is a <code>Person</code>.&quot; The clouds represent the classes. That is, the picture does not show any particular <code>Student</code> or any particular <code>Person</code>, but shows that the class <code>Student</code> is a subclass of the <code>Person</code> class.
          <p align="center"><img src="http://iws.punahou.edu/user/DKiang/apcs/LessonA11/images/Fig_11_1.gif" width="241" height="199"><br>
            Figure 11.1 - Subclass and Superclass</p>
        </li>
<li>  Inheritance is between classes, not between objects. A superclass is a blueprint that is followed when a new object is constructed. That newly constructed object is another blueprint that looks much like the original, but with added features. The subclass in turn can be used to construct objects that look like the superclass&#x2019;s objects, but with additional capabilities.
  <p align="center"><img src="http://iws.punahou.edu/user/DKiang/apcs/LessonA11/images/Fig_11_2.gif" width="301" height="282"><br>
    Figure 11.2 - Subclass and Superclass  </p>
</li>
<li>Figure 11.2 shows a superclass and a subclass, and some objects that have been constructed from each. These objects that are shown as rectangles are actual instances of the class. In the picture, Albert Einstein, Lynne Brooke, and Monty Vista represent actual objects.</li>
  </ol>
  <p>&#xA0;</p>
  <br><br>  
  <table cellspacing="0" cellpadding="0" border="0">
    <tr>
      <td width="90%"><span class="header">B. Class Hierarchies</span></td>
      <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 4 of 10</nobr></font></td>
    </tr>
  </table>
  <br>
  <ol class="text">
    <li>      In a hierarchy, each class has at most one superclass, but might have several subclasses. There is one class, at the top of the hierarchy that has no superclass. This is sometimes called the root of the hierarchy.
      <p align="center"><img src="http://iws.punahou.edu/user/DKiang/apcs/LessonA11/images/Fig_11_3.gif" width="374" height="354"><br>
        Figure 11.3 - <code>Person</code> Inheritance Hierarchy</p>
    <p>Figure 11.3 shows a hierarchy of classes. It shows that a <code>Principal</code> is a <code>Person</code>, a <code>Student</code> is a <code>Person</code>, and that a <code>Teacher</code> is a <code>Person</code>. It also shows that both <code>HighSchoolStudent</code> and <code>CollegeStudent</code> are types of <code>Student</code>.</p>
    </li>
<li><p>In our example, the class <code>Person</code> is the base class and the classes <code>Principal, Student, Teacher, HighSchoolStudent</code>, and <code>CollegeStudent</code> are derived classes.</p>
        </li>
        <li><p>In Java, the syntax for deriving a child class from a parent class is:</p>
        </li>
  </ol>
  <blockquote>
    <p><span class="text"><code><strong>class</strong> subclass <strong>extends</strong> superclass{<br>
// new characteristics of the subclass go here<br>
} </code></span></p>
  </blockquote>
  <ol class="text" start="4">
	<li><p>Several classes are often subclasses of the same class. A subclass may in turn become a parent class for a new subclass. This means that inheritance can extend over several &quot;generations&quot; of classes. This is shown in Figure 11.3, where class <code>HighSchoolStudent</code> is a subclass of class <code>Student</code>, which is itself a subclass of the <code>Person</code> class. In this case, class <code>HighSchoolStudent</code> is considered to be a subclass of the <code>Person</code> class, even though it is not a direct subclass.</p></li>
	<li>In Java, every class that does not specifically extend another class is a subclass of the class <code>Object</code>. For example, in Figure 11.3, the <code>Person</code> class extends the class <code>Object</code>. The class <code>Object</code> has a small number of methods that make sense for all objects, such as the <code>toString</code> method, but the class <code>Object</code>&#x2019;s implementations of these methods are not very useful and the implementations usually get redefined in classes lower in the hierarchy. </li>
  </ol>
  <p>&#xA0;</p><br><br>
<table cellspacing="0" cellpadding="0" border="0">
  <tr>
    <td width="90%"><span class="header">C. Using Inheritance</span></td>
    <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 5 of 10</nobr></font></td>
  </tr>
</table>
  <br>
<ol class="text">
    <li>The following program uses a class <code>Person</code> to represent people you might find at a school. The <code>Person</code> class has basic information in it, such as name, age and gender. An additional class, <code>Student</code>, is created that is similar to <code>Person</code>, but has the Id number and grade point average of the student.      
      <p><code><strong>public class</strong> Person{<br>
          <strong>&#xA0;&#xA0;private</strong> String myName; &#xA0;&#xA0;// name of the person<br>
          <strong>&#xA0;&#xA0;private int</strong> myAge; &#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;// person&apos;s age<br>
          <strong>&#xA0;&#xA0;private</strong> String myGender; // &quot;M&quot; for male, &quot;F&quot; for female</code></p>
    <p><code> <strong>&#xA0;&#xA0;</strong>// constructor<br>
        <strong>&#xA0;&#xA0;public</strong> Person(String name, int age, String gender){<br>
        <strong>&#xA0;&#xA0;</strong><strong>&#xA0;&#xA0;</strong>myName = name;<br>
        <strong>&#xA0;&#xA0;</strong><strong>&#xA0;&#xA0;</strong>myAge = age;<br>
        <strong>&#xA0;&#xA0;</strong><strong>&#xA0;&#xA0;</strong>myGender = gender;<br>
        <strong>&#xA0;&#xA0;</strong>}<br>
  <br>
  <strong>&#xA0;&#xA0;public</strong> String getName(){<br>
  <strong>&#xA0;&#xA0;&#xA0;&#xA0;return</strong> myName;<br>
  <strong>&#xA0;&#xA0;</strong>}</code></p>
      <p><code> <strong>&#xA0;&#xA0;public int</strong> getAge(){<br>
          <strong>&#xA0;&#xA0;&#xA0;&#xA0;return</strong> myAge;<br>
          <strong>&#xA0;&#xA0;</strong>}</code></p>
      <p><code> <strong>&#xA0;&#xA0;public</strong> String getGender(){<br>
          <strong>&#xA0;&#xA0;&#xA0;&#xA0;return</strong> myGender;<br>
          <strong>&#xA0;&#xA0;</strong>}</code></p>
      <p><code> <strong>&#xA0;&#xA0;public void</strong> setName(String name){<br>
          <strong>&#xA0;&#xA0;</strong><strong>&#xA0;&#xA0;</strong>myName = name;<br>
          <strong>&#xA0;&#xA0;</strong>}</code></p>
      <p><code> <strong>&#xA0;&#xA0;public void</strong> setAge(int age){<br>
          <strong>&#xA0;&#xA0;</strong><strong>&#xA0;&#xA0;</strong>myAge = age;<br>
          <strong>&#xA0;&#xA0;</strong>}</code></p>
      <p><code> <strong>&#xA0;&#xA0;public void</strong> setGender(String gender){<br>
          <strong>&#xA0;&#xA0;</strong><strong>&#xA0;&#xA0;</strong>myGender = gender;<br>
          <strong>&#xA0;&#xA0;</strong>}</code></p>
      <p><code> <strong>&#xA0;&#xA0;public</strong> String toString(){<br>
          <strong>&#xA0;&#xA0;&#xA0;&#xA0;return</strong> myName + &#x201C;, age: &#x201C; + myAge + &#x201C;, gender: &#x201C; <br>
          <strong>&#xA0;&#xA0;</strong><strong>&#xA0;&#xA0;</strong><strong>&#xA0;&#xA0;</strong>+ myGender;<br>
          <strong>&#xA0;&#xA0;</strong>}<br>
  }</code></p>
      <p><code>//-----------------End of Person Class-----------------//</code></p>
    </li>
</ol>  <blockquote>
  <p class="text"><code><strong>public class</strong> Student <strong>extends</strong> Person{<br>
      <strong>&#xA0;&#xA0;private</strong> String myIdNum; // Student Id Number<br>
      <strong>&#xA0;&#xA0;private</strong> double myGPA; // grade point average</code></p>
  <p class="text"><code> <strong>&#xA0;&#xA0;</strong>// constructor<br>
      <strong>&#xA0;&#xA0;public</strong> Student(String name, <strong>int</strong> age, String gender,<br>
      <strong>&#xA0;&#xA0;</strong><strong>&#xA0;&#xA0;</strong><strong>&#xA0;&#xA0;</strong><strong>&#xA0;&#xA0;</strong><strong>&#xA0;&#xA0;</strong><strong>&#xA0;&#xA0;</strong><strong>&#xA0;&#xA0;</strong><strong>&#xA0;&#xA0;</strong><strong>&#xA0;&#xA0;</strong><strong>&#xA0;&#xA0;</strong><strong>&#xA0;&#xA0;</strong><strong>&#xA0;&#xA0;</strong><strong>&#xA0;&#xA0;</strong><strong>&#xA0;&#xA0;</strong><strong>&#xA0;&#xA0;</strong><strong>&#xA0;&#xA0;</strong>String idNum, double gpa){<br>
      <strong>&#xA0;&#xA0;&#xA0;&#xA0;</strong>// use the super class&apos; constructor<br>
      <strong>&#xA0;&#xA0;&#xA0;&#xA0;super</strong>(name, age, gender);<br>
  <br>
  <strong>&#xA0;&#xA0;&#xA0;&#xA0;</strong>// initialize what&apos;s new to Student<br>
  <strong>&#xA0;&#xA0;&#xA0;&#xA0;</strong>myIdNum = idNum;<br>
  <strong>&#xA0;&#xA0;&#xA0;&#xA0;</strong>myGPA = gpa;<br>
  <strong>&#xA0;&#xA0;</strong>}</code></p>
  <p class="text"><code> <strong>&#xA0;&#xA0;public</strong> String getIdNum(){<br>
      <strong>&#xA0;&#xA0;&#xA0;&#xA0;return</strong> myIdNum;<br>
      <strong>&#xA0;&#xA0;</strong>}</code></p>
  <p class="text"><code> <strong>&#xA0;&#xA0;public double</strong> getGPA(){<br>
      <strong>&#xA0;&#xA0;&#xA0;&#xA0;return</strong> myGPA;<br>
      <strong>&#xA0;&#xA0;</strong>}</code></p>
  <p class="text"><code> <strong>&#xA0;&#xA0;public void</strong> setIdNum(String idNum){<br>
      <strong>&#xA0;&#xA0;</strong><strong>&#xA0;&#xA0;</strong>myIdNum = idNum;<br>
      <strong>&#xA0;&#xA0;</strong>}</code></p>
  <p class="text"><code> <strong>&#xA0;&#xA0;public void</strong> setGPA(double gpa){<br>
      <strong>&#xA0;&#xA0;</strong><strong>&#xA0;&#xA0;</strong>myGPA = gpa;<br>
      <strong>&#xA0;&#xA0;</strong>}<br>
  }</code></p>
  <p class="text"><code> //-----------------End of Student Class-----------------//</code></p>
  <p class="text"> <code>public class HighSchool{<br>
&#xA0;&#xA0;public static void main (String args[]){<br>
<code>&#xA0;&#xA0;</code><code>&#xA0;&#xA0;</code>Person bob = new Person(&quot;Coach Bob&quot;, 27, &quot;M&quot;);<br>
<code>&#xA0;&#xA0;</code><code>&#xA0;&#xA0;</code>Student lynne = new Student(&quot;Lynne Brooke&quot;, 16, &quot;F&quot;, <br>
<code>&#xA0;&#xA0;</code><code>&#xA0;&#xA0;</code><code>&#xA0;&#xA0;</code><code>&#xA0;&#xA0;</code><code>&#xA0;&#xA0;</code><code>&#xA0;&#xA0;</code><code>&#xA0;&#xA0;</code><code>&#xA0;&#xA0;</code><code>&#xA0;&#xA0;</code><code>&#xA0;&#xA0;</code><code>&#xA0;&#xA0;</code><code>&#xA0;&#xA0;</code><code>&#xA0;&#xA0;</code><code>&#xA0;&#xA0;</code><code>&#xA0;&#xA0;</code><code>&#xA0;&#xA0;</code>&quot;HS95129&quot;, 3.5);<br>
<code>&#xA0;&#xA0;</code><code>&#xA0;&#xA0;</code>System.out.println(bob);<br>
<code>&#xA0;&#xA0;</code><code>&#xA0;&#xA0;</code>System.out.println(lynne);<br>
<code>&#xA0;&#xA0;</code><code>&#xA0;&#xA0;</code>// The previous two lines could have been written as:<br>
<code>&#xA0;&#xA0;</code><code>&#xA0;&#xA0;</code>// System.out.println(bob.toString());<br>
<code>&#xA0;&#xA0;</code><code>&#xA0;&#xA0;</code>// System.out.println(lynne.toString());<br>
<code>&#xA0;&#xA0;</code>}<br>
}</code></p>
</blockquote>
<ol class="text" start="2">
      <li><p>The <code>Student</code> class is a derived class (subclass) of <code>Person</code>. An object of type <code>Student</code> contains <code>myIdNum</code> and <code>myGPA</code>, which are defined in <code>Student</code>. It also has indirect access to the <code>private</code> variables <code>myName, myAge,</code> and <code>myGender</code> from <code>Person</code> through the methods <code>getName(), getAge(), getGender(), setName(), setAge(),</code> and <code>setGender()</code> that it inherits from <code>Person</code>.</p>
        </li>
      <li><p>The constructor for the <code>Student</code> class initializes the instance data of <code>Student</code> objects and uses the <code>Person</code> class&#x2019;s constructor to initialize the data of the <code>Person</code> superclass. The constructor for the <code>Student</code> class looks like this:</p>
        <p align="left" class="text"><code>// constructor<br>
              <strong> public</strong> Student(String name, <strong>int</strong> age, String gender,<br>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;String idNum, <strong>double</strong> gpa){<br>
&#xA0;&#xA0;&#xA0;// use the super class&apos;s constructor<br>
    <strong><code>&#xA0;&#xA0;&#xA0;</code>super</strong>(name, age, gender);</code></p>
        <p><code> <code>&#xA0;&#xA0;&#xA0;</code>// initialize what&apos;s new to Student<br>
              <code>&#xA0;&#xA0;&#xA0;</code>myIdNum = idNum;<br>
              <code>&#xA0;&#xA0;&#xA0;</code>myGPA = gpa;<br>
    }</code></p>
      </li>
</ol>
<blockquote>
  <p class="text">The statement <code><strong>super</strong>(name, age, gender)</code> invokes the <code>Person</code> class&#x2019;s constructor to initialize the inherited data in the superclass. The next two statements initialize the members that only <code>Student</code> has. Note that when <strong><code>super</code></strong> is used in a constructor, it must be the <em>first</em> statement.</p>
</blockquote>
<ol class="text" start="4">
  <li><p align="left" class="text">So far, we have only seen the <strong><code>public</code></strong> (class members that can be accessed outside the class) and <strong><code>private</code></strong> (class members that are inaccessible from outside the class) access modifiers. There is a third access modifier that can be applied to an instance variable or method. If it is declared to be <strong><code>protected</code></strong>, then it can be used in the class in which it is defined and in any subclass of that class. This declaration is less restrictive than <strong><code>private</code></strong> and more restrictive than <strong><code>public</code></strong>. The A.P. Java subset allows the use of <strong><code>protected</code></strong> with methods but discourages its use for instance variables. It is preferred that all instance variables are <strong><code>private</code></strong>. Indirect access from subclasses should be done with <strong><code>public</code></strong> &quot;getter&quot; and &quot;setter&quot; methods. While <strong><code>protected</code></strong> members are available to provide a foundation for the subclasses to build on, they are still invisible to the public at large.</p></li>
</ol>
<p>&#xA0;</p>
<br><br>
<table cellspacing="0" cellpadding="0" border="0">
  <tr>
    <td width="90%"><span class="header">D. Method Overriding</span></td>
    <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 6 of 10</nobr></font></td>
  </tr>
</table>
  <br>
  <ol class="text">
    <li>A derived class can <em>override</em> a method from its base class by defining a replacement method with the same signature. For example, in our <code>Student</code> subclass, the <code>toString()</code> method contained in the <code>Person</code> superclass does not reference the new variables that have been added to objects of type <code>Student</code>, so nothing new is printed out. We need a new <code>toString()</code> method in the class <code>Student</code>:
      <p><code>// overrides the toString method in the parent class<br>
          <strong>public</strong> String toString(){<br>
        &#xA0;&#xA0;<strong>return</strong> getName() + &quot;, age: &quot; + getAge() + &quot;, gender: &quot; <br>
        &#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;+ getGender() + &quot;, student id: &quot; + myIdNum <br>
        &#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;+ &quot;, gpa: &quot; + myGPA;<br>
}</code></p>
    <p>A more efficient alternative is to use <strong><code>super</code></strong> to invoke the <code>toString()</code> method from the parent class while adding information unique to the <code>Student</code> subclass:</p>
      <p><code><strong>public</strong> String toString(){<br>
  &#xA0;&#xA0;&#xA0;&#xA0;<strong>return</strong> super.toString() +<br>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&quot;, student id: &quot; + myIdNum + &quot;, gpa: &quot; + myGPA;<br>
  }</code></p>
    </li>
<li>Even though the base class has a <code>toString()</code> method, the new definition of <code>toString()</code> in the derived class will override the base class&#x2019;s version . The base class has its method, and the derived class has its own method with the same name. With the change in the <code>Student</code> class the following program will print out the full information for both items. 
  <blockquote>
    <p><code>Person bob = <strong>new</strong> Person(&quot;Coach Bob&quot;, 27, &quot;M&quot;);<br>
  Student lynne = <strong>new</strong> Student(&quot;Lynne Brooke&quot;, 16, &quot;F&quot;,<br>
&quot;HS95129&quot;, 3.5);</code></p>
    <p><code> System.out.println(bob.toString());<br>
      System.out.println(lynne.toString());</code></p>
  </blockquote>
</li>
    </ol>
  <blockquote class="text">
<p>The output to this block of code is:</p>
    <p><code>Coach Bob, age: 27, gender: M<br>
      Lynne Brooke, age: 16, gender: F, student id: HS95129, gpa: 3.5</code></p>
    <p>The line <code>bob.toString()</code> calls the <code>toString()</code> method defined in <code>Person</code>, and the line <code>lynne.toString()</code> calls the <code>toString()</code> method defined in <code>Student</code>.</p>
  </blockquote>
  <p>&#xA0;</p>
  <br><br>
<table cellspacing="0" cellpadding="0" border="0">
  <tr>
    <td width="90%"><span class="header">E. Interfaces</span></td>
    <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 7 of 10</nobr></font></td>
  </tr>
</table>
  <br>
<ol class="text">
	<li><p>In Java, an interface is a mechanism that unrelated objects use to interact with each other. Like a protocol, an interface specifies agreed-on behaviors and/or attributes.</p></li>
</ol>
<ol class="text" start="2">
	<li>The <code>Person</code> class and its class hierarchy define the attributes and behaviors of a person. But a person can interact with the world in other ways. For example, an employment program could manage a person at a school. An employment program isn&apos;t concerned with the kinds of items it handles as long as each item provides certain information, such as salary and employee ID. This interaction is enforced as a protocol of method definitions contained within an interface. The <code>Employable</code> interface would define, but not implement, methods that set and get the salary, assign an ID number, and so on.
	  <p align="center"><img src="http://iws.punahou.edu/user/DKiang/apcs/LessonA11/images/Fig_11_4.gif" width="385" height="173"><br>
	    Figure 11.4 - <code>Employable</code> Interface	  </p>
	</li>
<li><p>To work in the employment program, the <code>Teacher</code> class must agree to this protocol by <em>implementing</em> the interface. To implement an interface, a class must implement all of the methods and attributes defined in the interface. In our example, the shared methods of the <code>Employable</code> interface would be implemented in the <code>Teacher</code> class.</p>
</li>
<li>  In Java, an <strong><code>interface</code></strong> consists of a set of methods and/or methods, without any associated implementations. Here is an example of Java interface that defines the behaviors of &#x201C;employability&#x201D; described earlier:
  <p><code><strong>public interface</strong> Employable{<br>
&#xA0;&#xA0;<strong>public double</strong> getSalary();<br>
&#xA0;&#xA0;<strong>public</strong> String getEmployeeID();</code></p>
<p><code> &#xA0;&#xA0;<strong>public void</strong> setSalary(<strong>double</strong> salary);<br>
  &#xA0;&#xA0;<strong>public void</strong> setEmployeeID(String id);<br>
  } </code></p>
  <p>A class <em>implements</em> an <em>interface</em> by defining all the attributes and methods defined in the <em>interface</em>. implements is a reserved word. For example:</p>
  <p><code><strong>public class</strong> Teacher <strong>implements</strong> Employable{<br>
  &#xA0;&#xA0;...<br>
  &#xA0;&#xA0;<strong>public double</strong> getSalary() { <strong>return</strong> mySalary; }<br>
  &#xA0;&#xA0;<strong>public int</strong> getEmployeeID() { <strong>return</strong> myEmployeeID; }</code></p>
  <p><code> &#xA0;&#xA0;<strong>public void</strong> setSalary(<strong>double</strong> salary) { mySalary = salary; }<br>
  &#xA0;&#xA0;<strong>public void</strong> setEmployeeID(String id) { myEmployeeID = id; }<br>
  } </code></p>
</li>
<li>  A class can implement any number of interfaces. In fact, a class can both extend another class and implement one or more interfaces. So, we can have things like (assuming we have an interface named <code>Californian</code>)
        <p><code><strong>public class</strong> Teacher <strong>extends</strong> Person <strong>implements</strong> Employable, Californian{<br>
      ...<br>
      }</code></p>
  </li>
  <li>          Interfaces are useful for the following:
    <p>- Declaring a common set of methods that one or more classes are required to implement<br>
          - Providing access to an object&#x2019;s programming interface without revealing the details of its class.<br>
          - Providing a relationship between dissimilar classes without imposing an unnatural class relationship.</p>
  </li>
<li>You are not likely to need to write your own interfaces until you get to the point of writing fairly complex programs. However, there are a few interfaces that are used in important ways in Java&#x2019;s standard packages. You&#x2019;ll learn about some of these standard interfaces in future lessons.</li>
</ol>
<p>&#xA0;</p>
<br>  
  <br>
  <table cellspacing="0" cellpadding="0" border="0">
    <tr>
      <td width="90%"><span class="header">Summary/Review</span></td>
      <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 8 of 10</nobr></font></td>
    </tr>
  </table>
  <br>
  <p class="text">Inheritance represents the &#x201C;is a&#x201D; relationship between types of objects. In practice it may be used to simplify the creation of a new class. It is the primary tool for reusing your own and standard library classes. Inheritance allows a programmer to derive a new class (called a derived class or a subclass) from another class (called a base class or superclass). A derived class inherits all the data fields and methods (but not constructors) from the base class and can add its own methods or redefine some of the methods of the base class. With the size and complexity of modern programs, reusing code is the only way to write successful programs in a reasonable amount of time.</p>
  <br><br><br><h2>Chapter 12</h2><br>  
  <br>
  <table cellspacing="0" cellpadding="0" border="0">
    <tr>
      <td width="90%"><span class="header">A12 Introduction</span></td>
      <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 1 of 18</nobr></font></td>
    </tr>
  </table>
  <br>
  <p class="text">Solving problems on a computer very often requires a repetition of a block of code. Reading in data from a file, outputting to a file or adding numbers are situations where repetition is required. In Lesson A9, Recursion, we have already explored repeating code. However, not all iterative problems lend themselves to recursive solutions. Java provides three alternative constructs for repeating code with the <code>for</code> loop, the <code>while</code> loop, and the <code>do-while</code> loop. The <code>while</code> and <code>for</code> control structures allow us to set up a conditional loop, one that occurs for an indefinite period of time until some condition becomes false. We will also study the optional <code>do-while</code> loop and the concept of nested loops. </p>
  <p class="text">The key topics for this lesson are:</p>
  <ol type="A" class="text">
    <li class="text"><a href="A12-A.html">The while Loop</a></li>
    <li class="text"><a href="A12-B.html">Loop Boundaries</a></li>
  <li class="text"><a href="A12-C.html">Conditional Loop Strategies</a></li>
  <li class="text"><a href="A12-D.html">The for Loop</a></li>
  <li class="text"><a href="A12-E.html">Nested Loops</a></li>
  <li class="text"><a href="A12-F.html">The do-while Loop</a> (optional)</li>
  <li class="text"><a href="A12-G.html">Choosing a Loop Control Structure</a></li>
  <li class="text"><a href="A12-H.html">Loop Invariants</a></li>
  </ol><br>  
  <br>
  <table cellspacing="0" cellpadding="0" border="0">
    <tr>
      <td width="90%"><span class="header"><a href="../vocabulary/index_A.html#A12">A12 Vocabulary</a></span></td>
      <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 2 of 18</nobr></font></td>
    </tr>
  </table>
  <br>
  <table width="500" border="0">
    <tr class="text">
      <td><code>break</code></td>
      <td>BOUNDARY</td>
    </tr>
    <tr class="text">
      <td><code>do-while</code></td>
      <td>ENTRY CHECK</td>
    </tr>
    <tr class="text">
      <td>EXIT CHECK</td>
      <td><code>for</code></td>
    </tr>
    <tr class="text">
      <td>LOOP INVARIANT</td>
      <td>NESTED LOOP</td>
    </tr>
    <tr class="text">
      <td>SENTINEL</td>
      <td>STATE</td>
    </tr>
    <tr class="text">
      <td><code>while</code></td>
      <td>&#xA0;</td>
    </tr>
    <tr class="text">
      <td>&#xA0;</td>
      <td>&#xA0;</td>
    </tr>
    <tr class="text">
      <td>&#xA0;</td>
      <td>&#xA0;</td>
    </tr>
    <tr class="text">
      <td>&#xA0;</td>
      <td>&#xA0;</td>
    </tr>
  </table>
  <br>
  <br>  
  <br>
  <table cellspacing="0" cellpadding="0" border="0">
    <tr>
      <td width="90%"><span class="header">A. The <code>while</code> Loop</span></td>
      <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 3 of 18</nobr></font></td>
    </tr>
  </table>
  <br>
  <ol class="text">
    <li>The general form of a while statement is:
      <p><code><strong>while</strong> (expression){ <br>
&#xA0;&#xA0;statement;<br>
}</code></p>
    <ol type="a">
        <li>
          <p>As in the <code>if-else</code> control structure, the boolean expression must be enclosed in parentheses ().</p>
        </li>
      <li>
        <p>The statement executed by the <code>while</code> loop can be a simple statement, or a compound statement blocked with braces {}.</p>
      </li>
    </ol>
    </li>
	<li><p>If the expression is true, the statement is executed. After execution of the statement, program control returns to the top of the <strong>while</strong> construct. The statement will continue to be executed until the expression evaluates to false.</p></li>
	<li><p>The following diagram illustrates the flow of control in a while loop:</p>
        <p><img src="http://iws.punahou.edu/user/DKiang/apcs/LessonA12/images/Fig_12_1.gif" width="229" height="203"></p>
      </li>
<li>The following loop will print out the integers from 1-10.
  <p><code><strong>int</strong> number = 1; &#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;// initialize</code></p>
<p><code><strong>while</strong> (number &lt;= 10){ &#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;// loop boundary condition<br>
  &#xA0;&#xA0;System.out.println(number);<br>
  &#xA0;&#xA0;number++; &#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;// increment/decrement<br>
  }</code></p>
</li>
      <li>        
        <p>The above example has three key lines that need emphasis.        </p>
      </li>
  <ol type="a">
        <li>
          <p>You must initialize the loop control variable. If you do not initialize <code>number</code>, Java produces an error message warning you that the variable may not have been initialized.</p>
        </li>
      <li>
          <p>The loop boundary conditional test (<code>number &lt;= 10</code>) is often a source of error. Make sure that you have the correct comparison (<code>&lt;, &gt;, ==, &lt;=, &gt;=, !=</code>) and that the boundary value is correct. Programmers have to ensure that the loop is executed exactly the correct number of times. Performing the loop one too many or one too few times is called an OBOB , Off By One Bug.</p>
      </li>
  <li>
        <p>There must be some type of increment/decrement or other statement so that execution of the loop eventually terminates, otherwise the program will get stuck in an infinite loop and never end!</p>
      </li>
  </ol>
      <li>It is possible for the body of a <code>while</code> loop to execute zero times. The <code>while</code> loop is an entry check loop. If the condition is false due to some initial value, the statement inside of the <strong><code>while</code></strong> loop will never happen. This is appropriate in some cases.
        <p></p>
      </li>
  </ol>
  <p>&#xA0;</p>
  <br><br>  
  <table cellspacing="0" cellpadding="0" border="0">
    <tr>
      <td width="90%"><span class="header">B. Loop Boundaries</span></td>
      <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 4 of 18</nobr></font></td>
    </tr>
  </table>
  <br>
  <ol class="text">
    <li><p>The loop boundary is the boolean expression that evaluates as true or false. We must consider two aspects as we devise the loop boundary.</p>
      <ol type="a">
        <li>
          <p>It must eventually become false, which allows the loop to exit.</p>
        </li>
      <li>
        <p>It must be related to the task of the loop. When the task is done, the loop boundary must become false.</p>
      </li>
      </ol>
    </li>
      <li><p>There are a variety of loop boundaries of which two will be discussed in this section.</p></li>
      <li><p>The first is the idea of attaining a certain count or limit. The code in section A.4 above is an example of a count type of boundary.</p>
</li>
      <li><p>Sample problem: In the margin to the left, write a program fragment that prints the even numbers 2-20. Use a while loop.</p>
    </li>
  </ol>
  <ol class="text" start="5">
    <li>      A second type of boundary construction involves the use of a sentinel value. In this category, the while loop continues until a specific value is entered as input. The loop watches out for this sentinel value, continuing to execute until this special value is input and then breaking out from the loop. You have already used the break statement for switch statements, and it has a similar use here. Once the loop encounters the break statement, all further checks of the boundary condition are ignored and code execution continues after the end of the while loop. For example, here is a loop that keeps a running total of non-zero integers, terminated by a value of zero.
      <p><code>Scanner in = <strong>new</strong> Scanner(System.in);<br>
          <strong>int</strong> total = 0;<br>
          <strong>int</strong> number; <br>
        <br>
        <strong>while</strong> (true){<br>
        &#xA0;&#xA0;System.out.print (&quot;Enter a number (0 to quit) --&gt; &quot;);<br>
&#xA0;&#xA0;number = in.nextInt();<br>
&#xA0;&#xA0;<strong>if</strong>(number == 0){<br>
&#xA0;&#xA0;<strong></strong>&#xA0;&#xA0;<strong>break;</strong><br>
&#xA0;&#xA0;}<strong>else</strong>{<br>
&#xA0;&#xA0;<strong></strong>&#xA0;&#xA0;<strong></strong>total += number;<br>
&#xA0;&#xA0;<strong></strong>}<br>
}<br>
System.out.println(&quot;Total = &quot; + total);</code></p>
    <p>Notice that because we don&#x2019;t know how many times we want the loop to run, we simply declare the boundary condition as always true. This means the loop will run until we tell it to stop with the <code>break</code> command.</p>
    </li>
<li>A similar construct to the <code>break</code> statement is the <code>continue</code> statement. When a loop encounters a <code>continue</code> statement, every statement left to execute <em>in that specific iteration</em> is ignored. The loop will then go back to check its boundary condition like normal. <code>Continue</code> statements can be useful for ignoring special cases (such as if you want to ignore an entry of zero in a loop that may use that number as a divisor).
  <blockquote>
            <p class="text">&#xA0;</p>
          </blockquote>
        </li>
      </ol>
  <br><br>
<table cellspacing="0" cellpadding="0" border="0">
  <tr>
    <td width="90%"><span class="header">C. Conditional Loop Strategies</span></td>
    <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 5 of 18</nobr></font></td>
  </tr>
</table>
  <br>
<ol class="text">
    <li>This section will present a variety of strategies that assist the novice programmer in developing correct <strong><code>while</code></strong> loops. The problem to be solved is described first.
      <p>Problem statement:</p>
    <p>A program will read integer test scores from the keyboard until a negative value is typed in. The program will drop the lowest score from the total and print the average of the remaining scores.</p>
    </li>
<li>
  <p>One strategy in designing a <strong><code>while</code></strong> loop is to think about the following four sections of the loop: 1) initialization, 2) loop boundary, 3) contents of the loop and 4) the state of variables after the loop.</p>
<ol type="a">
    <li>
      <p>Initialization - Variables will usually need to be initialized before you get into the loop. This is especially true of <strong><code>while</code></strong> loops since the boundary condition is at the top of the control structure.</p>
    </li>
  <li>
      <p>Loop boundary - You must construct a Boolean expression that becomes false when the problem is done. This is the most common source of error in coding a while loop. Be careful of off-by-one errors that cause the loop to happen one too few or one too many times.</p>
  </li>
<li>
    <p>Contents of the loop - This is where the problem is solved. The statement of the loop must also provide the opportunity to reach the loop boundary. If there is no movement toward the loop boundary, you will get stuck in an infinite loop.</p>
</li>
<li>
  <p>State of variables after the loop - To ensure the correctness of your loop you must determine the status of key variables used in your loop. One way to do this is by tracing the code on paper.</p>
</li>
</ol>
</li>
<li>  We now solve the problem by first developing pseudocode.
  <p>Pseudocode:</p>
<p>initialize total and count to 0<br>
    initialize smallest to Integer.MAX_VALUE<br>
    get first score<br>
    while score is not a negative value<br>
  &#xA0;&#xA0;&#xA0;&#xA0;&#xA0;increment total<br>
  &#xA0;&#xA0;&#xA0;&#xA0;&#xA0;increment count<br>
  &#xA0;&#xA0;&#xA0;&#xA0;&#xA0;change smallest if necessary<br>
  &#xA0;&#xA0;&#xA0;&#xA0;&#xA0;get next score<br>
  subtract smallest from total<br>
  calculate average</p>
</li>
<li>
  <p>And now it is easy to develop a working loop from this concise and easy to read pseudocode.</p>
</li>
<li>  Tracing code is best done in a chart or table format. It keeps your data organized better than marking values all over the page. We now trace the following sample data input.</li>
</ol>  <blockquote>
  <p class="text">65 23 81 17 45 -1</p>
  <table width="95%" border="0" cellspacing="0" cellpadding="0">
    <tr>
      <td bgcolor="#000000"><table width="100%" border="0" cellspacing="1" cellpadding="3">
        <tr bgcolor="#FFFFFF" class="text">
          <td width="20%"><div align="center"><em>score</em></div></td>
          <td width="20%"><div align="center"><em>score &gt;= 0</em></div></td>
          <td width="20%"><div align="center"><em>total</em></div></td>
          <td width="20%"><div align="center"><em>count</em></div></td>
          <td width="20%"><div align="center"><em>smallest</em></div></td>
        </tr>
        <tr bgcolor="#FFFFFF" class="text">
          <td width="20%"><div align="center">undefined</div></td>
          <td width="20%"><div align="center">undefined</div></td>
          <td width="20%"><div align="center">0</div></td>
          <td width="20%"><div align="center">0</div></td>
          <td width="20%"><div align="center">INT_MAX</div></td>
        </tr>
        <tr bgcolor="#FFFFFF" class="text">
          <td width="20%"><div align="center">65</div></td>
          <td width="20%"><div align="center"><strong><code>true</code></strong></div></td>
          <td width="20%"><div align="center">65</div></td>
          <td width="20%"><div align="center">1</div></td>
          <td width="20%"><div align="center">65</div></td>
        </tr>
        <tr bgcolor="#FFFFFF" class="text">
          <td width="20%"><div align="center">23</div></td>
          <td width="20%"><div align="center"><strong><code>true</code></strong></div></td>
          <td width="20%"><div align="center">88</div></td>
          <td width="20%"><div align="center">2</div></td>
          <td width="20%"><div align="center">23</div></td>
        </tr>
        <tr bgcolor="#FFFFFF" class="text">
          <td width="20%"><div align="center">81</div></td>
          <td width="20%"><div align="center"><strong><code>true</code></strong></div></td>
          <td width="20%"><div align="center">169</div></td>
          <td width="20%"><div align="center">3</div></td>
          <td width="20%"><div align="center">23</div></td>
        </tr>
        <tr bgcolor="#FFFFFF" class="text">
          <td width="20%"><div align="center">17</div></td>
          <td width="20%"><div align="center"><strong><code>true</code></strong></div></td>
          <td width="20%"><div align="center">186</div></td>
          <td width="20%"><div align="center">4</div></td>
          <td width="20%"><div align="center">17</div></td>
        </tr>
        <tr bgcolor="#FFFFFF" class="text">
          <td width="20%"><div align="center">45</div></td>
          <td width="20%"><div align="center"><strong><code>true</code></strong></div></td>
          <td width="20%"><div align="center">231</div></td>
          <td width="20%"><div align="center">5</div></td>
          <td width="20%"><div align="center">17</div></td>
        </tr>
        <tr bgcolor="#FFFFFF" class="text">
          <td width="20%"><div align="center">-1</div></td>
          <td width="20%"><div align="center"><strong><code>false</code></strong></div></td>
          <td width="20%"><div align="center"></div></td>
          <td width="20%"><div align="center"></div></td>
          <td width="20%"><div align="center"></div></td>
        </tr>
      </table></td>
    </tr>
  </table>
  <p class="text">When the loop is terminated, the three key variables (<em>total</em>, <em>score</em>, and <em>smallest</em>) contain the correct answers.</p>
  </blockquote><p>&#xA0;</p><br><br>
<table cellspacing="0" cellpadding="0" border="0">
  <tr>
    <td width="90%"><span class="header">D. The <code>for</code> Loop</span></td>
    <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 6 of 18</nobr></font></td>
  </tr>
</table>
  <br>
  <ol class="text">
    <li>The for loop has the same effect as a while loop, but uses a different format. The general form of a for loop is:</li>
  </ol>
  <blockquote>
    <p class="text"><code><strong>for</strong> (statement1; expression2; statement3){ <br>
&#xA0;&#xA0;statement4;<br>
}</code></p>
  <p class="text">The <strong><code>for</code></strong> loop is typically set up as follows.</p>
    <p class="text"><code>statement1</code> initializes the loop variable<br>
      <code>expression2</code> is a <strong><code>boolean</code></strong> expression<br>
      <code>statement3</code> alters the key value, usually via an increment/decrement statement<br>
      <code>statement4</code> is the task to be done during each iteration</p>
  </blockquote>  <ol class="text" start="2">
    <li>Here is an example of a <strong><code>for</code></strong> loop, used to print the integers 1-10.
      <blockquote>
        <p><code><strong>for</strong> (<strong>int</strong> loop = 1; loop &lt;= 10; loop++){<br>
&#xA0;&#xA0;System.out.print(loop);<br>
}</code></p>
      </blockquote>
    </li>
<li>The flow of control in a for loop is illustrated below:</li>
  </ol>
  <blockquote class="text">
    <p class="text"><img src="http://iws.punahou.edu/user/DKiang/apcs/LessonA12/images/Fig_12_2.gif" width="406" height="222"></p>
  <p>Notice that after the statement is executed, control passes to the increment/decrement statement, and then back to the Boolean condition.</p>
  </blockquote>  <ol class="text" start="4">
    <li>The following is the equivalent <strong><code>while</code></strong> loop:
      <blockquote>
        <p class="text"><code><strong>int</strong> loop = 1;<br>
            <strong>while</strong> (loop &lt;= 10){<br>
&#xA0;&#xA0;System.out.print( loop);<br>
&#xA0;&#xA0;loop++;<br>
}</code></p>
      </blockquote>
    </li>
    </ol>  <ol class="text" start="5"><li><p>A <strong><code>for</code></strong> loop is appropriate when the initialization value and number of iterations is known in advance. The above example of printing 10 numbers is best solved with a <strong><code>for</code></strong> loop because the number of iterations of the loop is well defined.</p>
        </li>
        <li>
          <p>Constructing a <strong><code>for</code></strong> loop is easier than a <strong><code>while</code></strong> loop because the key structural parts of a loop (initialization, loop boundary, and increment/decrement statement) are contained in one line. It is also easier to visually check the correctness of a <strong><code>for</code></strong> loop because it is so compact.</p>
        </li>
    <li>
      <p>A while loop is more appropriate when the boundary condition is tied to some input or changing value inside of the loop.</p>
    </li>
    <li>      Here is an interesting application of a for loop to print the alphabet:
      <blockquote>
        <p><code><strong>char</strong> letter;</code></p>
        <p><code><strong>for</strong> (letter = &apos;A&apos;; letter &lt;= &apos;Z&apos;; letter++){<br>
      &#xA0;&#xA0;System.out.print(letter);<br>
      }</code></p>
      </blockquote>
      <p>The increment statement letter++ will add one to the ASCII value of letter.</p>
    </li>
<li>  A simple, but time-consuming error to find and fix is the accidental use of a null statement.
  <blockquote>
    <p><strong>for</strong> (loop = 1; loop &lt;= 10; loop++); // note _;_<br>
    &#xA0;&#xA0;System.out.print(loop);</p>
  </blockquote>
  <p>The semicolon placed at the end of the first line causes the <strong><code>for</code></strong> loop to do &quot;nothing&quot; 10 times. The output statement will only happen once after the <strong><code>for</code></strong> loop has done the null statement 10 times. The null statement can be used as a valid statement in control structures. Make sure you pay attention to your enclosing {}.</p>
</li>
<li>          There are two basic options for the variable used in the <strong><code>for</code></strong> loop. The variable can either be declared beforehand and therefore initially have a value set at another point in the program, or it can be declared and initialized within the <strong><code>for</code></strong> loop itself. Consider the following two <strong><code>for</code></strong> loops:
  <blockquote>
    <p><code><strong>int</strong> number = 1;</code></p>
    <p><code><strong>for</strong>(; number &lt;= 10; number++){<br>
      &#xA0;&#xA0;System.out.println(number);<br>
      }</code></p>
    <p><code><strong>for</strong>(<strong>int</strong> a = 1; a &lt;= 10; a++){<br>
      &#xA0;&#xA0;System.out.println(a);<br>
      } </code></p>
  </blockquote>
</li>
    </ol>  <blockquote class="text">
<p>Notice how the first statement of the first <code>for</code> loop is blank. This is because the <code>int</code> variable number has already been declared and initialized. Blank statements within the <code>for</code> loop are allowed. Now, both <code>for</code> loops appear to do the exact same thing, printing out all the numbers from 1 to 10. However, there are several key differences. In the first example, <code>number</code> may be changed to any number desired during the run of the program. Instead of setting it to one, a programmer could set it to the value of a function such as <code>int number = getValidNumber()</code>. This gives additional power to the programmer. Another difference between the two loops is the scope of the variables <code>number</code> and <code>a</code>. Because <code>number</code> was declared outside of the <code>for</code> loop, the value of <code>number</code> may be used after the <code>for</code> loop. However, <code>a</code> was declared within the <code>for</code> loop and thus will not be usable past the end bracket of the <code>for</code> loop.</p>
    </blockquote>    <p>&#xA0;</p><br><br>
<table cellspacing="0" cellpadding="0" border="0">
  <tr>
    <td width="90%"><span class="header">E. Nested Loops</span></td>
    <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 7 of 18</nobr></font></td>
  </tr>
</table>
  <br>
<ol class="text">
	<li>To nest loops means to place one loop inside of another loop. The statement of the outer loop will be another inner loop.</li>
</ol>
<ol class="text" start="2">
	<li>The following example will print a rectangular grid of stars with 4 rows and 8 columns.
	  <blockquote>
	    <p class="text"><code><strong>for</strong> (<strong>int</strong> row = 1; row &lt;= 4; row++){<br>
  &#xA0;&#xA0;<strong>for</strong> (<strong>int</strong> col=1; col &lt;= 8; col++){<br>
  <code>&#xA0;&#xA0;</code><code>&#xA0;&#xA0;</code>System.out.print(&quot;*&quot;);<br>
  <code>&#xA0;&#xA0;</code>}<br>
  <code>&#xA0;&#xA0;</code>System.out.println( );<br>
}	    </code></p>
	    <p>Run Output:</p>
	    <p><code>********<br>
	      ********<br>
	      ********<br>
	      ********</code></p>
	  </blockquote>
	</li>
	</ol>
<ol class="text" start="3">
  <li><p>For each occurrence of the outer <code>row</code> loop, the inner <code>col</code> loop will print 8 stars, terminated by the newline character.</p>
  </li>
<li><p>The action of nested loops can be analyzed using a chart:</p>
  <table width="250" border="0" cellspacing="0" cellpadding="3">
    <tr class="text">
      <td><div align="center"><strong><code>row</code></strong></div></td>
      <td><div align="center"><strong><code>col</code></strong></div></td>
    </tr>
    <tr class="text">
      <td><div align="center">1</div></td>
      <td><div align="center">1 to 8</div></td>
    </tr>
    <tr class="text">
      <td><div align="center">2</div></td>
      <td><div align="center">1 to 8</div></td>
    </tr>
    <tr class="text">
      <td><div align="center">3</div></td>
      <td><div align="center">1 to 8</div></td>
    </tr>
    <tr class="text">
      <td><div align="center">4</div></td>
      <td><div align="center">1 to 8</div></td>
    </tr>
  </table><br>
  </li>
<li><p>Suppose we wanted to write a method that prints out the following 7-line pattern of stars:</p></li>
<blockquote>
  <p><code>*******<br>
&#xA0;******<br>
&#xA0;&#xA0;*****<br>
&#xA0;&#xA0;&#xA0;****<br>
&#xA0;&#xA0;&#xA0;&#xA0;***<br>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;**<br>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;*</code></p>
</blockquote>
        <li><p>Here is an analysis of the problem, line-by-line.</p>
          <table width="400" border="0" cellspacing="0" cellpadding="3">
            <tr class="text">
              <td width="33%"><div align="center"><strong>Line #</strong></div></td>
              <td width="33%"><div align="center"><strong># spaces</strong></div></td>
              <td width="34%"><div align="center"><strong># stars</strong></div></td>
            </tr>
            <tr class="text">
              <td width="33%"><div align="center"></div></td>
              <td width="33%"><div align="center"></div></td>
              <td width="34%"><div align="center"></div></td>
            </tr>
            <tr class="text">
              <td width="33%"><div align="center">1</div></td>
              <td width="33%"><div align="center">0</div></td>
              <td width="34%"><div align="center">7</div></td>
            </tr>
            <tr class="text">
              <td width="33%"><div align="center">2</div></td>
              <td width="33%"><div align="center">1</div></td>
              <td width="34%"><div align="center">6</div></td>
            </tr>
            <tr class="text">
              <td width="33%"><div align="center">3</div></td>
              <td width="33%"><div align="center">2</div></td>
              <td width="34%"><div align="center">5</div></td>
            </tr>
            <tr class="text">
              <td width="33%"><div align="center">...</div></td>
              <td width="33%"><div align="center"></div></td>
              <td width="34%"><div align="center"></div></td>
            </tr>
            <tr class="text">
              <td width="33%"><div align="center">7</div></td>
              <td width="33%"><div align="center">6</div></td>
              <td width="34%"><div align="center">1</div></td>
            </tr>
            <tr class="text">
              <td width="33%"><div align="center">L</div></td>
              <td width="33%"><div align="center">L - 1</div></td>
              <td width="34%"><div align="center">N - L + 1</div></td>
            </tr>
          </table>
          <p>For a picture of <code>N</code> lines, each line <code>L</code> will have <code>(L-1)</code> spaces and <code>(N-L+1)</code> stars.</p>
        </li>
<li>        Here is a pseudocode version of the method.
  <blockquote>
    <p>A method to print a pattern of stars:</p>
  <p>Print <code>N</code> lines of stars, each Line <code>L</code> consists of<br>
  &#xA0;&#xA0;&#xA0;&#xA0;&#xA0;(<code>L-1</code>) spaces<br>
  &#xA0;&#xA0;&#xA0;&#xA0;&#xA0;(<code>N-L+1</code>) stars<br>
  &#xA0;&#xA0;&#xA0;&#xA0;&#xA0;a line feed</p>
  </blockquote>
</li>
<li>          Here is the code version of the method.
  <blockquote>
    <p><code><strong>void</strong> picture (<strong>int</strong> n){<br>
&#xA0;&#xA0;<strong>int</strong> line, spaces, stars, loop;</code></p>
  <p><code> &#xA0;&#xA0;<strong>for</strong> (line = 1; line &lt;= n; line++){<br>
  &#xA0;&#xA0;&#xA0;&#xA0;spaces = line - 1;<br>
  &#xA0;&#xA0;&#xA0;&#xA0;<strong>for</strong> (loop = 1; loop &lt;= spaces; loop++){<br>
  &#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;System.out.print (&quot; &quot;); // print a blank space<br>
  &#xA0;&#xA0;&#xA0;&#xA0;}<br>
  &#xA0;&#xA0;&#xA0;&#xA0;stars = n - line + 1;<br>
  &#xA0;&#xA0;&#xA0;&#xA0;<strong>for</strong> (loop = 1; loop &lt;= stars; loop++){<br>
  &#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;System.out.print (&quot;*&quot;);<br>
  &#xA0;&#xA0;&#xA0;&#xA0;}<br>
  &#xA0;&#xA0;&#xA0;&#xA0;System.out.println();<br>
  &#xA0;&#xA0;}<br>
  }</code></p>
  </blockquote>
</li>
</ol>
<p>&#xA0;</p>
<br><br>
<table cellspacing="0" cellpadding="0" border="0">
  <tr>
    <td width="90%"><span class="header">F. The do-while Loop (Optional)</span></td>
    <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 8 of 18</nobr></font></td>
  </tr>
</table>
  <br>
<ol class="text">
	<li>
	  <p>There are conditional looping situations where it is desirable to have the loop execute at least once, and then evaluate an exit expression at the end of the loop.</p>
	</li>
<li><p>The <strong><code>do-while</code></strong> loop allows you to do a statement first, and then evaluate an exit condition. The <strong><code>do-while</code></strong> loop complements the <strong><code>while</code></strong> loop that evaluates the exit expression at the top of the loop.</p>
	  </li>
	<li>The general form of a <strong><code>do-while</code></strong> loop is:
	  <p><code><strong>do</strong>{<br>
  statement;<br>
  }<strong>while</strong> (expression);</code></p>
	</li>
<li>The flow of control for a <strong><code>do-while</code></strong> loop is illustrated:
  <blockquote>
    <p><img src="http://iws.punahou.edu/user/DKiang/apcs/LessonA12/images/Fig_12_3.gif" width="159" height="267"></p>
    </blockquote>
</li>
<li>The following fragment of code will keep a running total of integers, terminated by a sentinel zero value.
  <blockquote>    
    <p><code><strong>int</strong> number, total = 0;<br>
        <strong>do</strong>{<br>
      &#xA0;&#xA0;System.out.print(&quot;Enter an integer (0 to quit) --&gt; &quot;);<br>
  &#xA0;&#xA0;number = in.readInt();<br>
  &#xA0;&#xA0;total += number;<br>
  }<strong>while</strong> (number != 0);</code></p>
    </blockquote>
<p>In contrast to the <strong><code>while</code></strong> loop version, the <strong><code>do-while</code></strong> has the advantage of using only one input statement inside of the loop. Because the Boolean condition is at the bottom, you must pass through the main body of a <strong><code>do-while</code></strong> loop at least once.</p>
</li>
<li>The same strategies used to develop <strong><code>while</code></strong> loops apply to <strong><code>do-while</code></strong> loops. Make sure you think about the following four sections of the loop: initialization, loop boundary, contents of the loop, and the state of variables after the loop.</li>
</ol>
<p>&#xA0;</p><br><br>
<table cellspacing="0" cellpadding="0" border="0">
  <tr>
    <td width="90%"><span class="header">G. Choosing a Loop Control Structure</span></td>
    <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 9 of 18</nobr></font></td>
  </tr>
</table>
  <br>
<ol class="text">
	<li>
	  <p>If you know how many times a loop is to occur, use a <strong><code>for</code></strong> loop. Problems that require execution of a pre-determined number of loops should be solved with a <strong><code>for</code></strong> statement.</p>
	  <table width="350" border="0" cellspacing="0" cellpadding="0">
            <tr>
              <td bgcolor="#000000"><table width="100%" border="0" cellspacing="1" cellpadding="3">
                <tr>
                  <td bgcolor="#FFFFFF" class="text"><strong>See <a href="HA12_1ProgrammingPointers.html" target="_blank">Handout A12.1</a>, <em>Programming Pointers</em></strong></td>
                </tr>
              </table></td>
            </tr>
            </table><br>
	  </li>
	<li>
        <p>The key difference between a <strong><code>while</code></strong> and <strong><code>do-while</code></strong> loop is the location of the boundary condition. In a <strong><code>while</code></strong> loop, the boundary condition is located at the top of the loop. Potentially, the statements within a <strong><code>while</code></strong> loop could happen zero times. If it is possible for the algorithm to occur zero times, use a <strong><code>while</code></strong> loop.</p>
  </li>
    <li>
        <p>Because a <strong><code>do-while</code></strong> loop has its boundary condition at the bottom of the loop, the loop body must occur at least once. If the nature of the problem being solved requires at least one pass through the loop, use a <strong><code>do-while</code></strong> loop.</p>
</li>
</ol>
<p>&#xA0;</p>
<br><br>
<table cellspacing="0" cellpadding="0" border="0">
  <tr>
    <td width="90%"><span class="header">H. Loop Invariants</span></td>
    <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 10 of 18</nobr></font></td>
  </tr>
</table>
  <br>
<ol class="text">
	<li>
	  <p>A loop invariant is an assertion about the loop that is relevant to the purpose of the loop. It is a precise statement, in terms of the loop variables, of what is true before and after each iteration of the loop. </p>
	</li>
	<li><p>Loop invariants are used to reason about programs formally and to prove their correctness without tracing all the iterations through a loop. If you can establish that an assertion is true the first time the loop is evaluated as well as after each iteration of the loop body, then your assertion is a loop invariant.</p>
	  </li>
<li>Consider the following code segment. Note that <code>count!</code> means the factorial of <code>count</code>.</li>
<blockquote>
  <p><code><strong>int</strong> factorial (<strong>int</strong> num){<br>
      <strong>&#xA0;&#xA0;int</strong> product = 1;<br>
      <strong>&#xA0;&#xA0;int</strong> count = 0;</code></p>
<p><code> <strong>&#xA0;&#xA0;while</strong> (count &lt; num){ // invariant: product == count!<br>
    <strong>&#xA0;&#xA0;</strong><strong>&#xA0;&#xA0;</strong>count += 1;<br>
    <strong>&#xA0;&#xA0;</strong><strong>&#xA0;&#xA0;</strong>product *= count;<br>
    <strong>&#xA0;&#xA0;</strong>}<br>
  <strong>&#xA0;&#xA0;return</strong> product;<br>
  }</code></p>
</blockquote>
  </ol>
<blockquote>
  <p class="text">Each time that the loop test is evaluated, the value of the variable <code>product</code> is always equal to <code>(count)!</code>. Since 0! = 1 (by definition), this is true the first time the loop test is evaluated as well as after each iteration of the loop body. Since <code>product == count!</code> is true each time the loop test is evaluated, it is the loop invariant&#xFFFD;&#xFFFD;&#xFFFD;the truth of the statement does not vary or change. Loop invariants are useful in reasoning about the correctness of programs that use loops. Since <code>product == count!</code> is an invariant, and <code>product</code> is returned, we can reason that the factorial method calculates the correct value.</p>
</blockquote>
<p>&#xA0;</p><br>  
  <br>  <table cellspacing="0" cellpadding="0" border="0">
    <tr>
      <td width="90%"><span class="header">LAB ASSIGNMENT A12.4</span></td>
      <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 15 of 18</nobr></font></td>
    </tr>
  </table>
  <p class="subhead">Grades</p>
  <p><span class="subhead">Background:</span></p>
  
  <p class="text">Suppose that a high school district decided on the following academic standards for a student&apos;s eligibility to participate in extracurricular activities, such as athletics, music, or drama, etc.:</p>
  <ol class="text">
    <li>No F&apos;s.</li>
  <li>Minimum 2.0 grade point average (gpa)<br>
        Note: A = 4.0, B = 3.0, C = 2.0, D = 1.0, F = 0</li>
  <li>Enrollment in a minimum of four academic classes</li>
  </ol>  <p><span class="subhead">Assignment:</span></p>
  <ol class="text">
    <li>      Write a program that accepts the letter grades for a student, calculates the student&apos;s gpa, and prints it out, along with one of the following five messages:
      <p>Eligible<br>
        Ineligible, taking less than 4 classes<br>
        Ineligible, gpa below 2.0<br>
        Ineligible, gpa above 2.0 but has F grade (note: gpa &gt;= 2.0)<br>
        Ineligible, gpa below 2.0 and has F grade</p>
    </li>
<li>
  <p>Your program must use an appropriate sequence of nested if-else statements to print out the appropriate message.</p>
        </li>
    <li><p>The message &quot;Ineligible, taking less than 4 classes&quot; has priority over the other 3 ineligible cases.</p>
    </li>
  <li>
        <p>The class will not ask the user for how many grades are in a student&apos;s report card. The program will continue to read grades until a non-grade character is input. At this point, some type of loop will cease and the program prints the GPA value and the eligibility message.</p>
  </li>
  <li>
      <p>Example of run output: <code>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;GPA = 3.75 &#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;Eligible</code></p>
  </li>
  <li>
      <p>You do not have to print out any of the individual grades.</p>
  </li>
  <li>
    <p>Your program should allow input of grades in either upper or lower case. </p>
  </li>
  </ol>  <p><span class="subhead">Instructions:</span></p>
  <ol class="text">
	<li>	  Use these 6 sample report cards (with a grade for each academic class) as inputs for your run outputs:</li>
	</ol>
  <blockquote>
    <table width="300" border="0" align="center" cellpadding="3" cellspacing="0">
      <tr class="text">
        <td width="50%"><div align="left">B B C B F</div></td>
        <td width="50%"><div align="left">C B D D D C</div></td>
      </tr>
      <tr class="text">
        <td width="50%"><div align="left">C D C</div></td>
        <td width="50%"><div align="left">A A B A A B A</div></td>
      </tr>
      <tr class="text">
        <td width="50%"><div align="left">A B A</div></td>
        <td width="50%"><div align="left">D C F F D</div></td>
      </tr>
    </table>
    </blockquote>
  <p align="left">&#xA0;</p><br>  
  <br>  <table cellspacing="0" cellpadding="0" border="0">
    <tr>
      <td width="90%"><span class="header">LAB ASSIGNMENT A12.5</span></td>
      <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 16 of 18</nobr></font></td>
    </tr>
  </table>
  <p class="subhead">Payments</p>
  <p><span class="subhead">Background:</span></p>
  
  <p class="text">Borrowing money for expensive items has become a way of life for most Americans. To illustrate the high cost of borrowing and how such loans work, you will be writing a class to calculate the following monthly analysis of a loan.</p>
  <table width="500" border="0" cellspacing="0" cellpadding="3">
    <tr valign="top" class="text">
      <td><strong>Month</strong></td>
      <td><strong>Principal Loan Amt.</strong></td>
      <td><strong>Interest <br>
        (at 1%/month)</strong></td>
      <td><strong>Payment</strong></td>
      <td><strong>New Balance</strong></td>
    </tr>
    <tr class="text">
      <td>&#xA0;</td>
      <td>&#xA0;</td>
      <td>&#xA0;</td>
      <td>&#xA0;</td>
      <td>&#xA0;</td>
    </tr>
    <tr class="text">
      <td>1</td>
      <td>10000.00</td>
      <td>100.00</td>
      <td>300.00</td>
      <td>9800.00</td>
    </tr>
    <tr class="text">
      <td>2</td>
      <td>9800.00</td>
      <td>98.00</td>
      <td>300.00</td>
      <td>9598.00</td>
    </tr>
    <tr class="text">
      <td>3</td>
      <td>9598.00</td>
      <td>95.98</td>
      <td>300.00</td>
      <td>9393.98</td>
    </tr>
    <tr class="text">
      <td>4</td>
      <td>9393.98</td>
      <td> 93.94</td>
      <td>300.00</td>
      <td>9187.92</td>
    </tr>
    <tr class="text">
      <td>&#xA0;</td>
      <td>&#xA0;</td>
      <td>&#xA0;</td>
      <td>&#xA0;</td>
      <td>&#xA0;</td>
    </tr>
    <tr class="text">
      <td colspan="5">and many months later ...</td>
      </tr>
    <tr class="text">
      <td>&#xA0;</td>
      <td>&#xA0;</td>
      <td>&#xA0;</td>
      <td>&#xA0;</td>
      <td>&#xA0;</td>
    </tr>
    <tr class="text">
      <td>39</td>
      <td>809.46</td>
      <td>8.09</td>
      <td>300.00</td>
      <td>517.55</td>
    </tr>
    <tr class="text">
      <td>40</td>
      <td>517.55</td>
      <td>5.18</td>
      <td>300.00</td>
      <td>222.73</td>
    </tr>
    <tr class="text">
      <td>&#xA0;</td>
      <td>&#xA0;</td>
      <td>&#xA0;</td>
      <td>&#xA0;</td>
      <td>&#xA0;</td>
    </tr>
    <tr class="text">
      <td>Total:</td>
      <td>&#xA0;</td>
      <td>2222.73</td>
      <td>&#xA0;</td>
      <td>&#xA0;</td>
    </tr>
  </table>  <p class="text">The loan analysis above started with the following information:</p>
  <blockquote>
    <p class="text">Principal (amount borrowed) = 10000.00<br>
        Annual Interest Rate = 12.0 %<br>
        Monthly Payment = 300.00</p>
  </blockquote>  <p class="text">The monthly interest rate is found by dividing the annual rate among 12 months. For the above example the monthly rate is 1.0 %. The last three values of each line are calculated as follows:</p>
  <blockquote>
    <p class="text">Interest = Principal * Monthly Interest Rate<br>
        Payment = amount set at beginning of problem<br>
        New Balance = Principal + Interest - Payment</p>
  </blockquote>  <p class="text">The new balance becomes the starting principal amount for the next month. As you can see, progress toward decreasing the principal is slow at the beginning of the loan.</p>
  <p><span class="subhead">Assignment:</span></p>
  <p class="text">Write a class to represent a loan as described above using the five-column format. Your class must accomplish the following:</p>
  <ol>
    <li class="text">
        <p> Data input: The class should ask for the appropriate starting information. </p>
    </li>
    <li class="text">Printing of analysis: The class must print the month-by-month analysis until the remaining principal is less than the monthly payment. At the bottom of the analysis you must print the total interest paid to the lending institution.</li>
    </ol>  <p><span class="subhead">Instructions:</span></p>  <ol class="text">
      <li>Here are some sample data sets:
        <p class="text">Principal = 12000<br>
          Annual Interest Rate = 8.80<br>
          Monthly Payment = 500.00</p>
        <p class="text">Principal = 10000<br>
          Annual Interest Rate = 12.0<br>
          Monthly Payment = 300.00</p>
      </li>
    </ol>
    <p><span class="subhead">Extending the Lab:</span></p>
    <ol class="text">
      <li>To vary the assignment, we now want to save some money and earn interest. Suppose we wish to study the effect of time and compounding interest on investments. Add an option to ask the user for:
        <p> Starting Principal to invest<br>
  Annual Rate of Return (5%, 10%, etc)<br>
  Monthly Addition to the Principal<br>
  Number of Months to Iterate</p>
      </li>
    <li>
          <p>The printout will be similar except the column called &#x201C;payment&#x201D; will be changed to investment. You should still calculate and print out the total interest and final balance.</p>
    </li>
    <li>      This lab exercise should encourage you to start investing early in life.</li>
    </ol>
    <p>&#xA0;</p><br>  
  <br>  <table cellspacing="0" cellpadding="0" border="0">
    <tr>
      <td width="90%"><span class="header">LAB ASSIGNMENT A12.6</span></td>
      <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 17 of 18</nobr></font></td>
    </tr>
  </table>
  <p class="subhead">ParallelLines</p>
  <p><span class="subhead">Background:</span></p>
  
  <p class="text">In this lab, you will practice using nested <code>for</code> loops to recreate this image using the <code>DrawingTool</code> class:</p>
  <p class="text">To do this efficiently, there are a few suggestions to consider. First, there are eight rows each containing seven filled boxes. This suggests a nested <strong><code>for</code></strong> loop, like this:</p>
  <blockquote>
    <pre class="text"><code><strong>for</strong> (<strong>int</strong> row = 0; row &lt; 8; row++){<br>&#xA0;&#xA0;// calculate the start of the row of squares</code></pre>
    <p class="text"><code> <code> </code><code>&#xA0;&#xA0;</code>// calculate and add a horizontal offset<br>
          <br>
          <strong><code>&#xA0;&#xA0;</code>for</strong> (<strong>int</strong> col = 0; col &lt; 7; col++){<br>
          <code>&#xA0;&#xA0;</code>// draw the square<br>
          <code>&#xA0;&#xA0;</code>// calculate and position for the next square<br>
          <code>&#xA0;&#xA0;</code>}</code></p>
    <p class="text"><code> <code>&#xA0;&#xA0;</code>// calculate the location and draw the line<br>
        }</code></p>
    </blockquote>  <p class="text">Calculating the square position will take some work. You might want to make a quick sketch, with coordinates, to save frustration. Hint: there will be a negative x offset and a positive y offset to have the image start in the upper left corner as shown.</p>  <p class="text">The DrawingTool class includes a method for drawing filled rectangles:</p>
    <blockquote>
      <p class="text"><code>fillRect(<strong>double</strong> width, <strong>double</strong> height)</code></p>
    </blockquote>    <p class="text">For instance, with a <code>DrawingTool</code> called <code>pen</code>, the call <code>pen.fillRect(40, 40)</code> would create a 40x40 filled square centered about the current drawing position.</p>
    <p><span class="subhead">Assignment:</span></p>
  <ol>
    <li class="text">
      <p>Using the information given in the Background section above, write a class using nested <code>for</code> loops to display the image shown above.</p>
    </li>
  </ol>  <p>&#xA0;</p>
  <br>  
  <br>  <table cellspacing="0" cellpadding="0" border="0">
    <tr>
      <td width="90%"><span class="header">LAB ASSIGNMENT A12.7</span></td>
      <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 18 of 18</nobr></font></td>
    </tr>
  </table>
  <p class="subhead">GameLand</p>
  <p><span class="subhead">Background:</span></p>
  
  <p class="text">This exercise is based on the American Computer Science League - Intermediate Division, Contest #1, 1989-90.</p>
  <ol class="text">
    <li>
      <p>The board game GameLand is a very simple one that you will simulate on the computer.</p>
    </li>
    <li>
      <p>Two players begin the game on a square labeled as &#x201C;START.&#x201D; The goal of the game is to be the first player to reach the square labeled &#x201C;FINISH.&#x201D; There are 100 squares between START and FINISH.</p>
    </li>
    <li>
      <p>The two players take turns rolling two six-sided dice. A roll of 2 or 12 means that the player loses that turn and cannot move. Getting a roll of 7 means that the player moves backwards 7 spaces (but not beyond START). On all other rolls, the players must move forward an amount equal to the number of the roll.</p>
    </li>
    <li>
      <p>If one player lands on a square occupied by the other player, the player originally on that square gets bumped back to the START square. </p>
    </li>
    <li>
      <p>The game ends when one player wins by landing on or beyond the FINISH square.</p>
    </li>
  </ol>  <p><span class="subhead">Assignment:</span></p>
  <ol>
    <li class="text">
      <p>Write a program that simulates the activities of GameLand.</p>
    </li>
  <li class="text">      Make sure your two dice rolls are realistic. Remember, the results are not simply 1 through 12.</li>
  </ol>  <p>&#xA0;</p><br>  
  <br>
  <table cellspacing="0" cellpadding="0" border="0">
    <tr>
      <td width="90%"><span class="header">Summary/Review</span></td>
      <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 11 of 18</nobr></font></td>
    </tr>
  </table>
  <br>
  <p class="text">This lesson provides both syntax and strategies needed to build correct <strong><code>while and for</code></strong> loops. The terminology of loop construction will give us tools to build and debug conditional loops. We can use terms such as &quot;off-by-one&quot; errors or &quot;failure to maintain state.&quot; This is a critical topic, one that takes much time and practice to master. Learning to translate thoughts into computer algorithms is one of the more challenging aspects of programming. We solve repetitive and selection problems constantly without thinking about the sequence of events. Using pseudocode helps translate your thinking into code.</p>
  <br><br><br><h2>Chapter 13</h2><br>  
  <br>
  <table cellspacing="0" cellpadding="0" border="0">
    <tr>
      <td width="90%"><span class="header">A13 Introduction</span></td>
      <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 1 of 12</nobr></font></td>
    </tr>
  </table>
  <br>
  <p class="text">Java provides a structured approach for dealing with errors that can occur while a program is running. This approach is referred to as &#x201C;exception-handling.&#x201D; The word &#x201C;exception&#x201D; is meant to be more general than &#x201C;error.&#x201D; Exception-handling is used to keep a program running even though an error is encountered that would normally stop the program. This lesson will explore file input and output (I/O) as an example of how exceptions are used.</p>
  <p class="text">The key topics for this lesson are:</p>
  <ol type="A" class="text">
    <li class="text"><a href="A13-A.html">Exceptions</a></li>
    <li class="text"><a href="A13-B.html">Handling Exceptions</a></li>
  <li class="text"><a href="A13-C.html">Exception Messages</a></li>
  <li class="text"><a href="A13-D.html">Throwing Exceptions</a></li>
  <li class="text"><a href="A13-E.html">Reading From a File</a></li>
  <li class="text"><a href="A13-F.html">Writing to a File</a></li>
  </ol><br>  
  <br>
  <table cellspacing="0" cellpadding="0" border="0">
    <tr>
      <td width="90%"><span class="header"><a href="../vocabulary/index_A.html#A13">A13 Vocabulary</a></span></td>
      <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 2 of 12</nobr></font></td>
    </tr>
  </table>
  <br>
  <table width="500" border="0">
    <tr class="text">
      <td width="50%"><strong><code>catch</code></strong></td>
      <td width="50%">ERROR</td>
    </tr>
    <tr class="text">
      <td width="50%">EXCEPTION</td>
      <td width="50%"><strong><code>try</code></strong></td>
    </tr>
    <tr class="text">
      <td width="50%">&#xA0;</td>
      <td width="50%">&#xA0;</td>
    </tr>
    <tr class="text">
      <td width="50%">&#xA0;</td>
      <td width="50%">&#xA0;</td>
    </tr>
    <tr class="text">
      <td width="50%">&#xA0;</td>
      <td width="50%">&#xA0;</td>
    </tr>
    <tr class="text">
      <td width="50%">&#xA0;</td>
      <td width="50%">&#xA0;</td>
    </tr>
    <tr>
      <td width="50%">&#xA0;</td>
      <td width="50%">&#xA0;</td>
    </tr>
  </table>
  <br>
  <br>  
  <br>
  <table cellspacing="0" cellpadding="0" border="0">
    <tr>
      <td width="90%"><span class="header">A. Exceptions</span></td>
      <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 3 of 12</nobr></font></td>
    </tr>
  </table>
  <br>
  <ol class="text">
    <li><p>When a Java program performs an illegal operation, a special event known as an <em>exception</em> occurs. An exception represents a problem that the compiler was unable to detect before the execution of the program. This is called a run-time error. An example of this would be dividing by zero. The compiler often cannot tell before the program runs that a denominator would be zero at some later point and therefore cannot give an error before the program is run.</p></li>
  <li>
    <p>An exception is an object that holds information about a run-time error. The programmer can choose to ignore the exception, fix the problem and continue processing, or abort the execution of the code. An <em>error</em> is when a program does not do what it was intended to do. Compile time errors occur when the code entered into the computer is not valid. Logic errors are when all the code compiles correctly but the logic behind the code is flawed. Run-time errors happen when Java realizes during execution of the program that it cannot perform an operation.</p>
  </li>
  <li><p>Java provides a way for a program to detect that an exception has occurred and execute statements that are designed to deal with the problem. This process is called <em>exception handling</em>. If you do not deal with the exception, the program will stop execution completely and send an exception message to the console.</p></li>
      <li><p>Common exceptions include:</p>
        - <code>ArithmeticException</code><br>
        - <code>NullPointerException</code><br>
        - <code>ArrayIndexOutOfBoundsException</code><br>
        - <code>ClassCastException</code><br>
        - <code>IOException</code>
        <p>For example, if you try to divide by zero, this causes an <code>ArithmeticException</code>. Note that in the code section below, the second <code>println()</code> statement will not execute. Once the program reaches the divide by zero, the execution will be halted completely and a message will be sent to the console:</p>
        <blockquote>
          <p><code><strong>int</strong> numerator = 23;<br>
              <strong>int</strong> denominator = 0;</code></p>
          <p><code>// the following line produces an ArithmeticException<br>
              System.out.println(numerator/denominator);</code></p>
          <p><code>System.out.println(_This text will not print_);</code></p>
        </blockquote>
        <p>A <code>NullPointerException</code> occurs if you use a null reference where you need an object reference. For example,</p>
        <blockquote>
          <p><code>String name = <strong>null</strong>;</code></p>
          <p><code>// the following line produces a NullPointerException<br>
              <strong>int</strong> i = name.length();<br>
              System.out.println(_This text will not print_);</code></p>
        </blockquote>
        <p>Since <code>name</code> has been declared to be a reference to a <code>String</code> and has the value <code>null</code>, indicating that it is not referring to any <code>String</code> at this time, an attempt to call a method within <code>name</code>, such as <code>name.length()</code>, will cause a <code>NullPointerException</code>. If you encounter this exception, look for an object that has been declared but has not been instantiated.</p>
      </li>
  </ol>
  <p>&#xA0;</p>
  <br><br>  
  <table cellspacing="0" cellpadding="0" border="0">
    <tr>
      <td width="90%"><span class="header">B. Handling Exceptions</span></td>
      <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 4 of 12</nobr></font></td>
    </tr>
  </table>
  <br>
  <ol class="text">
    <li>      
      <p>There are three ways of handling a possible exception occurrence (we say that the exception is <em>thrown</em>). In some cases, such as when there is a possibility that a divide by zero exception might occur, the programmer has the option of not dealing with the exception at all. This can be useful in situations where the programmer has already taken steps to ensure that a denominator never becomes zero. The programmer may also attempt to fix the problem or skip over the problem. To do either of these, the programmer needs to catch any exception that may be thrown. To <em>catch</em> an exception, one must anticipate where the exception might occur and enclose that code in a <code>try</code> block. The try block is followed by a <code>catch</code> block that catches the exception (if it occurs) and performs the desired action.</p>
    </li>
<li><p>The general form of a try-catch statement is:</p>
  <blockquote>
    <p><code><strong>try</strong>{<br>
try-block<br>
} <strong>catch</strong> (exception-type identifier){<br>
catch-block<br>
}</code></p>
  </blockquote>
<ol type="a">
            <li>
              <p>The try-block refers to a statement or series of statements that might throw an exception. If no exception is thrown, all of the statements within the try-block will be executed. Once an exception is thrown, however, all of the statements following the exception in the try-block will be skipped.</p>
            </li>
            <li>
              <p>The catch-block refers to a statement or series of statements to be executed if the exception is thrown. A try block can be followed by more than one catch block. When an exception is thrown inside a try block, the first matching catch block will handle the exception.</p>
            </li>
          <li>
              <p>exception-type specifies what kind of exception object the catch block should handle. This can be specific or it can be general, i.e. IOException or just Exception. Exception by itself will catch any type of exception that comes its way.</p>
          </li>
          <li>
            <p>identifier is an arbitrary variable name used to refer to the exception-type object. Any operations done on the exception object or any methods called will use this identifier</p>
          </li>
  </ol>
      </li>
    <li><p>The <code>try</code> and <code>catch</code> blocks work in a very similar manner to the <code>if-else</code> statement and can be placed anywhere that normal code can be placed.</p></li>
  </ol>  <ol class="text" start="4">
    <li>If an exception is thrown anywhere in the <code>try</code> block which matches one of the exception-types named in a <code>catch</code> block, then the code in the appropriate catch block is executed. If the <code>try</code> block executes normally, without an exception, the <code>catch</code> block is ignored.</li>
    </ol>  <ol class="text" start="5">
    <li>Here is an example of try and catch:
      <blockquote>
        <p align="left" class="text"><code><strong>int</strong> quotient;<br>
            <strong>int</strong> numerator = 23;<br>
            <strong>int</strong> denominator = 0;<br>
            <strong>try</strong>{<br>
    &#xA0;&#xA0;quotient = numerator/denominator;<br>
    <code>&#xA0;&#xA0;</code>System.out.println(&quot;The answer is: &quot; + quotient);<br>
    } <strong>catch</strong> (ArithmeticException e){<br>
    <code>&#xA0;&#xA0;</code>System.out.println(&quot;Error: Division by zero&quot;);<br>
    }</code></p>
      </blockquote>
    </li>
  </ol>  <blockquote>
    <p align="left" class="text">The value of <code>denominator</code> is zero so an <code>ArithmeticException</code> will be thrown whenever <code>numerator</code> is divided by <code>denominator</code>. The <code>catch</code> block will catch the exception and print an error message. The <code>println()</code> statement in the <code>try</code> block will not be executed because the exception occurs before the program reaches that line of code. Once an exception is encountered, the rest of the lines of code in the try-block will be ignored. If the value of <code>denominator</code> is not zero, the code in the <code>catch</code> block will be ignored and the <code>println()</code> statement will output the result of the division. Either way, the program continues executing at the next statement after the <code>catch</code> block.</p>
    </blockquote>  <p align="left" class="text">&#xA0;</p><br><br>
<table cellspacing="0" cellpadding="0" border="0">
  <tr>
    <td width="90%"><span class="header">C. Exception Messages</span></td>
    <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 5 of 12</nobr></font></td>
  </tr>
</table>
  <br>
<ol class="text">
    <li>
      <p>If a program does not handle exceptions at all, it will stop the program and produce a message that describes the exception and where it happened. This information can be used to help track down the cause of a problem.</p>
      </li>
</ol>  <ol class="text" start="2">
      <li>The code shown below throws an <code>ArithmeticException</code> when the program tries to divide by zero. The program crashes and prints out information about the exception:
        <blockquote>
          <p><code><strong>int</strong> numerator = 23;<br>
              <strong>int</strong> denominator = 0;</code></p>
          <p><code>// the following line produces an ArithmeticException<br>
              System.out.println(numerator/denominator);</code></p>
          <p><code>System.out.println(&quot;This text will not print&quot;);</code></p>
        </blockquote>
        <p><em>Run Output:</em></p>
        </li>
<blockquote>
        <p><code>Exception in thread &quot;main&quot; java.lang.ArithmeticException: / by zero <br>
            at DivideByZero.main(DivideByZero.java:10)</code></p>
        </blockquote>
</ol>
<blockquote>
  <p class="text">The first line of the output tells which exception was thrown and gives some information about why it was thrown. &#x201C;DivideByZero.main&#x201D; indicates that the exception occurred in the main method of the DivideByZero class. In the parentheses, the specific file name and line number are given so that the programmer can find where their code went wrong (in the example above, the exception occurred on line 10 of a Java file, DivideByZero.java). This is the line where Java found a problem. The actual root cause of the problem may be a line or two ahead of line 10.</p>
  <p class="text">The rest of the output tells where the exception occurred and is referred to as a call stack trace. In this case, there is only one line in the <em>call stack trace</em>, but there could be several, depending on where the exception originated. </p>
</blockquote>
<ol class="text" start="3">
  <li>When exceptions are handled by a program, it is possible to obtain information about an exception by referring to the &#x201C;exception object&#x201D; that Java creates in response to an exception condition. Every exception object contains a String that can be accessed using the <code>getMessage</code> method as follows:
    <blockquote>
      <p align="left" class="text"><code><strong>try</strong>{<br>
  &#xA0;&#xA0;quotient = numerator/denominator;<br>
  &#xA0;&#xA0;System.out.println(&quot;The answer is: &quot; + quotient);<br>
  } <strong>catch</strong> (ArithmeticException e){<br>
  System.out.println(e.getMessage());<br>
  }</code></p>
    </blockquote>
    <p>If a divide by zero error occurs, an exception is thrown and the following message is displayed:</p>
        </li>
<blockquote>
    <p><code>/ by zero</code></p>
  </blockquote>
        <li>
          <p>Printing the value returned by <code>getMessage</code> can be useful in situations where we are unsure of the type of error or its cause.</p>
        </li>
          <li>If an exception is unknown by your Java class, you may need to import the appropriate exception (just like you would import any other class you wanted your class to know about). For example, the <code>ArithmeticException</code> is a standard Java class and no import statement is needed for it. However, <code>IOException</code> is part of the <code>java.io</code> package and must therefore be imported before it is used.</li>
</ol>
<p>&#xA0;</p><br><br>
<table cellspacing="0" cellpadding="0" border="0">
  <tr>
    <td width="90%"><span class="header">D. Throwing Exceptions</span></td>
    <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 6 of 12</nobr></font></td>
  </tr>
</table>
  <br>
  <ol class="text">
    <li><p>There are times when it makes sense for a program to deliberately throw an exception. This is the case when the program discovers some sort of exception or error condition, but there is no reasonable way to handle the error at the point where the problem is discovered. The program can throw an exception in the hope that some other part of the program will catch and handle the exception.</p>      
	</li>
<li>  To throw an exception use a <strong><code>throw</code></strong> statement. This is usually done with an if statement. The syntax of the throw statement is:
  <blockquote>
    <p><code><strong>throw</strong> <em>exception-object;</em></code></p>
  </blockquote>
</li>
<li><p>For example, the following statement throws an <code>ArithmeticException</code>:</p>
      </li>
  </ol>
  <blockquote class="text">
    <p class="text"><code>if(number == 0){ <br>
  &#xA0;&#xA0;<strong>throw new</strong> ArithmeticException(&quot;Division by zero&quot;);<br>
      }</code></p>
    <p>The exception object is created with the new operator right in the <code>throw</code> statement. Exception classes in Java have a default constructor that takes no arguments and a constructor that takes a single <code>String</code> argument. If provided, this <code>String</code> appears in the exception message when the exception occurs.</p>
  </blockquote>
  <p>&#xA0;</p>
  <br><br>
<table cellspacing="0" cellpadding="0" border="0">
  <tr>
    <td width="90%"><span class="header">E. Reading From a File</span></td>
    <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 7 of 12</nobr></font></td>
  </tr>
</table>
  <br>
<ol class="text">
	<li><p>Reading textual data from a file is very similar in many ways to reading input from the keyboard. The Scanner class and all of its methods remain the same. However, you must also import the classes <code>java.io.File</code> and <code>java.io.IOException</code>. Also, the way in which you use the <code>Scanner</code> class constructor changes.</p></li>
</ol>
<ol class="text" start="2">
	<li>The <code>java.io.File</code> is a holder class that can take a <code>String</code> representing the path to a file on your computer. Creating a Scanner object that reads from a file is as simple as:
	  <blockquote>
	    <p><code>Scanner in = <strong>new</strong> Scanner(new File(&#x201C;test.txt&#x201D;));<br>
	      File f = <strong>new</strong> File(&#x201C;C:\MyDocuments\Java\tester.txt&#x201D;);<br>
	      Scanner in2 = <strong>new</strong> Scanner(f);</code></p>
	    </blockquote>
	  <p>The first line assumes that there is a file named &#x201C;test.txt&#x201D; in the directory or folder where you run your java files. The second line shows an example of creating the File object in its own line of code. It also shows the File being created with the full path to the file. This would be used if your text file was not in the same directory as your Java files. But what happens if the file that you are looking for doesn&#x2019;t exist or has some other status that prevents it from being read? This causes an exception to be thrown!</p>
	  </li>
<li>Scanner will take no responsibility in handling the exception, so every time that you want to use Scanner with a file, you will have to use a try-catch block. A full example is shown below:
  <blockquote>
    <p><code>Scanner in;<br>
        <strong>try</strong>{<br>
      &#xA0;&#xA0;&#xA0;&#xA0;&#xA0;in = <strong>new</strong> Scanner(new File(&quot;test.txt&quot;));<br>
      &#xA0;&#xA0;&#xA0;&#xA0;&#xA0;String test = in.nextLine();<br>
      &#xA0;&#xA0;&#xA0;&#xA0;&#xA0;System.out.println(test);<br>
      }<strong>catch</strong>(IOException i){<br>
      &#xA0;&#xA0;&#xA0;&#xA0;&#xA0;System.out.println(&quot;Error: &quot; + i.getMessage());<br>
      }</code></p>
  </blockquote>
</li>
<li>        When reading a large amount of data from a file, it is often useful to know whether there is any more data in the file to read. Reading from a file which has no more data will give you a <code>NoSuchElementException</code> and stop your program. The Scanner class has several methods for determining if there is any more data in the file to be read: <code>hasNext()</code>, <code>hasNextDouble()</code>, and &#xA1; will be the methods most useful for you. If there is anything still to come, <code>hasNext()</code> will return true, while <code>hasNextDouble()</code> will return true only if a valid double is next and <code>hasNextInt()</code> will return true only if an int value is next. Using a simple while loop, you can easily read in data until the end of a file.
  <blockquote>
    <p><code><strong>while</strong>(in.hasNext()){<br>
      &#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;System.out.println(in.next());<br>
      }</code></p>
  </blockquote>
</li>
  </ol>
<p>&#xA0;</p>
<br><br>
<table cellspacing="0" cellpadding="0" border="0">
  <tr>
    <td width="90%"><span class="header">F. Writing to a File</span></td>
    <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 8 of 12</nobr></font></td>
  </tr>
</table>
  <br>
<ol class="text">
	<li>
	  <p>Creating your own files is a little bit trickier than reading from them. There are two basic ways to write data to files: raw bytes and character streams. Raw byte writing is useful for items such as pictures. Character streams are used for writing plain text. This curriculum will focus only on character streams.</p>
	</li>
</ol>
<ol class="text" start="2">
	<li>	  This curriculum uses the java.io.FileWriter class. It has two basic constructors:
      <blockquote>
        <p><code>FileWriter file = <strong>new</strong> FileWriter(&#x201C;test.txt&#x201D;);<br>
	        FileWriter file2 = <strong>new</strong> FileWriter(&#x201C;test2.txt&#x201D;, true);</code></p>
      </blockquote>
      <p>The first constructor opens a basic FileWriter object that points at the file &#x201C;test.txt&#x201D; in the same directory where the Java files are being run. When this file is first opened and written to, all of the data that was previously stored in the file will be erased. The second constructor indicates that the new data being sent to the file will be appended to the end of the file. In either case, if the file does not exist, then Java will attempt to create a new file with the indicated name and at the indicated location.</p>
	</li>
<li>  Writing data to the file is done by using the FileWriter.write(<code>String, int, int</code>) method. The <code>String</code> is the data that will be written to the file. The first <code>int</code> is where to start writing the data in the <code>String</code>. The second <code>int</code> indicates how many characters of the <code>String</code> to actually write. For example:
  <blockquote>
    <p><code>String one = &#x201C;#Hello!!!&#x201D;;<br>
      FileWriter out = <strong>new</strong> FileWriter(&#x201C;test.txt&#x201D;);<br>
      out.write(one, 1, 5);</code></p>
  </blockquote>
<p>This will write only &#x201C;Hello&#x201D; to the file &#x201C;test.txt.&#x201D; </p>
</li>
<li>  Merely opening a file and writing to it is not enough to store your data in most cases. You know from personal experience that if you don&#x2019;t save your work in a word processor, your work will not be there the next time you start up your computer. Data must be saved. This is done with FileWriter by calling the close() method when you are done writing data. This &#x201C;closes&#x201D; the output stream to the file and saves your data.
        <blockquote>
          <p><code>out.write(one, 1, 5);<br>
            out.close();</code></p>
        </blockquote>
  </li>
  <li>  What if there is some error in opening the file? That&#x2019;s right - an exception is thrown and it must be dealt with just like in the Scanner class.
          <blockquote>
            <p><code>String one = &#x201C;Hello World!!!&#x201D;;<br>
              FileWriter out;<br>
              <strong>try</strong>{<br>
      &#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;out = new FileWriter(&#x201C;test.txt&#x201D;);<br>
      &#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;out.write(one, 0, one.length());<br>
      &#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;out.close();<br>
              }<strong>catch</strong>(IOException i){<br>
      &#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;System.out.println(&#x201C;Error: &#x201C; + i.getMessage());<br>
            }</code></p>
          </blockquote>
    </li>
  <li>
          <p>There is no equivalent to <code>println()</code> with the <code>FileWriter</code> class, so any newlines that you wish to create must be done with the &#x2018;<code>\n</code>&#x2019; character.</p>
      </li>
  <li>  FileWriter only deals with writing Strings to the text files, which creates a little bit of a problem with writing numeric data. However, we can use the shortcut learned earlier in Lesson A10, <em>Strings</em> to change our other data types to Strings.
          <blockquote>
            <p><code>String temp;<br>
              int a = 5;<br>
              temp = &#x201C;&#x201D; + a + &#x201C;\n&#x201D;;<br>
              out.write(temp, 0, temp.length());<br>
              double p = 3.14;<br>
              temp = &#x201C;&#x201D; + p + &#x201C;\n&#x201D;;<br>
              out.write(temp, 0, temp.length());<br>
              boolean test = true;<br>
              temp = &#x201C;&#x201D; + test + &#x201C;\n&#x201D;;<br>
            out.write(temp, 0, temp.length());</code></p>
          </blockquote>
      </li>
  <li>  Because <code>FileWriter</code> requires you to specify how many characters of the given <code>String</code> to print out, you must be careful with the values that you give it. If the <code>int</code> value that you send is bigger than the <code>String</code> itself, you will get a <code>StringIndexOutOfBoundsException</code> when the <code>FileWriter</code> object tries to access characters in the String which do not exist. An easy way to prevent this from ever occurring is to always create a <code>String</code> object before the write method is called with the data you wish to output, place that <code>String</code> in the call to write, and use that <code>String&#x2019;s length()</code> method for how many characters to print.
          <blockquote>
            <p><code>String one = &#x201C;Hello World!!!\n&#x201D;;<br>
            Out.write(one, 0, one.length());</code></p>
          </blockquote>
        </li>
</ol>
<p>&#xA0;</p>
<br>  
  <br>
  <table cellspacing="0" cellpadding="0" border="0">
    <tr>
      <td width="90%"><span class="header">Summary/Review</span></td>
      <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 9 of 12</nobr></font></td>
    </tr>
  </table>
  <br>
  <p class="text">Exceptions provide a clean way to detect and handle unexpected situations. When a program detects an error, it throws an exception. When an exception is thrown, control is transferred to the appropriate exception handler. By defining a method that catches the exception, the programmer can write the code to handle the error. Exceptions are used heavily when dealing with File I/O because there are many situations that can turn dangerous when reading and writing data directly from a hard drive.</p>
  <br><br><br><h2>Chapter 14</h2><br>  
  <br>
  <table cellspacing="0" cellpadding="0" border="0">
    <tr>
      <td width="90%"><span class="header">A14 Introduction</span></td>
      <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 1 of 7</nobr></font></td>
    </tr>
  </table>
  <br>
  <p class="text">Conditional loops often prove to be one of the most difficult control structures to work with. This lesson will give you more strategies that can be used for defining the beginning and ending conditions for loops in your programs.</p>
  <p class="text">The key topics for this lesson are:</p>
  <ol type="A" class="text">
    <li class="text"><a href="A14-A.html">Negations of Boolean Assertions</a></li>
    <li class="text"><a href="A14-B.html">Boolean Algebra and DeMorgan&#x2019;s Laws</a></li>
  <li class="text"><a href="A14-C.html">Application of DeMorgan&#x2019;s Laws</a></li>
  </ol><br>  
  <br>
  <table cellspacing="0" cellpadding="0" border="0">
    <tr>
      <td width="90%"><span class="header"><a href="../vocabulary/index_A.html#A14">A14 Vocabulary</a></span></td>
      <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 2 of 7</nobr></font></td>
    </tr>
  </table>
  <br>
  <table width="500" border="0">
    <tr class="text">
      <td width="50%">ASSERTION</td>
      <td width="50%">BOOLEAN ASSERTIONS</td>
    </tr>
    <tr class="text">
      <td width="50%">BOOLEAN ALGEBRA</td>
      <td width="50%">DE MORGAN&apos;S LAWS</td>
    </tr>
    <tr class="text">
      <td width="50%">&#xA0;</td>
      <td width="50%">&#xA0;</td>
    </tr>
    <tr class="text">
      <td width="50%">&#xA0;</td>
      <td width="50%">&#xA0;</td>
    </tr>
    <tr class="text">
      <td width="50%">&#xA0;</td>
      <td width="50%">&#xA0;</td>
    </tr>
    <tr class="text">
      <td width="50%">&#xA0;</td>
      <td width="50%">&#xA0;</td>
    </tr>
    <tr>
      <td width="50%">&#xA0;</td>
      <td width="50%">&#xA0;</td>
    </tr>
  </table>
  <br>
  <br>  
  <br>
  <table cellspacing="0" cellpadding="0" border="0">
    <tr>
      <td width="90%"><span class="header">A. Negations of Boolean Assertions</span></td>
      <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 3 of 7</nobr></font></td>
    </tr>
  </table>
  <br>
  <ol class="text">
    <li><p>A Boolean assertion is simply an expression that results in a true or false answer. For example,</p>
      <table width="300" border="0" align="center" cellpadding="3" cellspacing="0">
        <tr class="text">
          <td><div align="center"><code>a &gt; 5</code></div></td>
          <td><div align="center"><code>0 == b</code></div></td>
          <td><div align="center"><code>a &lt;= b</code></div></td>
        </tr>
      </table>
    <p>are all statements that will result in a true or false answer.</p>
    </li>
<li><p>To negate a Boolean assertion means to write the opposite of a given Boolean assertion. For example, given the following Boolean assertions noted as A, the corresponding negated statements are the result of applying the <code>!</code> operator to A.</p>
  <table width="300" border="0" cellspacing="0" cellpadding="3">
    <tr class="text">
      <td><div align="center"><u><strong>A</strong></u></div></td>
      <td><div align="center"><u><strong>!A</strong></u></div></td>
    </tr>
    <tr class="text">
      <td><div align="center"></div></td>
      <td><div align="center"></div></td>
    </tr>
    <tr class="text">
      <td><div align="center">5 == x</div></td>
      <td><div align="center">5 != x</div></td>
    </tr>
    <tr class="text">
      <td><div align="center">x &lt; 5</div></td>
      <td><div align="center">x &gt;= 5</div></td>
    </tr>
    <tr class="text">
      <td><div align="center">x &gt;= 5</div></td>
      <td><div align="center">x &lt; 5</div></td>
    </tr>
  </table><br>
</li>
<li><p>Notice that negations of Boolean assertions can be used to re-write code. For example:</p></li>
      </ol>
  <blockquote class="text">
    <p><code><strong>if</strong> (!(x &lt; 5))<br>
&#xA0;&#xA0;&#xA0;// do something...</code></p>
  <p>can be rewritten as</p>
    <p><code><strong>if</strong> (x &gt;= 5)<br>
  &#xA0;&#xA0;&#xA0;// do something ...</code></p>
    <p>This is important because we understand positive statements much more easily than statements that contain one or more !s.</p>
  </blockquote>  <p>&#xA0;</p>
  <br><br>  
  <table cellspacing="0" cellpadding="0" border="0">
    <tr>
      <td width="90%"><span class="header">B. Boolean Algebra and DeMorgan&#x2019;s Laws</span></td>
      <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 4 of 7</nobr></font></td>
    </tr>
  </table>
  <br>
  <ol class="text">
    <li>Boolean Algebra is a branch of mathematics devoted to the study of Boolean values and operators. Boolean Algebra consists of these fundamental operands and operators:
      <p>operands (values): <strong><code>true</code></strong>, <strong><code>false</code></strong></p>
    <p>operators: and (<code>&amp;&amp;</code>), or (<code>||</code>), not (<code>!</code>)</p>
      <p>(Note: Java has other Boolean operators, such as <code>^</code> (XOR - &#x201C;exclusive or&#x201D;) and equivalence. This curriculum does not cover these other operators because they are not part of the AP subset.)</p>
    </li>
<li>There are many identities that have been developed to use with compound Boolean expressions. Two of the more useful identities are DeMorgan&apos;s Laws, which are used to negate compound Boolean expressions.
  <p>DeMorgan&#x2019;s Laws:</p>
<p><code>!(A || B) -&gt; ! A &amp;&amp; ! B</code></p>
  <p><code>!(A &amp;&amp; B) -&gt; ! A || ! B</code></p>
  <p>The symbols A and B represent the Boolean values, <strong><code>true</code></strong> or <strong><code>false</code></strong>.</p>
</li>
<li><p>Here is the truth table that proves the first DeMorgan&#x2019;s Law.</p>
        </li>
  </ol>
  <blockquote class="text">
    <table width="600" border="0" cellspacing="0" cellpadding="0">
      <tr>
        <td bgcolor="#000000"><table width="100%" border="0" cellspacing="1" cellpadding="3">
          <tr bgcolor="#FFFFFF" class="text">
            <td width="16%"><div align="center"><strong><code>A</code></strong></div></td>
            <td width="16%"><div align="center"><strong><code>B</code></strong></div></td>
            <td width="4%">&#xA0;</td>
            <td width="16%"><div align="center"><strong><code>!(A||B)</code></strong></div></td>
            <td width="16%"><div align="center"><strong><code>!A</code></strong></div></td>
            <td width="16%"><div align="center"><strong><code>!B</code></strong></div></td>
            <td width="16%"><div align="center"><strong><code>!A&amp;&amp;!B</code></strong></div></td>
          </tr>
          <tr bgcolor="#FFFFFF" class="text">
            <td width="16%"><div align="center"><code>&#xA0;</code></div></td>
            <td width="16%"><div align="center"><code></code></div></td>
            <td width="4%"><code></code></td>
            <td width="16%"><div align="center"><code></code></div></td>
            <td width="16%"><div align="center"><code></code></div></td>
            <td width="16%"><div align="center"><code></code></div></td>
            <td width="16%"><div align="center"><code></code></div></td>
          </tr>
          <tr bgcolor="#FFFFFF" class="text">
            <td width="16%"><div align="center"><code>true</code></div></td>
            <td width="16%"><div align="center"><code>true</code></div></td>
            <td width="4%"><code></code></td>
            <td width="16%"><div align="center"><code>false</code></div></td>
            <td width="16%"><div align="center"><code>false</code></div></td>
            <td width="16%"><div align="center"><code>false</code></div></td>
            <td width="16%"><div align="center"><code>false</code></div></td>
          </tr>
          <tr bgcolor="#FFFFFF" class="text">
            <td width="16%"><div align="center"><code>true</code></div></td>
            <td width="16%"><div align="center"><code>false</code></div></td>
            <td width="4%"><code></code></td>
            <td width="16%"><div align="center"><code>false</code></div></td>
            <td width="16%"><div align="center"><code>false</code></div></td>
            <td width="16%"><div align="center"><code>true</code></div></td>
            <td width="16%"><div align="center"><code>false</code></div></td>
          </tr>
          <tr bgcolor="#FFFFFF" class="text">
            <td width="16%"><div align="center"><code>false</code></div></td>
            <td width="16%"><div align="center"><code>true</code></div></td>
            <td width="4%"><code></code></td>
            <td width="16%"><div align="center"><code>false</code></div></td>
            <td width="16%"><div align="center"><code>true</code></div></td>
            <td width="16%"><div align="center"><code>false</code></div></td>
            <td width="16%"><div align="center"><code>false</code></div></td>
          </tr>
          <tr bgcolor="#FFFFFF" class="text">
            <td width="16%"><div align="center"><code>false</code></div></td>
            <td width="16%"><div align="center"><code>false</code></div></td>
            <td width="4%"><code></code></td>
            <td width="16%"><div align="center"><code>true</code></div></td>
            <td width="16%"><div align="center"><code>true</code></div></td>
            <td width="16%"><div align="center"><code>true</code></div></td>
            <td width="16%"><div align="center"><code>true</code></div></td>
          </tr>
        </table></td>
      </tr>
    </table>
    <p>Notice that columns with the titles <u>! (A || B)</u> and <u>! A &amp;&amp; ! B</u> result in the same answers.</p>
    </blockquote>
  <ol class="text" start="4">
    <li><p>Following is the truth table that proves the second DeMorgan&apos;s Law.</p>
    <table width="600" border="0" cellspacing="0" cellpadding="0">
        <tr>
          <td bgcolor="#000000"><table width="100%" border="0" cellspacing="1" cellpadding="3">
              <tr bgcolor="#FFFFFF" class="text">
                <td width="16%"><div align="center"><strong><code>A</code></strong></div></td>
                <td width="16%"><div align="center"><strong><code>B</code></strong></div></td>
                <td width="4%">&#xA0;</td>
                <td width="16%"><div align="center"><code><strong>!(A&amp;&amp;B)</strong></code></div></td>
                <td width="16%"><div align="center"><strong><code>!A</code></strong></div></td>
                <td width="16%"><div align="center"><strong><code>!B</code></strong></div></td>
                <td width="16%"><div align="center"><strong><code>!A||!B</code></strong></div></td>
              </tr>
              <tr bgcolor="#FFFFFF" class="text">
                <td width="16%"><div align="center"><code>&#xA0;</code></div></td>
                <td width="16%"><div align="center"><code></code></div></td>
                <td width="4%"><code></code></td>
                <td width="16%"><div align="center"><code></code></div></td>
                <td width="16%"><div align="center"><code></code></div></td>
                <td width="16%"><div align="center"><code></code></div></td>
                <td width="16%"><div align="center"><code></code></div></td>
              </tr>
              <tr bgcolor="#FFFFFF" class="text">
                <td width="16%"><div align="center"><code>true</code></div></td>
                <td width="16%"><div align="center"><code>true</code></div></td>
                <td width="4%"><code></code></td>
                <td width="16%"><div align="center"><code>false</code></div></td>
                <td width="16%"><div align="center"><code>false</code></div></td>
                <td width="16%"><div align="center"><code>false</code></div></td>
                <td width="16%"><div align="center"><code>false</code></div></td>
              </tr>
              <tr bgcolor="#FFFFFF" class="text">
                <td width="16%"><div align="center"><code>true</code></div></td>
                <td width="16%"><div align="center"><code>false</code></div></td>
                <td width="4%"><code></code></td>
                <td width="16%"><div align="center"><code>true</code></div></td>
                <td width="16%"><div align="center"><code>false</code></div></td>
                <td width="16%"><div align="center"><code>true</code></div></td>
                <td width="16%"><div align="center"><code>true</code></div></td>
              </tr>
              <tr bgcolor="#FFFFFF" class="text">
                <td width="16%"><div align="center"><code>false</code></div></td>
                <td width="16%"><div align="center"><code>true</code></div></td>
                <td width="4%"><code></code></td>
                <td width="16%"><div align="center"><code>true</code></div></td>
                <td width="16%"><div align="center"><code>true</code></div></td>
                <td width="16%"><div align="center"><code>false</code></div></td>
                <td width="16%"><div align="center"><code>true</code></div></td>
              </tr>
              <tr bgcolor="#FFFFFF" class="text">
                <td width="16%"><div align="center"><code>false</code></div></td>
                <td width="16%"><div align="center"><code>false</code></div></td>
                <td width="4%"><code></code></td>
                <td width="16%"><div align="center"><code>true</code></div></td>
                <td width="16%"><div align="center"><code>true</code></div></td>
                <td width="16%"><div align="center"><code>true</code></div></td>
                <td width="16%"><div align="center"><code>true</code></div></td>
              </tr>
          </table></td>
        </tr>
      </table>
      <p>Notice that columns with the titles <u>! (A &amp;&amp; B)</u> and <u>! A || ! B</u> result in the same answers.</p>
    </li>
<li>    Here is a good way to think about both of DeMorgan&#x2019;s Laws. Notice that it is similar to the distributive postulate in mathematics. The not operator is distributed through both terms inside of the parentheses, except that the operator switches from <em>and</em> to <em>or</em>, or vice versa.
          <p><code>!(A &amp;&amp; B) -&gt; ! A || ! B</code></p>
        <p><code>!(A || B) -&gt; ! A &amp;&amp; ! B</code></p>
    </li>
  </ol>  <p>&#xA0;</p><br><br>
<table cellspacing="0" cellpadding="0" border="0">
  <tr>
    <td width="90%"><span class="header">C. Application of DeMorgan&#x2019;s Laws</span></td>
    <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 5 of 7</nobr></font></td>
  </tr>
</table>
  <br>
<ol class="text">
    <li>      The casino game of craps involves rolling a pair of dice. The rules of the game are as follows. (Refer to Lesson A6 if you need to review the Random class)
      <p>- If you roll a 7 or 11 on the first roll, you win.<br>
        - If you roll a 2, 3, or 12 on the first roll, you lose.<br>
        - Otherwise, rolling a 4, 5, 6, 8, 9, or 10 establishes what is called the point value.<br>
        - If you roll the point value before you roll a 7, you win. If you roll a 7 before you match the point value, you lose.<br>
        - After the point value has been matched, or a 7 terminates the game, play resumes from the top.</p>
    </li>
<li><p>The following sequences of dice rolls give these results.</p>
          <table width="250" border="0" cellspacing="0" cellpadding="3">
            <tr valign="top" class="text">
              <td width="50%">7<br>
                4 5 3 7<br>
                8 6 2 8<br>
              3</td>
              <td width="50%">player wins<br>
                player loses<br>
                player wins<br>
              player loses</td>
            </tr>
          </table><br>
      </li>
      <li><p>The rules of the game are set so that the house (casino) always wins a higher percentage of the games. Based on probability calculations, the actual winning percentage of a player is 49.29%.</p>
      </li>
      <li><p>A complete program, <em>Craps.java</em>, is provided in Handout A14.1. The application of DeMorgan&#x2019;s Laws occurs in the <code>getPoint()</code> method. The <strong><code>do-while</code></strong> loop has a compound exit condition.</p>
        <table width="300" border="0" cellspacing="0" cellpadding="0">
          <tr>
            <td bgcolor="#000000"><table width="100%" border="0" cellspacing="1" cellpadding="3">
              <tr class="text">
                <td bgcolor="#FFFFFF"><strong>See <a href="HA14_1Craps_java.html" target="_blank">Handout A14.1, Craps.java</a></strong></td>
              </tr>
            </table></td>
          </tr>
        </table>
        <p><code><strong>do</strong>{<br>
            &#xA0;&#xA0;sum = rollDice();<br>
            }<br>
            <strong>while</strong> ((sum != point) &amp;&amp; (sum != 7));</code></p>
      </li>
      <li>
        <p>When developing a conditional loop, it is very helpful to think about what assertions are true when the loop will be finished. In other words, when the loop is done, what will be true?</p>
</li>
      <li>
        <p>When the loop in <code>getPoint</code> is done, one of two things will be true:</p>
      <ol type="a">
          <li>the point will be matched <code>(sum == point)</code>.</li>
        <li>or a seven has been rolled. </li>
      </ol>
      <p>These two statements can be combined into one summary assertion statement:</p>
      </li>
<blockquote>
        <p><code>((sum == point) || (sum == 7))</code></p>
      </blockquote>
  </ol>  <ol class="text" start="7">
  <li>
    <p>The loop assertion states what will be true when the loop is done. Once you have established the loop assertion, writing the boundary condition involves a simple negation of the loop assertion.  </p>
  </li>
  <li>Taking the assertion developed in Section 6 above, the negation of the assertion follows.
    </li>
  <blockquote>
        <p><code>!((sum == point) || (sum == 7))</code></p>
    </blockquote>
  <li>  Applying DeMorgan&apos;s law results in
      <blockquote>
        <p><code>(!(sum == point)) &amp;&amp; (!(sum == 7))</code></p>
      </blockquote>
    <p>Rewriting each half of the expression gives</p>
      <blockquote>
        <p><code>(sum != point) &amp;&amp; (sum != 7)</code></p>
      </blockquote>
  </li>
  <li>
          <p>Looking at the first half of the developing boundary condition, the statement <code>(sum != point)</code> means that we have not yet matched the point. In other words, we haven&#x2019;t won yet.</p>
    </li>
  <li>
          <p>The second half of the boundary condition <code>(value != 7)</code> means we have not yet &#x201C;crapped&#x201D; out (i.e., rolled a 7). In other words, we also haven&#x2019;t lost yet, so we must keep rolling the dice.</p>
    </li>
  <li>  You may use the equivalent Boolean expressions in Sections 8 and 9 interchangeably. Choose the one that you think makes your code easier to read.</li>
</ol><p>&#xA0;</p><br>  
  <br>
  <table cellspacing="0" cellpadding="0" border="0">
    <tr>
      <td width="90%"><span class="header">Summary/Review</span></td>
      <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 6 of 7</nobr></font></td>
    </tr>
  </table>
  <br>
  <p class="text">Conditional loops are some of the hardest pieces of code to write correctly. The goal of this lesson is to have a structured approach for the construction of conditional loops. Thinking in the positive sense is typically easier. Determine what will be true when the loop is done. Negate this condition to stay in the loop.</p>
  <br><br><br><h2>Chapter 15</h2><br>  
  <br>
  <table cellspacing="0" cellpadding="0" border="0">
    <tr>
      <td width="90%"><span class="header">A15 Introduction</span></td>
      <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 1 of 11</nobr></font></td>
    </tr>
  </table>
  <br>
  <p class="text">It is very common for a program to manipulate data that is kept in a list. Lists are a fundamental feature of Java and most programming languages. Because lists are so useful, the Java Development Kit includes the <code>ArrayList</code> class. The <code>ArrayList</code> class provides the classic operations for a list.</p>
  <p class="text">The key topics for this lesson are:</p>
  <ol type="A" class="text">
    <li class="text"><code><a href="A15-A.html">ArrayList</a></code><a href="A15-A.html"> Implementation of a List</a></li>
    <li class="text"><a href="A15-B.html">The <code>ArrayList</code> Class</a></li>
  <li class="text"><a href="A15-C.html">Object Casts</a></li>
  <li class="text"><a href="A15-D.html">The Wrapper Classes</a></li>
  <li class="text"><a href="A15-E.html">Iterator</a></li>
  </ol><br>  
  <br>
  <table cellspacing="0" cellpadding="0" border="0">
    <tr>
      <td width="90%"><span class="header"><a href="../vocabulary/index_A.html#A15">A15 Vocabulary</a></span></td>
      <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 2 of 11</nobr></font></td>
    </tr>
  </table>
  <br>
  <table width="500" border="0">
    <tr class="text">
      <td width="50%">ABSTRACT DATA TYPE</td>
      <td width="50%"><code>ArrayList</code></td>
    </tr>
    <tr class="text">
      <td width="50%">CAST</td>
      <td width="50%"><code>for each LOOP</code></td>
    </tr>
    <tr class="text">
      <td width="50%">LIST</td>
      <td width="50%">WRAPPER</td>
    </tr>
    <tr class="text">
      <td width="50%">&#xA0;</td>
      <td width="50%">&#xA0;</td>
    </tr>
    <tr class="text">
      <td width="50%">&#xA0;</td>
      <td width="50%">&#xA0;</td>
    </tr>
    <tr class="text">
      <td width="50%">&#xA0;</td>
      <td width="50%">&#xA0;</td>
    </tr>
    <tr>
      <td width="50%">&#xA0;</td>
      <td width="50%">&#xA0;</td>
    </tr>
  </table>
  <br>
  <br>  
  <br>
  <table cellspacing="0" cellpadding="0" border="0">
    <tr>
      <td width="90%"><span class="header">A. ArrayList Implementation of a List</span></td>
      <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 3 of 11</nobr></font></td>
    </tr>
  </table>
  <br>
  <ol class="text">
    <li><p>A data structure combines data organization with methods of accessing and manipulating the data. For example, an <code>ArrayList</code> is a data structure for storing a list of elements and provides methods to find, insert, and remove an element. At a very abstract level, we can describe a general &#x201C;list&#x201D; object. A list contains a number of elements arranged in sequence. We can find a target value in a list, add elements to the list, remove elements from the list and process each element of the list.</p></li>
  <li><p>An abstract description of a data structure, with the emphasis on its properties, functionality, and use, rather than on a particular implementation, is referred to as an <em>Abstract Data Type</em> (ADT). An ADT defines methods for handling an abstract data organization without the details of implementation.</p></li>
  <li><p>A &#x201C;list&#x201D; ADT, for example, may be described as follows:</p>
    <p>Data organization:<br>
      - Contains a number of data elements arranged in a linear sequence</p>
    <p>Methods:<br>
      - Create an empty List<br>
      - Append an element to List<br>
      - Remove the i-th element from List<br>
      - Obtain the value of the i-th element<br>
      - Traverse List (process or print out all elements in sequence, visiting each element once)</p>
    </li>
        <li>An <code>ArrayList</code> object contains an array of object references plus many methods for managing that array. The most convenient feature of an <code>ArrayList</code> is that you can keep adding elements to it no matter what size it was originally. The size of the <code>ArrayList</code> will automatically increase and no information will be lost.</li>
  </ol>
  <p>&#xA0;</p><br><br>  
  <table cellspacing="0" cellpadding="0" border="0">
    <tr>
      <td width="90%"><span class="header">B. The ArrayList Class</span></td>
      <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 4 of 11</nobr></font></td>
    </tr>
  </table>
  <br>
  <ol class="text">
    <li><p>a. To declare a reference variable for an ArrayList, do this: </p>
      <p><code>// myArrayList is a reference to <br>
        // a future ArrayList object<br>
        ArrayList &lt;ClassName&gt; myArrayList; </code></p>
      <p>An <code>ArrayList</code> is an array of references to objects of type <code>ClassName</code>, where <code>ClassName</code> can be any class defined by you or Java. </p>
      <p>b. To declare a variable and to construct an <code>ArrayList</code> with an unspecified initial capacity, do this: </p>
      <p><code>// myArrayList is a reference to an ArrayList <br>
        // object. The Java system picks the initial <br>
        // capacity.<br>
        ArrayList &lt;ClassName&gt; myArrayList = <br>
        &#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<strong>new</strong> ArrayList &lt;ClassName&gt; (); </code></p>
      <p>This may not be very efficient. If you have an idea of what size <code>ArrayList</code> you need, start your <code>ArrayList</code> with that capacity. </p>
      <p>c. To declare a variable and to construct an <code>ArrayList</code> with an initial capacity of 15, do this: </p>
      <p><code>// myArrayList is a reference to an ArrayList <br>
        // object with an initial capacity of 15 elements.<br>
        ArrayList &lt;ClassName&gt; myArrayList = <br>
        &#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<strong>new</strong> ArrayList &lt;ClassName&gt; (15);</code></p>
    </li>
    <li>One way of accessing the elements of an <code>ArrayList</code> is by using an integer index. The index is an integer value that starts at 0 and goes to size()-1.
      <p> To access the object at a particular index, use: </p>
      <p><code>// Returns the value of the element at index<br>
  Object get(<strong>int</strong> index);</code></p>
      <p><code>System.out.println(myArrayList.get(i));</code></p>
    </li>
  <li>To add an element to the end of an <code>ArrayList</code>, use:
    <p>// add a reference to an Object to the end of the<br>
      // ArrayList, increasing its size by one<br>
      boolean add(Object obj); </p>
    <p><u>Program Example 15 - 1:</u></p>
    <p><code><strong>import</strong> java.util.ArrayList;</code></p>
    <p><code>ArrayList &lt;String&gt; names = <strong>new</strong> ArrayList &lt;String&gt; (10);<br>
        <br>
        names.add(&quot;Cary&quot;);<br>
        names.add(&quot;Chris&quot;);<br>
        names.add(&quot;Sandy&quot;);<br>
        names.add(&quot;Elaine&quot;);</code></p>
    <p><code>// remove the last element from the list</code></p>
    <p><code>String lastOne = names.remove(names.size()-1);<br>
  System.out.println(&quot;removed: &quot; + lastOne); <br>
  names.add(2, &quot;Alyce&quot;); // add a name at index 2<br>
      <br>
      <strong>for</strong> (<strong>int</strong> j = 0; j &lt; names.size(); j++)<br>
      &#xA0;&#xA0;&#xA0;&#xA0;&#xA0;System.out.println( j + &quot;: &quot; + names.get(j));</code> </p>
    <p><em>Run Output:</em></p>
    <p><code>removed: Elaine<br>
      0: Cary<br>
      1: Chris<br>
      2: Alyce<br>
      3: Sandy</code></p>
  </li>
  <li>A shorthand way to iterate through the collection is provided by a &#x201C;for each&#x201D; loop. A for each loop starts you at the beginning of the collection and proceeds through all of the elements. It will not allow you to skip elements, add elements or remove elements.
    <p>An example of using it on the collection created in the previous section is</p>
    <p><code><strong>for</strong>(String n : names){<br>
  &#xA0;&#xA0;&#xA0;&#xA0;System.out.println(n);<br>
  }</code></p>
  </li>
  <li>The <code>add()</code> method adds to the end of an <code>ArrayList</code>. To set the data at a particular index, use:
    <p><code>// replaces the element at index with <br>
      // objectReference<br>
      Object set(<strong>int</strong> index, Object obj)</code></p>
    <p>The <code>index</code> should be within 0 to <code>size-1</code>. The data previously at index is replaced with <code>obj</code>. The element previously at the specified position is returned.</p>
  </li>
  <li>Removing an element from a list: The <code>ArrayList</code> class has a method that will remove an element from the list without leaving a hole in place of the deleted element:
    <p><code>// Removes the element at index from the list and<br>
      // returns its old value; decrements the indices of <br>
      // the subsequent elements by 1<br>
      Object remove(<strong>int</strong> index);</code></p>
    <p>The element at location <code>index</code> will be eliminated. Elements at locations <code>index+1, index+2, &#xFFFD;&#x136;, size()-1</code> will each be moved down one to fill in the gap.</p>
  </li>
  <li>Inserting an element into an <code>ArrayList</code> at a particular position: When an element is inserted at <code>index</code>, the element previously at <code>index</code> is moved up to <code>index+1</code>, and so on until the element previously at <code>size()-1</code> is moved up to <code>size()</code>. The size of the <code>ArrayList</code> has now increased by one, and the capacity can be increased again if necessary.
    <p><code>// Inserts obj before the i-th element; increments<br>
      // the indices of the subsequent elements by 1<br>
      <strong>void</strong> add(<strong>int</strong> index, Object obj);</code><br>
      <br>
      Inserting is different from setting an element. When <code>set(index, obj)</code> is used, the object reference previously at <code>index</code> is replaced by the new <code>obj</code>. No other elements are affected, and the size does not change.</p>
  </li>
  <li>Whether you are adding at the beginning, middle or end, remember that you are adding an object and must instantiate that object somewhere. Strings hide this fact.
    <p> <code>names.add(2, &quot;Alyce&quot;);</code></p>
    <p>This statement actually creates a <code>String</code> object with the value Alyce.</p>
    <p>If we are using any other object, we must instantiate the object. If we have an <code>ArrayList</code> drawList of DrawingTools, we could add a DrawingTool in the following way.</p>
    <p><code>drawList.add(<strong>new</strong> DrawingTool());</code></p>
  </li>
  </ol>
  <p>&#xA0;</p><br><br>
<table cellspacing="0" cellpadding="0" border="0">
  <tr>
    <td width="90%"><span class="header">C. Object Casts</span></td>
    <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 5 of 11</nobr></font></td>
  </tr>
</table>
  <br>
<ol class="text">
    <li><p>Java compilers before J2SE 1.5 (codename: Tiger) did not support the typing of an <code>ArrayList</code> as shown above. This new feature is called <em>generics</em>. It is a safe way to deal with <code>ArrayLists</code>. You declare what kind of objects you are going to put in the <code>ArrayList</code>. Java will only allow you to put that type of object in, and it knows the type of object coming out. In previous versions of Java, you had to tell the compiler what kind of object you were putting in and taking out.</p>
      </li>
</ol>  <ol class="text" start="2">
      <li><p>For example, consider the following:</p>
          <p><code>ArrayList aList = <strong>new</strong> ArrayList();<br>
  aList.add(&quot;Chris&quot;);<br>
            String nameString = aList.get(0); // <span class="style1">SYNTAX ERROR!</span><br>
            System.out.println(&quot;Name is &quot; + nameString);</code></p>
          <p>This code creates an <code>ArrayList</code> called <code>aList</code> and adds the single <code>String</code> object <code>&quot;Chris&quot;</code> to the list. The intent of the third instruction is to assign the item <code>&quot;Chris&quot;</code> to <code>nameString</code>. The state of program execution following the add is that <code>aList</code> stores the single item, <code>&quot;Chris&quot;</code>. Unfortunately, this code will never execute, because of a syntax error with the statement:</p>
          <p><code>String nameString = aList.get(0); // <span class="style1">SYNTAX ERROR!</span></code></p>
          <p>The problem is a type conformance issue. The <code>get</code> method returns an <code>Object</code>, and an <code>Object</code> does not conform to a <code>String</code> (even though this particular item happens to be a <code>String</code>).</p>
      </li>
      <li><p>The erroneous instruction can be modified to work as expected by incorporating the <code>(String)</code> cast shown below. </p>
      <p><code>String nameString = (String)aList.get(0);</code></p>
      </li>
      </ol>
<p>&#xA0;</p><br><br>
<table cellspacing="0" cellpadding="0" border="0">
  <tr>
    <td width="90%"><span class="header">D. The Wrapper Classes</span></td>
    <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 6 of 11</nobr></font></td>
  </tr>
</table>
  <br>
  <ol class="text">
    <li>Because numbers are not objects in Java, you cannot insert them directly into pre 1.5 <code>ArrayLists</code>. To store sequences of integers, floating-point numbers, or boolean values in a pre 1.5 <code>ArrayList</code>, you must use wrapper classes.</li>
  </ol>
  <ol class="text" start="2">
    <li><p>The classes <code>Integer</code>, <code>Double</code>, and <code>Boolean</code> wrap primitive values inside objects. These wrapper objects can be stored in <code>ArrayLists</code>.</p></li>
	<li><p>The <code>Double</code> class is a typical number wrapper. There is a constructor that makes a <code>Double</code> object out of a <code>double</code> value:</p>
	  <p><code>Double r = <strong>new</strong> Double(8.2057);</code></p>
	  <p>Conversely, the <code>doubleValue</code> method retrieves the double value that is stored inside the <code>Double</code> object:</p>
	  <p><code>double d = r.doubleValue();</code></p>
	</li>
	<li><p>To add a primitive data type to a pre 1.5 <code>ArrayList</code>, you must first construct a wrapper object and then add the object. For example, the following code adds a floating-point number to an <code>ArrayList</code>:</p>
	  <p><code>ArrayList grades = <strong>new</strong> ArrayList();<br>
	      <strong>double</strong> testScore = 93.45;<br>
	    Double wrapper = <strong>new</strong> Double(testScore);<br>
	    grades.add(wrapper);</code></p>
	  <p>Or the shorthand version:</p>
	  <p><code>grades.add(new Double(93.45));</code></p>
	  <p>To retrieve the number, you need to cast the return value of the <code>get</code> method to <code>Double</code>, and then call the <code>doubleValue</code> method:</p>
	  <p><code>wrapper = (Double)grades.get(0);<br>
	    testScore = wrapper.doubleValue();</code></p>
	  <p>With Java 1.5, declare your <code>ArrayList</code> to only hold <code>Doubles</code>. With a new feature called <em>auto-boxing</em> in Java 1.5, when you define an <code>ArrayList</code> to contain a particular wrapper class, you can put the corresponding primitive value directly into the <code>ArrayList</code> without having to wrap it. You can also pull the primitive directly out.</p>
	  <p><code>ArrayList grades2 &lt;Double&gt; = <strong>new</strong> ArrayList &lt;Double&gt;();<br>
	    grades2.add(93.45);<br>
	    System.out.println(&quot;Value is &quot; + grades2.get(0));</code></p>
	</li>
	</ol>
  <p>&#xA0;</p>
  <br><br>
<table cellspacing="0" cellpadding="0" border="0">
  <tr>
    <td width="90%"><span class="header">E. Iterator</span></td>
    <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 7 of 11</nobr></font></td>
  </tr>
</table>
  <br>
  <blockquote>
    <p class="text">An <code>Iterator</code> is an object that is attached to the <code>ArrayList</code> and allows you to traverse the array from first to last element. Many data structures implement an <code>Iterator</code>. The <code>Iterator</code> keeps track of where it is in the list even if we are adding and removing from it. We will cover the topic of Iterators much more thoroughly in the AB level curriculum.</p>
  <p class="text"><code>ArrayList &lt;String&gt; names = <strong>new</strong> ArrayList &lt;String&gt;();<br>
      names.add(&#x201C;George&#x201D;);<br>
      names.add(&#x201C;Nancy&#x201D;);<br>
      names.add(&#x201C;John&#x201D;);</code></p>
    <p class="text"><code>Iterator iter = names.iterator();<br>
      while(iter.hasNext()){<br>
  &#xA0;&#xA0;&#xA0;&#xA0;&#xA0;System.out.println(iter.next());<br>
  }</code></p>
  </blockquote>  <p>&#xA0;</p>
<br>  
  <br>
  <table cellspacing="0" cellpadding="0" border="0">
    <tr>
      <td width="90%"><span class="header">Summary/Review</span></td>
      <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 8 of 11</nobr></font></td>
    </tr>
  </table>
  <br>
  <p class="text">An <code>ArrayList</code> contains elements that are accessed using an integer index. The package <code>java.util</code> also includes a few other classes for working with objects.</p>
  <br><br><br><h2>Chapter 16</h2><br>  
  <br>
  <table cellspacing="0" cellpadding="0" border="0">
    <tr>
      <td width="90%"><span class="header">A16 Introduction</span></td>
      <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 1 of 10</nobr></font></td>
    </tr>
  </table>
  <br>
  <p class="text">A single dimension array is an alternative to the <code>ArrayList</code> studied in Lesson A15.</p>
  <p class="text">The key topics for this lesson are:</p>
  <ol type="A" class="text">
    <li class="text"><a href="A16-A.html">Example of an Array</a></li>
    <li class="text"><a href="A16-B.html">Array Declarations and Memory Allocation</a></li>
  <li class="text"><a href="A16-C.html">Applications of Arrays</a></li>
  <li class="text"><a href="A16-D.html">Arrays as Parameters</a></li>
  <li class="text"><a href="A16-E.html">Arrays and Algorithms</a></li>
  </ol><br>  
  <br>
  <table cellspacing="0" cellpadding="0" border="0">
    <tr>
      <td width="90%"><span class="header"><a href="../vocabulary/index_A.html#A16">A16 Vocabulary</a></span></td>
      <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 2 of 10</nobr></font></td>
    </tr>
  </table>
  <br>
  <table width="500" border="0">
    <tr class="text">
      <td width="50%">ALGORITHM</td>
      <td width="50%">ARRAY</td>
    </tr>
    <tr class="text">
      <td width="50%"><code>final</code></td>
      <td width="50%">INDEX</td>
    </tr>
    <tr class="text">
      <td width="50%">RANDOM ACCESS</td>
      <td width="50%">SEQUENTIAL</td>
    </tr>
    <tr class="text">
      <td width="50%">TRAVERSAL</td>
      <td width="50%">&#xA0;</td>
    </tr>
    <tr class="text">
      <td width="50%">&#xA0;</td>
      <td width="50%">&#xA0;</td>
    </tr>
    <tr class="text">
      <td width="50%">&#xA0;</td>
      <td width="50%">&#xA0;</td>
    </tr>
    <tr>
      <td width="50%">&#xA0;</td>
      <td width="50%">&#xA0;</td>
    </tr>
  </table>
  <br>
  <br>  
  <br>
  <table cellspacing="0" cellpadding="0" border="0">
    <tr>
      <td width="90%"><span class="header">A. Example of an Array</span></td>
      <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 3 of 10</nobr></font></td>
    </tr>
  </table>
  <br>
  <ol class="text">
    <li>      The following program will introduce you to some of the syntax and usage of the array class in Java:
      <p><u>Code Sample 16-1:</u></p>
    <p><code><strong>int</strong>[] A = <strong>new int</strong>[6]; // an array of 6 integers<br>
        <strong>int</strong> loop;</code></p>
      <p><code><strong>for</strong> (loop = 0; loop &lt; 6; loop++){<br>
  &#xA0;&#xA0;&#xA0;&#xA0;A[loop] = loop * loop;<br>
  }<br>
  System.out.println(&quot;The contents of array A are:&quot;);<br>
  System.out.println();<br>
  <strong>for</strong> (loop = 0; loop &lt; 6; loop++){<br>
  &#xA0;&#xA0;&#xA0;&#xA0;System.out.print(&quot; &quot; + A[loop]);<br>
  }<br>
  System.out.println();</code></p>
      <p><em>Run Output:</em></p>
      <p><code>The contents of array A are:</code></p>
      <p><code> 0 1 4 9 16 25</code></p>
    </li>
<li>An array is similar to the ArrayList. It is a linear data structure composed of adjacent memory locations, or &#x201C;cells&#x201D;, each holding values of the same type.
  <p align="center"><img src="http://iws.punahou.edu/user/DKiang/apcs/LessonA16/images/Fig_16_1.gif" width="400" height="146"></p>
</li>
<li><p>The variable A is an array, a group of 6 related scalar values. There are six locations in this array referenced by indexes 0 to 5. Note that indexes always start at zero, and count up by one until the last slot of the array. If there are N slots in an array, the indexes will be 0 through N-1 (for example, if N=6, the indexes are 0 through 5 or (N-1)).</p>
          </li>
        <li>
          <p>The variable <code>loop</code> is used in a <strong><code>for</code></strong> loop to reference indexes 0 through 5. In this program, the square of each index is stored in the memory location occupied by each cell of the array. The syntax for accessing a memory location of an array requires the use of square brackets <code>[]</code>.</p>
        </li>
  <li>
    <p>The square brackets <code>[]</code> are collectively an operator in Java, and are called the index operator. They are similar to the parentheses as they have the highest level of precedence compared to all other operators.</p>
  </li>
  <li>The index operator performs automatic bounds checking. Bounds checking makes sure that the index is within the range for the array being referenced. Whenever a reference to an array element is made, the index must be greater than or equal to zero and less than the size of the array. If the index is not valid, the exception <code>ArrayIndexOutOfBoundsException</code> is thrown.</li>
  </ol>
  <p>&#xA0;</p><br><br>  
  <table cellspacing="0" cellpadding="0" border="0">
    <tr>
      <td width="90%"><span class="header">B. Array Declarations and Memory Allocation</span></td>
      <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 4 of 10</nobr></font></td>
    </tr>
  </table>
  <br>
  <ol class="text">
    <li>Array declarations look like this:
      <p><code><span class="style1">type</span>[] arrayName;</code></p>
      <p>This tells the compiler that <code>arrayName</code> will be used as the name of an array containing <strong><code>type</code></strong>. However, the actual array is not constructed by this declaration. Often an array is declared and constructed in one statement like this:</p>
      <p><code><em><strong>type</strong></em>[] arrayName = <strong>new</strong> <em><strong>type</strong></em>[length];</code></p>
      <p>This tells the compiler that <code>arrayName</code> will be used as the name of an array containing <em><strong><code>type</code></strong></em>, and constructs an array object containing <code>length</code> number of slots.</p>
    </li>
    </ol>
  <ol class="text" start="2">
      <li><p>An array is an object, and like any other object in Java is constructed out of main storage as the program is running. The array constructor uses different syntax than most object constructors; <code><em><strong>type</strong></em>[length]</code> names the type of data in each slot and the number of slots. For example:</p>
        <p><code><strong>int</strong>[] list = <strong>new int</strong>[6];<br>
            <strong>double</strong>[] data = <strong>new double</strong>[1000];<br>
          Student[] school = <strong>new</strong> Student[1250];</code></p>
        <p>Once an array has been constructed, the number of slots it has does not change.</p>
      </li>
      <li><p>The size of an array can be defined by using a <strong><code>final</code></strong> value. </p>
        <p><code><strong>final int</strong> MAX = 200;<br>
            <strong>int</strong>[] numb = <strong>new int</strong>[MAX];</code></p>
      </li>
      </ol>  <ol class="text" start="4">
	<li>When an array is declared, enough memory is allocated to set up the full size of the array.</li>
	</ol>
  <p>&#xA0;</p><br><br>
<table cellspacing="0" cellpadding="0" border="0">
  <tr>
    <td width="90%"><span class="header">C. Application of Arrays</span></td>
    <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 5 of 10</nobr></font></td>
  </tr>
</table>
  <br>
<ol class="text">
    <li>Suppose we have a text file <em>votes.txt</em> of integer data containing all the votes cast in an election. This election happened to have three candidates and the values in the integer file are 1, 2, or 3, each corresponding to one of the three candidates.
      <p><u>Code Sample 16-2:</u></p>
    <p><code>FileInput inFile = <strong>new</strong> FileInput(&quot;votes.txt&quot;);<br>
          <br>
          <strong>int</strong> vote, total = 0, loop;<br>
          <br>
          // sized to 4 boxes, initialized to 0&apos;s<br>
          <strong>int</strong>[] data = <strong>new int</strong>[4];</code></p>
      <p><code>vote = inFile.readInt();<br>
          <strong>while</strong> (inFile.hasMoreTokens()){<br>
  &#xA0;&#xA0;&#xA0;&#xA0;&#xA0;data[vote]++;<br>
  &#xA0;&#xA0;&#xA0;&#xA0;&#xA0;total++;<br>
  &#xA0;&#xA0;&#xA0;&#xA0;&#xA0;vote = inFile.readInt();<br>
  }<br>
  System.out.println(&quot;Total # of votes = &quot; + total);<br>
  <strong>for</strong> (loop = 1; loop &lt;= 3; loop++){<br>
  &#xA0;&#xA0;&#xA0;&#xA0;&#xA0;System.out.println(&quot;Votes for #&quot; + loop +<br>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&quot; = &quot; + data[loop]);<br>
  }</code></p>
    <ol type="a">
        <li>          The array <code>data</code> consists of four cells, each holding an integer value. The first cell, <code>data[0]</code>, is allocated but not used in this problem. After processing the entire file, the variable <code>data[n]</code> contains the number of votes for candidate n. We could have stored the information for candidate 1 in position 0, candidate 2 in position 1, and so forth, but the code is easier to follow if we can use a direct correspondence.
          <p align="center"><img src="http://iws.punahou.edu/user/DKiang/apcs/LessonA16/images/Fig_16_2.gif" width="400" height="147"></p>
        </li>
<li>The value of vote is used to increment the appropriate cell of the array by +1.</li>
    </ol><br>
    </li>
<li><p>A second example counts the occurrence of each alphabet letter in a text file.</p>
          <p><u>Code Sample 16-3:</u></p>
          <p><code>FileInput inFile = <strong>new</strong> FileInput(&quot;sample.txt&quot;);</code></p>
          <p><code><strong>int</strong>[] letters = <strong>new</strong> int[26]; // use positions 0..25<br>
  // to count letters <br>
  <strong>int</strong> total = 0;<br>
  <strong>char</strong> ch;</code></p>
          <p><code><strong>while</strong> (inFile.hasMoreLines()){<br>
  &#xA0;&#xA0;&#xA0;&#xA0;&#xA0;String line = inFile.readLine().toLowerCase();<br>
  &#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<strong>for</strong>(int index = 0; index &lt; line.length(); index++){<br>
  &#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;ch = line.charAt(index); <br>
  &#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;// line.charAt is from chn.util. It <br>
  &#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//extracts the entry.</code></p>
          <p><code> &#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<strong>if</strong> (&apos;a&apos; &lt;= ch &amp;&amp; ch &lt;= &apos;z&apos;) { // if letter<br>
  &#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;letters[ch - &#x2018;a&#x2019;]++; <br>
  &#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;total++;<br>
  &#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;}<br>
  &#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<strong></strong>}<br>
  }<br>
  System.out.println(&quot;Count letters&quot;);<br>
  System.out.println();<br>
  ch = &apos;a&apos;;<br>
  <strong>for</strong> (<strong>int</strong> loop = 0; loop &lt; 26; loop++){<br>
  &#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<strong></strong>&#xA0;System.out.println(ch + &quot; : &quot; + letters[loop]);<br>
  &#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<strong></strong>&#xA0;ch++;<br>
  }<br>
  System.out.println();<br>
  System.out.println(&quot;Total letters = &quot; + total);</code></p>
<ol type="a">
            <li>
              <p>Each line in the text file is read in and then each character in the line is copied into <code>ch</code>. If <code>ch</code> is an uppercase letter, it is converted to its lowercase counterpart.</p>
            </li>
          <li>              If the character is a letter, the ASCII value of the letter is adjusted to fit the range from 0-25. For example, if <code>ch == &apos;b&apos;</code>, the program calculates <code>&#x2018;b&#x2019; - &#x2018;a&#x2019; = 1</code>. Then the appropriate cell of the array is incremented by one.</li>
</ol>
</li>
    </ol>  <p>&#xA0;</p><br><br>
<table cellspacing="0" cellpadding="0" border="0">
  <tr>
    <td width="90%"><span class="header">D. Arrays as Parameters</span></td>
    <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 6 of 10</nobr></font></td>
  </tr>
</table>
  <br>
  <ol class="text">
    <li>The program <em>ArrayOps.java</em>, provides examples of passing arrays as parameters. Notice that the <strong><code>final</code></strong> integer constant <code>MAX = 6</code> is used to size the array in this program.</li>
  </ol>
  <blockquote>
    <table width="80%" border="0" cellspacing="0" cellpadding="0">
      <tr>
        <td bgcolor="#000000"><table width="100%" border="0" cellspacing="1" cellpadding="3">
          <tr>
            <td bgcolor="#FFFFFF" class="text"><strong>See <a href="HA16_1ArraysAsParameters.html" target="_blank">Handout 16.1, Example Program</a> - Arrays as Parameters ArrayOps.java</strong></td>
          </tr>
        </table></td>
      </tr>
    </table>
    </blockquote>  <ol class="text" start="2">
    <li><p>The <code>main</code> method declares an array named <code>data</code>. The array is initialized with the values 0...5 inside the <code>main</code> method.</p>
    </li>
	<li>
	    <p>The parameters of the <code>squareList</code> and <code>printList</code> methods are references to an array object. Any local reference to array <code>list</code> inside the <code>squareList</code> or <code>printList</code> methods is an alias for the array <code>data</code> inside of the <code>main</code> method. Notice that after the call of <code>squareList</code>, the values stored in array <code>data</code> in the <code>main</code> method have been permanently changed.</p>
	</li>
  <li>
        <p>When the <code>rotateList</code> method is called, the copy method of the <code>ArrayOps</code> class is invoked and the local array <code>listCopy</code> is created as a copy of the array <code>data</code> in the <code>main</code> method.</p>
  </li>
  <li>
    <p>The <code>rotateList</code> method rotates the values one cell to the right, with the last value moved to the front of the list. A call to <code>printList</code> is made inside the <code>rotateList</code> method just before leaving the method. After returning to the <code>main</code> method, notice that the array <code>data</code> is unchanged. </p>
  </li>
  </ol>
  <p>&#xA0;</p>
  <br><br>
<table cellspacing="0" cellpadding="0" border="0">
  <tr>
    <td width="90%"><span class="header">E. Arrays and Algorithms</span></td>
    <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 7 of 10</nobr></font></td>
  </tr>
</table>
  <br>
  <blockquote>
    <p class="text">In the following list, we introduce five important algorithms that are quite common in programs that analyze data in arrays. You will meet these again in later lessons and labs.</p>
  </blockquote>  <ol class="text">
    <li class="text">
      <p><u>Insertion</u> is a standard problem that must be solved for all data structures. Suppose an array had 10 values and an 11th value was to be added. We are assuming the array can store at least 11 values.</p>
      <ol type="a" class="text">
            <li>
              <p>If we could place the new value at the end, there would be no problem.</p>
            </li>
          <li>
            <p>But if the new value must be inserted at the beginning of the list in position 0, the other 10 values must be moved one cell over in the list.</p>
          </li>
      </ol>
    </li>
    <li>
    <p><u>Deletion</u> of a value creates an empty cell that probably must be dealt with. The most likely solution, after deleting a value, is to move all values that are to the right of the empty spot one cell to the left.</p>
  </li>
  <li>
    <p>A <u>traversal</u> of an array consists of visiting every cell location, probably in order. The visit could involve printing out the array, initializing the array, finding the largest or smallest value in the array, etc.</p>
  </li>
  <li>
    <p><u>Sorting</u> an array means to organize values in either ascending or descending order. These algorithms will be covered in depth in future lessons.</p>
  </li>
  <li><p><u>Searching</u> an array means to find a specific value in the array. There are several standard algorithms for searching an array. These will be covered in future lessons.</p>
  </li>
  </ol>
  <p>&#xA0;</p>
  <br>  
  <br>
  <table cellspacing="0" cellpadding="0" border="0">
    <tr>
      <td width="90%"><span class="header">Summary/Review</span></td>
      <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 8 of 10</nobr></font></td>
    </tr>
  </table>
  <br>
  <p class="text">Arrays are useful data structures and you will have many opportunities to program with them.</p>
  <br><br><br><h2>Chapter 17</h2><br>  
  <br>
  <table cellspacing="0" cellpadding="0" border="0">
    <tr>
      <td width="90%"><span class="header">A17 Introduction</span></td>
      <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 1 of 11</nobr></font></td>
    </tr>
  </table>
  <br>
  <p class="text">In this lesson, you will learn about three sorting algorithms: bubble, selection, and insertion. You are responsible for knowing how they work, but you do not necessarily need to memorize and reproduce the code. After counting the number of steps of each algorithm, you will have a sense of the relative speeds of these three sorts.</p>
  <p class="text">The key topics for this lesson are:</p>
  <ol type="A" class="text">
    <li class="text"><a href="A17-A.html">Sorting Template Program</a></li>
    <li class="text"><a href="A17-B.html">Bubble Sort</a></li>
  <li class="text"><a href="A17-C.html">Selection Sort</a></li>
  <li class="text"><a href="A17-D.html">Insertion Sort</a></li>
  <li class="text"><a href="A17-E.html">Counting Steps - Quadratic Algorithms</a></li>
  <li class="text"><a href="A17-F.html">Animated Sort Simulations</a> </li>
  <li class="text"><a href="A17-G.html">Sorting Objects</a></li>
  </ol><br>  
  <br>
  <table cellspacing="0" cellpadding="0" border="0">
    <tr>
      <td width="90%"><span class="header"><a href="../vocabulary/index_A.html#A17">A17 Vocabulary</a></span></td>
      <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 2 of 11</nobr></font></td>
    </tr>
  </table>
  <br>
  <table width="500" border="0">
    <tr class="text">
      <td width="50%">BUBBLE SORT</td>
      <td width="50%">INSERTION SORT</td>
    </tr>
    <tr class="text">
      <td width="50%">NONDECREASING ORDER</td>
      <td width="50%">QUADRATIC</td>
    </tr>
    <tr class="text">
      <td width="50%">SELECTION SORT</td>
      <td width="50%">STUB</td>
    </tr>
    <tr class="text">
      <td width="50%">SWAP</td>
      <td width="50%">&#xA0;</td>
    </tr>
    <tr class="text">
      <td width="50%">&#xA0;</td>
      <td width="50%">&#xA0;</td>
    </tr>
    <tr class="text">
      <td width="50%">&#xA0;</td>
      <td width="50%">&#xA0;</td>
    </tr>
    <tr>
      <td width="50%">&#xA0;</td>
      <td width="50%">&#xA0;</td>
    </tr>
  </table>
  <br>
  <br>  
  <br>
  <table cellspacing="0" cellpadding="0" border="0">
    <tr>
      <td width="90%"><span class="header">A. Sorting Template Program</span></td>
      <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 3 of 11</nobr></font></td>
    </tr>
  </table>
  <br>
  <ol class="text">
    <li><p>A program shell has been provided in the curriculum as SortStep.java (the main test method), and SortsTemplate.java (the sort class template).</p>
      <table width="350" border="0" cellspacing="0" cellpadding="0">
        <tr>
          <td bgcolor="#000000"><table width="100%" border="0" cellspacing="1" cellpadding="3">
            <tr>
              <td bgcolor="#FFFFFF" class="text"><strong>See <a href="StarterCode/SortStep.java" target="_blank">SortStep.java</a> and <a href="StarterCode/SortsTemplate.java" target="_blank">SortsTemplate. java</a></strong></td>
            </tr>
          </table></td>
        </tr>
      </table><br>
    </li>
<li><p>The program asks the user to select a sorting algorithm, fills the array with an amount of data chosen by the user, calls the sorting algorithm, and prints out the data after it has been sorted.</p>
    </li>
    <li>
          <p>At this point, each sorting algorithm has been left as a method stub. A stub is an incomplete routine that can be called but does not do anything yet. The stub will be filled in later as each algorithm is developed and understood.</p>
    </li>
    <li>
          <p>Stub programming is a programming strategy. It allows for the coding and testing of algorithms in the context of a working program. As each sorting algorithm is completed, it can be added to the program shell and tested without having to complete the other sections.</p>
    </li>
    <li>
          <p>This stepwise development of programs using stub programming will be used extensively in future lessons.</p>
    </li>
  </ol>
  <p>&#xA0;</p>
  <br><br>  
  <table cellspacing="0" cellpadding="0" border="0">
    <tr>
      <td width="90%"><span class="header">B. Bubble Sort</span></td>
      <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 4 of 11</nobr></font></td>
    </tr>
  </table>
  <br>
  <ol class="text">
    <li><p>Bubble Sort is the simplest of the three sorting algorithms, and also the slowest. The Bubble Sort gets its name from the way that the largest items &#x201C;bubble&#x201D; to the top (end). The procedure goes like this.</p>
      <ol type="a">
        <li>
          <p>Move the largest remaining item in the current pass to the end of the data as follows. Starting with the first two items, swap them if necessary so that the larger item is after the smaller item. Now move over one position in the list and compare to the next item. Again swap the items if necessary.</p>
        </li>
      <li>
            <p>Remove the largest item most recently found from the data to be searched and perform another pass with this new data at step a.</p>
      </li>
      <li>
        <p>Repeat steps a and b above until the number of items to be searched is one.</p>
      </li>
      </ol>
    <p>To see how Bubble Sort works, let&#x2019;s try an example:</p>
    <table width="500" border="0" cellspacing="0" cellpadding="0">
      <tr>
        <td bgcolor="#000000"><table width="100%" border="0" cellspacing="1" cellpadding="3">
          <tr bgcolor="#FFFFFF" class="text">
            <td width="60%"><strong>Steps</strong></td>
            <td width="20%"><strong>Data for pass</strong></td>
            <td width="20%"><strong>Sorted data</strong></td>
          </tr>
          <tr bgcolor="#FFFFFF" class="text">
            <td width="60%"><u>Start pass 1</u>: compare 4 &amp; 1.</td>
            <td width="20%">4 1 3 2</td>
            <td width="20%">&#xA0;</td>
          </tr>
          <tr bgcolor="#FFFFFF" class="text">
            <td width="60%">4 &gt; 1 so swapped, now compare 4 &amp; 3.</td>
            <td width="20%">1 4 3 2</td>
            <td width="20%">&#xA0;</td>
          </tr>
          <tr bgcolor="#FFFFFF" class="text">
            <td width="60%">4 &gt; 3 so swapped, now compare 4 &amp; 2.</td>
            <td width="20%">1 3 4 2</td>
            <td width="20%">&#xA0;</td>
          </tr>
          <tr bgcolor="#FFFFFF" class="text">
            <td width="60%">4 &gt; 2 so swapped, end of pass.</td>
            <td width="20%">1 3 2 4</td>
            <td width="20%">&#xA0;</td>
          </tr>
          <tr bgcolor="#FFFFFF" class="text">
            <td width="60%"><u>Start pass 2</u>: compare 1 &amp; 3.</td>
            <td width="20%">1 3 2</td>
            <td width="20%">4</td>
          </tr>
          <tr bgcolor="#FFFFFF" class="text">
            <td width="60%">3 &gt; 1 so no swap, now compare 3 &amp; 2.</td>
            <td width="20%">1 3 2</td>
            <td width="20%">4</td>
          </tr>
          <tr bgcolor="#FFFFFF" class="text">
            <td width="60%">3 &gt; 2 so swapped, end of pass.</td>
            <td width="20%">1 2 3</td>
            <td width="20%">4</td>
          </tr>
          <tr bgcolor="#FFFFFF" class="text">
            <td width="60%"><u>Start pass 3</u>: now compare 1 &amp; 2.</td>
            <td width="20%">1 2</td>
            <td width="20%">3 4</td>
          </tr>
          <tr bgcolor="#FFFFFF" class="text">
            <td width="60%">2 &gt; 1 so no swap.</td>
            <td width="20%">1 2</td>
            <td width="20%">3 4</td>
          </tr>
          <tr bgcolor="#FFFFFF" class="text">
            <td width="60%">Only one item in this pass so it is done.</td>
            <td width="20%">1</td>
            <td width="20%">2 3 4</td>
          </tr>
          <tr bgcolor="#FFFFFF" class="text">
            <td width="60%">Done.</td>
            <td width="20%">&#xA0;</td>
            <td width="20%">1 2 3 4</td>
          </tr>
        </table></td>
      </tr>
    </table><br>
    </li>
<li><p>The following program implements the Bubble Sort algorithm.</p>
          <p> <code><strong>void</strong> bubbleSort(ArrayList &lt;Integer&gt; list){<br>
  &#xA0;&#xA0;<strong>for</strong> (<strong>int</strong> outer = 0; outer &lt; list.size() - 1; outer++){<br>
  &#xA0;&#xA0;&#xA0;&#xA0;<strong>for</strong> (<strong>int</strong> inner = 0; inner &lt; list.size()-outer-1; inner++){<br>
  &#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<strong>if</strong> (list.get(inner) &gt; list.get(inner + 1)){<br>
  &#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//swap list[inner] &amp; list[inner+1]<br>
  &#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<strong>int</strong> temp = list.get(inner);<br>
  &#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;list.set(inner, list.get(inner + 1));<br>
  &#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;list.set(inner + 1, temp);<br>
  &#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;}<br>
  &#xA0;&#xA0;&#xA0;&#xA0;}<br>
  &#xA0;&#xA0;}<br>
      }</code></p>
        </li>
        <li><p>Given a list of 6 values, the loop variables outer and inner will evaluate as follows.</p>
</li>
  </ol>
  <blockquote>
    <table width="300" border="0" cellspacing="0" cellpadding="0">
      <tr>
        <td bgcolor="#000000"><table width="400" border="0" cellspacing="1" cellpadding="3">
          <tr bgcolor="#FFFFFF" class="text">
            <td width="50%"><div align="center"><strong>When outer =</strong></div></td>
            <td width="50%"><div align="center"><strong>inner ranges from 0<br>
  to &lt; (6 - outer - 1)</strong></div></td>
          </tr>
          <tr bgcolor="#FFFFFF" class="text">
            <td width="50%"><div align="center">0</div></td>
            <td width="50%"><div align="center">0 to 4</div></td>
          </tr>
          <tr bgcolor="#FFFFFF" class="text">
            <td width="50%"><div align="center">1</div></td>
            <td width="50%"><div align="center">0 to 3</div></td>
          </tr>
          <tr bgcolor="#FFFFFF" class="text">
            <td width="50%"><div align="center">2</div></td>
            <td width="50%"><div align="center">0 to 2</div></td>
          </tr>
          <tr bgcolor="#FFFFFF" class="text">
            <td width="50%"><div align="center">3</div></td>
            <td width="50%"><div align="center">0 to 1</div></td>
          </tr>
          <tr bgcolor="#FFFFFF" class="text">
            <td width="50%"><div align="center">4</div></td>
            <td width="50%"><div align="center">0 to 0</div></td>
          </tr>
        </table></td>
      </tr>
    </table>
  </blockquote>
  <ol class="text" start="4">
	<li><p>When outer = 0, then the inner loop will do 5 comparisons of pairs of values. As inner ranges from 0 to 4, it does the following comparisons:</p>
	  <table width="300" border="0" cellspacing="0" cellpadding="0">
        <tr>
          <td bgcolor="#000000"><table width="400" border="0" cellspacing="1" cellpadding="3">
              <tr bgcolor="#FFFFFF" class="text">
                <td width="50%"><div align="center">inner</div></td>
                <td width="50%"><div align="center">if (list.get(inner) &gt; <br>
                  list.get(inner + 1))</div></td>
              </tr>
              <tr bgcolor="#FFFFFF" class="text">
                <td width="50%"><div align="center">0</div></td>
                <td width="50%"><div align="center">if list[0] &gt; list[1]</div></td>
              </tr>
              <tr bgcolor="#FFFFFF" class="text">
                <td width="50%"><div align="center">1</div></td>
                <td width="50%"><div align="center">if list[1] &gt; list[2]</div></td>
              </tr>
              <tr bgcolor="#FFFFFF" class="text">
                <td width="50%"><div align="center">...</div></td>
                <td width="50%"><div align="center">...</div></td>
              </tr>
              <tr bgcolor="#FFFFFF" class="text">
                <td width="50%"><div align="center">4</div></td>
                <td width="50%"><div align="center">if list[4] &gt; list[5]</div></td>
              </tr>
          </table></td>
        </tr>
      </table><br>
	</li>
<li><p>If <code>(list.get(inner) &gt; list.get(inner + 1))</code> is <strong><code>true</code></strong>, then the values are out of order and a swap takes place. The swap takes three lines of code and uses a temporary variable <code>temp</code>.</p>
</li>
    <li>
        <p>After the first pass <code>(outer = 0)</code>, the largest value will be in its final resting place (and may it rest in peace). When <code>outer = 1</code>, the <code>inner</code> loop only goes from 0 to 3 because a comparison between positions 4 and 5 is unnecessary. The <code>inner</code> loop is shrinking.</p>
    </li>
  <li>
        <p>Because of the presence of duplicate values, this algorithm will result in a list sorted in non-decreasing order.</p>
  </li>
  <li>    Here is a small list of data to test your understanding of <u>Bubble Sort</u>. Write in the correct sequence of integers after each advance of <code>outer</code>. (Answers are found in <a href="HA17_1Answers.html" target="_blank">Lesson A17 Handout</a>, <em>Sorting Answers</em>.) </li>
  </ol>  <blockquote>
    <table width="500" border="0" cellspacing="0" cellpadding="3">
      <tr class="text">
        <td><div align="center">outer</div></td>
        <td><div align="center">57</div></td>
        <td><div align="center">95</div></td>
        <td><div align="center">88</div></td>
        <td><div align="center">14</div></td>
        <td><div align="center">25</div></td>
        <td><div align="center">6</div></td>
      </tr>
      <tr class="text">
        <td><div align="center">1</div></td>
        <td><div align="center">_____</div></td>
        <td><div align="center">_____</div></td>
        <td><div align="center">_____</div></td>
        <td><div align="center">_____</div></td>
        <td><div align="center">_____</div></td>
        <td><div align="center">_____</div></td>
      </tr>
      <tr class="text">
        <td><div align="center">2</div></td>
        <td><div align="center">_____</div></td>
        <td><div align="center">_____</div></td>
        <td><div align="center">_____</div></td>
        <td><div align="center">_____</div></td>
        <td><div align="center">_____</div></td>
        <td><div align="center">_____</div></td>
      </tr>
      <tr class="text">
        <td><div align="center">3</div></td>
        <td><div align="center">_____</div></td>
        <td><div align="center">_____</div></td>
        <td><div align="center">_____</div></td>
        <td><div align="center">_____</div></td>
        <td><div align="center">_____</div></td>
        <td><div align="center">_____</div></td>
      </tr>
      <tr class="text">
        <td><div align="center">4</div></td>
        <td><div align="center">_____</div></td>
        <td><div align="center">_____</div></td>
        <td><div align="center">_____</div></td>
        <td><div align="center">_____</div></td>
        <td><div align="center">_____</div></td>
        <td><div align="center">_____</div></td>
      </tr>
      <tr class="text">
        <td><div align="center">5</div></td>
        <td><div align="center">_____</div></td>
        <td><div align="center">_____</div></td>
        <td><div align="center">_____</div></td>
        <td><div align="center">_____</div></td>
        <td><div align="center">_____</div></td>
        <td><div align="center">_____</div></td>
      </tr>
    </table>
    <p>&#xA0;</p>
  </blockquote>  <p>&#xA0;</p><br><br>
<table cellspacing="0" cellpadding="0" border="0">
  <tr>
    <td width="90%"><span class="header">C. Selection Sort</span></td>
    <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 5 of 11</nobr></font></td>
  </tr>
</table>
  <br>
<ol class="text">
    <li>
      <p>The Selection Sort also makes several passes through the list. On each pass, it compares each remaining item to the smallest (or largest) item that has been found so far in the pass. In the example below, the Selection Sort method finds the smallest item on each pass. At the end of a pass, the smallest item found is swapped with the last remaining item for that pass. Thus, swapping only occurs once for each pass. Reducing the number of swaps makes the algorithm more efficient.</p>
    </li>
<li>The logic of Selection Sort is similar to Bubble Sort except that fewer swaps are executed.
  <p><code><strong>void</strong> selectionSort(ArrayList &lt;Integer&gt; list){<br>
  &#xA0;&#xA0;<strong>int</strong> min, temp;<br>
  <br>
  &#xA0;&#xA0;<strong>for</strong> (<strong>int</strong> outer = 0; outer &lt; list.size() - 1; outer++){<br>
  &#xA0;&#xA0;&#xA0;&#xA0;min = outer;<br>
  &#xA0;&#xA0;&#xA0;&#xA0;<strong>for</strong> (<strong>int</strong> inner = outer + 1; inner &lt; list.size(); inner++){<br>
  &#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<strong>if</strong> (list.get(inner) &lt; list.get(min)) {<br>
  &#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;min = inner; // a new smallest item is found<br>
  &#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;}<br>
  &#xA0;&#xA0;&#xA0;&#xA0;}<br>
  &#xA0;&#xA0;&#xA0;&#xA0;//swap list[outer] &amp; list[min]<br>
  &#xA0;&#xA0;&#xA0;&#xA0;temp = list.get(outer);<br>
  &#xA0;&#xA0;&#xA0;&#xA0;list.set(outer, list.get(min));<br>
  &#xA0;&#xA0;&#xA0;&#xA0;list.set(min, temp);<br>
  &#xA0;&#xA0;}<br>
  }</code></p>
</li>
</ol>  <ol class="text" start="3">
        <li><p>Again, assuming that we have a list of 6 numbers, the <code>outer</code> loop will range from 1 to 5. When <code>outer = 1</code>, we will look for the smallest value in the list and move it to the first position in the array.</p>
        </li>
    <li>
      <p>However, when looking for the smallest value to place in position 1, we will not swap as we search through the list. The algorithm will check from indexes 1 to 5, keeping track of where the smallest value is found by saving the index of the smallest value in <code>min</code>. After we have found the location of the smallest value, we swap <code>list[outer]</code> and <code>list[min]</code>.</p>
    </li>
<li>
        <p>By keeping track of where the smallest value is located and swapping only once, we have a more efficient algorithm than Bubble Sort.</p>
</li>
<li>  Here is a small list of numbers to test your understanding of <u>Selection Sort</u>. Fill in the correct numbers for each line after the execution of the <code>outer</code> loop. (Answers are found in <a href="HA17_1Answers.html" target="_blank">Lesson A17 Handout</a>, <em>Sorting Answers</em>.)</li>
</ol>
<blockquote>
  <table width="500" border="0" cellspacing="0" cellpadding="3">
    <tr class="text">
      <td><div align="center">outer</div></td>
      <td><div align="center">57</div></td>
      <td><div align="center">95</div></td>
      <td><div align="center">88</div></td>
      <td><div align="center">14</div></td>
      <td><div align="center">25</div></td>
      <td><div align="center">6</div></td>
    </tr>
    <tr class="text">
      <td><div align="center">1</div></td>
      <td><div align="center">_____</div></td>
      <td><div align="center">_____</div></td>
      <td><div align="center">_____</div></td>
      <td><div align="center">_____</div></td>
      <td><div align="center">_____</div></td>
      <td><div align="center">_____</div></td>
    </tr>
    <tr class="text">
      <td><div align="center">2</div></td>
      <td><div align="center">_____</div></td>
      <td><div align="center">_____</div></td>
      <td><div align="center">_____</div></td>
      <td><div align="center">_____</div></td>
      <td><div align="center">_____</div></td>
      <td><div align="center">_____</div></td>
    </tr>
    <tr class="text">
      <td><div align="center">3</div></td>
      <td><div align="center">_____</div></td>
      <td><div align="center">_____</div></td>
      <td><div align="center">_____</div></td>
      <td><div align="center">_____</div></td>
      <td><div align="center">_____</div></td>
      <td><div align="center">_____</div></td>
    </tr>
    <tr class="text">
      <td><div align="center">4</div></td>
      <td><div align="center">_____</div></td>
      <td><div align="center">_____</div></td>
      <td><div align="center">_____</div></td>
      <td><div align="center">_____</div></td>
      <td><div align="center">_____</div></td>
      <td><div align="center">_____</div></td>
    </tr>
    <tr class="text">
      <td><div align="center">5</div></td>
      <td><div align="center">_____</div></td>
      <td><div align="center">_____</div></td>
      <td><div align="center">_____</div></td>
      <td><div align="center">_____</div></td>
      <td><div align="center">_____</div></td>
      <td><div align="center">_____</div></td>
    </tr>
  </table>
  <p>&#xA0;</p>
</blockquote><p>&#xA0;</p><br><br>
<table cellspacing="0" cellpadding="0" border="0">
  <tr>
    <td width="90%"><span class="header">D. Insertion Sort</span></td>
    <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 6 of 11</nobr></font></td>
  </tr>
</table>
  <br>
  <ol class="text">
    <li>
      <p>Insertion Sort takes advantage of the following fact.</p>      
	<p>If A &lt; B and B &lt; C, then it follows that A &lt; C. We can skip the comparison of A and C.</p>
    </li>
  </ol>
  <ol class="text" start="2">
    <li><p>Consider the following partially sorted list of numbers.</p>
      <p> 2 5 8 3 9 7</p>
      <p>The first three values of the list are sorted. The 4th value in the list, (3), needs to move back in the list between the 2 and 5. </p>
    <p><img src="http://iws.punahou.edu/user/DKiang/apcs/LessonA17/images/Fig_A17_1.gif" width="128" height="62"></p>
    <p>This involves two tasks, finding the correct insert point and a right shift of any values between the start and insertion point.</p>
    </li>
<li>The code follows.
          <p><code><strong>void</strong> insertionSort(ArrayList &lt;Integer&gt; list){<br>
  &#xA0;&#xA0;<strong>for</strong> (<strong>int</strong> outer = 1; outer &lt; list.size(); outer++){<br>
  &#xA0;&#xA0;&#xA0;&#xA0;<strong>int</strong> position = outer;<br>
  &#xA0;&#xA0;&#xA0;&#xA0;<strong>int</strong> key = list.get(position);<br>
        <br>
  &#xA0;&#xA0;&#xA0;&#xA0;// Shift larger values to the right<br>
  &#xA0;&#xA0;&#xA0;&#xA0;<strong>while</strong> (position &gt; 0 &amp;&amp; list.get(position - 1) &gt; key){<br>
  &#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;list.set(position, list.get(position - 1));<br>
  &#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;position--;<br>
  &#xA0;&#xA0;&#xA0;&#xA0;}<br>
  &#xA0;&#xA0;&#xA0;&#xA0;list.set(position, key);<br>
  &#xA0;&#xA0;}<br>
        }</code></p>
        </li>
        <li>
          <p>By default, a list of one number is already sorted. Hence the <code>outer</code> loop skips position 0 and ranges from positions 1 to <code>list.size()</code>. For the sake of discussion, let us assume a list of 6 numbers.</p>
        </li>
        <li>
          <p>For each pass of outer, the algorithm will determine two things concerning the value stored in list[outer]. First, it finds the location where list[outer] needs to be inserted in the list. Second, it does a right shift on sections of the array to make room for the inserted value if necessary.</p>
</li>
        <li>
          <p>Constructing the inner <strong><code>while</code></strong> loop is an appropriate place to apply DeMorgan&#x2019;s laws:</p>
          <ol>
            <li>
              <p>The inner <strong><code>while</code></strong> loop postcondition has two possibilities:<br>
          The value (key) is larger than its left neighbor.<br>
          The value (key) moves all the way back to position 0.</p>
            </li>
            <li>
              <p>This can be summarized as:
              </p>
              <p> <code>(0 == position || list.get(position - 1) &lt;= key)</code></p>
            </li>
          <li>
              <p>If we negate the loop postcondition, we get the while loop boundary condition:</p>
              <p> <code>(0 != position &amp;&amp; list.get(position - 1) &gt; key)</code></p>
          </li>
          <li>
              <p>This can also be rewritten as:</p>
              <p> <code>((position &gt; 0) &amp;&amp; (list.get(position - 1) &gt; key))</code></p>
          </li>
          </ol>
</li>
        <li>
          <p>The two halves of the boundary condition cover these situations:
          </p>
          <p> <code>(position &gt; 0)</code> -&gt; we are still within the list, keep processing</p>
          <p><code>list[position - 1] &gt; key</code> -&gt; the value in <code>list[pos-1]</code> is larger than <code>key</code>, keep moving left (<code>position--</code>) to find the first value smaller than <code>key</code>.</p>
</li>
        <li>
          <p>The Insertion Sort algorithm is appropriate when a list of data is kept in sorted order with infrequent changes. If a new piece of data is added, probably at the end of the list, it will get quickly inserted into the correct position in the list. Many of the other values in the list do not move and the inner <strong><code>while</code></strong> loop will not be used except when inserting a new value into the list.</p>
</li>
        <li>
          <p>Here is the same list of six integers to practice <u>Insertion Sort</u>. (Answers are found in <a href="HA17_1Answers.html" target="_blank">Lesson A17 Handout</a>, <em>Sorting Answers</em>.)</p>
</li>
  </ol>
  <blockquote>
    <table width="500" border="0" cellspacing="0" cellpadding="3">
      <tr class="text">
        <td><div align="center">outer</div></td>
        <td><div align="center">57</div></td>
        <td><div align="center">95</div></td>
        <td><div align="center">88</div></td>
        <td><div align="center">14</div></td>
        <td><div align="center">25</div></td>
        <td><div align="center">6</div></td>
      </tr>
      <tr class="text">
        <td><div align="center">1</div></td>
        <td><div align="center">_____</div></td>
        <td><div align="center">_____</div></td>
        <td><div align="center">_____</div></td>
        <td><div align="center">_____</div></td>
        <td><div align="center">_____</div></td>
        <td><div align="center">_____</div></td>
      </tr>
      <tr class="text">
        <td><div align="center">2</div></td>
        <td><div align="center">_____</div></td>
        <td><div align="center">_____</div></td>
        <td><div align="center">_____</div></td>
        <td><div align="center">_____</div></td>
        <td><div align="center">_____</div></td>
        <td><div align="center">_____</div></td>
      </tr>
      <tr class="text">
        <td><div align="center">3</div></td>
        <td><div align="center">_____</div></td>
        <td><div align="center">_____</div></td>
        <td><div align="center">_____</div></td>
        <td><div align="center">_____</div></td>
        <td><div align="center">_____</div></td>
        <td><div align="center">_____</div></td>
      </tr>
      <tr class="text">
        <td><div align="center">4</div></td>
        <td><div align="center">_____</div></td>
        <td><div align="center">_____</div></td>
        <td><div align="center">_____</div></td>
        <td><div align="center">_____</div></td>
        <td><div align="center">_____</div></td>
        <td><div align="center">_____</div></td>
      </tr>
      <tr class="text">
        <td><div align="center">5</div></td>
        <td><div align="center">_____</div></td>
        <td><div align="center">_____</div></td>
        <td><div align="center">_____</div></td>
        <td><div align="center">_____</div></td>
        <td><div align="center">_____</div></td>
        <td><div align="center">_____</div></td>
      </tr>
    </table>
  </blockquote>  <p>&#xA0;</p>
  <br><br>
<table cellspacing="0" cellpadding="0" border="0">
  <tr>
    <td width="90%"><span class="header">E. Counting Steps - Quadratic Algorithms</span></td>
    <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 7 of 11</nobr></font></td>
  </tr>
</table>
  <br>
<ol class="text">
	<li><p>These three sorting algorithms are categorized as quadratic sorts because the number of steps increases as a quadratic function of the size of the list.</p>
	</li>
<li>
        <p>It will be very helpful to study algorithms based on the number of steps they require to solve a problem. We will add code to the sorting template program and count the number of steps for each algorithm.</p>
</li>
<li>
    <p>This will require the use of an instance variable - we&apos;ll call it <code>steps</code>. The steps variable will be maintained within the sorting class and be accessed through appropriate accessor and modifier methods. You will need to initialize <code>steps</code> to 0 at the appropriate spot in the main menu method.</p>
</li>
<li>
    <p>For our purposes, we will only count comparisons of items in the list, and gets or sets within the list. These operations are typically the most expensive (time-wise) operations in a sort.</p>
</li>
<li>
    <p>As you type in the sorting algorithms, add increment statements for the instance variable <code>steps</code>. For example, here is a revised version of the <code>bubbleSort</code> method:</p>
    <p><code><strong>public</strong> void bubbleSort(ArrayList &lt;Comparable&gt; list){<br>
            &#xA0;&#xA0;steps = 0;<br>
            &#xA0;&#xA0;<strong>for</strong> (<strong>int</strong> outer = 0; outer &lt; list.size() - 1; outer++){<br>
            &#xA0;&#xA0;&#xA0;&#xA0;<strong>for</strong> (<strong>int</strong> inner = 0; inner &lt; list.size()-outer-1; inner++){<br>
            &#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;steps += 3;//count one compare and 2 gets<br>
            &#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<strong>if</strong> (list.get(inner).compareTo(list.get(inner + 1)) &gt; 0){<br>
            &#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;steps += 4;//count 2 gets and 2 sets<br>
            &#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;Comparable temp = list.get(inner);<br>
            &#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;list.set(inner,list.get(inner + 1));<br>
            &#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;list.set(inner + 1,temp);<br>
            &#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;}<br>
            &#xA0;&#xA0;&#xA0;&#xA0;}<br>
            &#xA0;&#xA0;}<br>
          }</code></p>
</li>
<li>
    <p>It is helpful to remember that a <strong><code>for</code></strong> statement is simply a compressed <strong><code>while</code></strong> statement. Each <strong><code>for</code></strong> loop has three parts: initialization, boundary check, and incrementation.</p>
</li>
<li>
    <p>As you count the number of steps, an interesting result will show up in your data. As the size of the data set doubles, the number of steps executed increases by approximately four times, a &#x201C;quadratic&#x201D; rate.</p>
</li>
<li>
    <p>Bubble Sort is an example of a quadratic algorithm in which the number of steps required increases at a quadratic rate as the size of the data set increases.</p>
</li>
<li>  A quadratic equation in algebra is one with a squared term, like x<sup>2</sup>. In our sorting example, as the size of the array increases to N, the number of steps required for any of the quadratic sorts increases as a function of N<sup>2</sup>.</li>
</ol>
<p>&#xA0;</p><br><br>
<table cellspacing="0" cellpadding="0" border="0">
  <tr>
    <td width="90%"><span class="header">F. Animated Sort Simulations</span></td>
    <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 8 of 11</nobr></font></td>
  </tr>
</table>
  <br>
<ol class="text">
	<li><p>Rameen Mohammadi of the Computer Science Department at SUNY Oswego has created a web applet located at <a href="http://www.cs.oswego.edu/~mohammad/classes/csc241/samples/sort/Sort2-E.html" target="_blank">http://www.cs.oswego.edu/~mohammad/classes/csc241/samples/sort/Sort2-E.html</a> that provides a nice illustration of animated sorting simulations. </p></li>
</ol>
<br><br>
<table cellspacing="0" cellpadding="0" border="0">
  <tr>
    <td width="90%"><span class="header">G. Sorting Objects</span></td>
    <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 9 of 11</nobr></font></td>
  </tr>
</table>
  <br>
<ol class="text">
	<li>
	  <p>Notice that the sorts we developed above know how to compare Integers. Comparison is built into the Integer class. What if we wanted to write a sort that could work on Strings? You cannot use &#x2018;&lt;&#x2019; on Strings. Remember you have to use the compareTo method.</p>
	</li>
<li>
        <p>To convert the BubbleSort, make the following changes that are highlighted in yellow. </p>
        <p><code><strong>void</strong> bubbleSort(ArrayList &lt;String&gt; list){<br>
  &#xA0;&#xA0;<strong>for</strong> (<strong>int</strong> outer = 0; outer &lt; list.length - 1; outer++){<br>
  &#xA0;&#xA0;&#xA0;&#xA0;<strong>for</strong> (<strong>int</strong> inner = 0; inner &lt; list.size()-outer-1; inner++){<br>
  &#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<strong>if</strong> (list.get(inner).compareTo(list.get(inner + 1) &gt; 0){<br>
  &#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//swap list[inner] &amp; list[inner+1]<br>
      &#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;String temp = list.get(inner);<br>
      &#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;list.set(inner, list.get(inner + 1));<br>
      &#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;list.set(inner + 1, temp);<br>
      &#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;}<br>
      &#xA0;&#xA0;&#xA0;&#xA0;}<br>
      &#xA0;&#xA0;}<br>
      }</code></p>
</li>
<li>
    <p>If I am able to sort my data, there must be an order defined for it. Classes that have an order should have a compareTo method. Java defines an <code>Interface</code>, Comparable, just for this purpose (see below for some information on Comparable). To make a BubbleSort that will work on any objects that implement Comparable, make the following changes, again highlighted in yellow.</p>
    <p><code><strong>void</strong> bubbleSort(ArrayList &lt;Comparable&gt; list){<br>
  &#xA0;&#xA0;<strong>for</strong> (<strong>int</strong> outer = 0; outer &lt; list.length - 1; outer++){<br>
  &#xA0;&#xA0;&#xA0;&#xA0;<strong>for</strong> (<strong>int</strong> inner = 0; inner &lt; list.size()-outer-1; inner++){<br>
  &#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<strong>if</strong> (list.get(inner).compareTo(list.get(inner + 1) &gt; 0){<br>
  &#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//swap list[inner] &amp; list[inner+1]<br>
          &#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<strong>Comparable</strong> temp = list.get(inner);<br>
          &#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;list.set(inner, list.get(inner + 1));<br>
          &#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;list.set(inner + 1, temp);<br>
          &#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;}<br>
          &#xA0;&#xA0;&#xA0;&#xA0;}<br>
          &#xA0;&#xA0;}<br>
          }
    </code></p>
    <p>Now this method is quite reusable because we can use it to sort any Comparable object. The <code>compareTo</code> interface follows.</p>
    <p><code><u>Interface java.lang.Comparable</u><br>
            int compareTo(Object other)<br>
            &#xA0;&#xA0;&#xA0;&#xA0;// returns value &lt; 0 if this is less than other<br>
        &#xA0;&#xA0;&#xA0;&#xA0;// returns value = 0 if this is equal to other<br>
        &#xA0;&#xA0;&#xA0;&#xA0;// returns value &gt; 0 if this is greater than other</code></p>
    <p>Remember to consider whether or not it makes sense to compare objects that you build. If it does, implement the Comparable Interface. It would also make sense to provide an equals method for your class.</p>
</li>
</ol>
<p>&#xA0;</p><br>  
  <br>
  <table cellspacing="0" cellpadding="0" border="0">
    <tr>
      <td width="90%"><span class="header">Summary/Review</span></td>
      <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 10 of 11</nobr></font></td>
    </tr>
  </table>
  <br>
  <p class="text">Sorting data is one of the best applications of computers and software. What takes hours or days by hand can be sorted in seconds or minutes by a computer. However, these quadratic algorithms have problems sorting large amounts of data. More efficient sorting algorithms will be covered in later lessons.</p>
  <br><br><br><h2>Chapter 18</h2><br>  
  <br>
  <table cellspacing="0" cellpadding="0" border="0">
    <tr>
      <td width="90%"><span class="header">A18 Introduction</span></td>
      <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 1 of 9</nobr></font></td>
    </tr>
  </table>
  <br>
  <p class="text">In Lesson A17, <em>Quadratic Sorting Algorithms</em>, we saw how the number of steps required increased N<sup>2</sup> when sorting N elements. In this lesson, we will study a recursive sort, called <code>mergeSort</code> that works by dividing lists in half. After solving a preliminary merge problem, you will code a recursive <code>mergeSort</code>.</p>
  <p class="text">The key topics for this lesson are:</p>
  <ol type="A" class="text">
    <li><a href="A18-A.html">Non-Recursive MergeSort</a> </li>
    <li><a href="A18-B.html">A Merge Algorithm</a></li>
  <li><a href="A18-C.html">Recursive MergeSort</a></li>
  <li><a href="A18-D.html">Order of Recursive MergeSort</a></li>
  </ol><br>  
  <br>
  <table cellspacing="0" cellpadding="0" border="0">
    <tr>
      <td width="90%"><span class="header"><a href="../vocabulary/index_A.html#A18">A18 Vocabulary</a></span></td>
      <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 2 of 9</nobr></font></td>
    </tr>
  </table>
  <br>
  <table width="500" border="0">
    <tr class="text">
      <td width="50%">MERGE</td>
      <td width="50%">MERGESORT</td>
    </tr>
    <tr class="text">
      <td width="50%">&#xA0;</td>
      <td width="50%">&#xA0;</td>
    </tr>
    <tr class="text">
      <td width="50%">&#xA0;</td>
      <td width="50%">&#xA0;</td>
    </tr>
    <tr class="text">
      <td width="50%">&#xA0;</td>
      <td width="50%">&#xA0;</td>
    </tr>
    <tr class="text">
      <td width="50%">&#xA0;</td>
      <td width="50%">&#xA0;</td>
    </tr>
    <tr class="text">
      <td width="50%">&#xA0;</td>
      <td width="50%">&#xA0;</td>
    </tr>
    <tr>
      <td width="50%">&#xA0;</td>
      <td width="50%">&#xA0;</td>
    </tr>
  </table>
  <br>
  <br>  
  <br>
  <table cellspacing="0" cellpadding="0" border="0">
    <tr>
      <td width="90%"><span class="header">A. A Non-Recursive MergeSort</span></td>
      <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 3 of 9</nobr></font></td>
    </tr>
  </table>
  <br>
  <ol class="text">
    <li>
      <p>The overall logic of <code>mergeSort</code> is to &quot;divide and conquer.&quot; A list of random integers will be split into two or more equal-sized lists (each with the same number of elements, plus or minus one), with each partial list or &#x201C;sublist&#x201D; sorted independently of the other. The next step will be to merge the two sorted sublists back into one big sorted list.</p>
    </li>
    <li>
        <p>Here is a non-recursive <code>mergeSort</code> method. We divide the list into two equal-sized parts and sort each with the selection sort, then merge the two using an algorithm to be discussed in part B.</p>
        <p><code>/* List A is unsorted, with A.size() values in the ArrayList.<br>
      first is the index of the first value; last<br>
      is the index of the last value in the ArrayList;<br>
      first &lt; last.<br>
      */<br>
      <strong>void</strong> mergeSort (<strong>ArrayList &lt;Integer&gt; A</strong>, <strong>int</strong> first, <strong>int</strong> last){<br>
      &#xA0;&#xA0;<strong>int</strong> mid;</code></p>
        <p><code> &#xA0;&#xA0;mid = (first + last) / 2;<br>
      &#xA0;&#xA0;selectionSort (A, first, mid);<br>
      &#xA0;&#xA0;selectionSort (A, mid+1, last);<br>
      &#xA0;&#xA0;merge (A, first, mid, last);<br>
      }</code></p>
    </li>
    <li><p>A modified selection sort will have to be written to sort a range of values in list A. Likewise, the merge method will have to be modified to internally merge two halves of the array into one ordered array.</p>
      <table width="400" border="0" cellspacing="0" cellpadding="0">
        <tr>
          <td bgcolor="#000000"><table width="100%" border="0" cellspacing="1" cellpadding="3">
            <tr>
              <td bgcolor="#FFFFFF" class="text"><strong>See <a href="transparency/Transparency_A18.1.doc" target="_blank">Transparency A18.1</a>,</strong> <strong><em>MergeSort Example</em></strong></td>
            </tr>
          </table></td>
        </tr>
      </table><br>
    </li>
<li><p>The following example will illustrate the action of a non-recursive mergeSort on a section of a list containing 8 values:</p>
  <p><img src="http://iws.punahou.edu/user/DKiang/apcs/LessonA18/images/Fig_A18_1.gif" width="322" height="137"></p>
</li>
<li>  Merging the two halves of the array in the modified merge method will require the use of a local temporary array. Because the two sublists are stored within one array, the easiest approach is to merge the two sublists into another array, then copy the temp array back to the original.
<p><img src="http://iws.punahou.edu/user/DKiang/apcs/LessonA18/images/Fig_A18_2.gif" width="380" height="105"></p>
<p>Then copy <code>Temp</code> back into List A:</p>
<p><img src="http://iws.punahou.edu/user/DKiang/apcs/LessonA18/images/Fig_A18_3.gif" width="380" height="105"></p>
</li>
<li>This version of <code>merge</code> will need to be able to work with sections of <code>ArrayList</code> A. Here is a proposed parameter list for merge:
          <p><code>/* will merge the two sorted sublists within A into<br>
          one continuous sublist from A[first] .. A[last].<br>
          The left list ranges from A[first]..A[mid]. The<br>
          right list ranges from A[mid+1]..A[last].<br>
          */<br>
          <strong>void</strong> merge (<strong>ArrayList &lt;Integer&gt; A</strong>, <strong>int</strong> first, <strong>int</strong> mid, <strong>int</strong> last)</code></p>
        </li>
<li><p>The recursive version of <code>mergeSort</code> will require the above version of merge. However, to help you understand how to write a merge method, we next present a simpler merge algorithm.</p></li>
  </ol>
	<p>&#xA0;</p>
  <br><br>  
  <table cellspacing="0" cellpadding="0" border="0">
    <tr>
      <td width="90%"><span class="header">B. A Merge Algorithm</span></td>
      <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 4 of 9</nobr></font></td>
    </tr>
  </table>
  <br>
  <ol class="text">
    <li>
      <p>The <code>mergeSort</code> algorithm requires a merge algorithm that we will design first.</p>
    </li>
    <li>
      <p>The method header and the specifications of the <code>merge</code> method are given below. You may assume the <code>ArrayList</code> definitions from the sorting template program in Lesson 17 apply.</p>
    <p><code>/* Preconditions: Lists A and B are non-empty and in sorted nondecreasing order.<br>
  Action: Lists A and B are merged into one ArrayList, C.<br>
  Postcondition: List C contains all the values from<br>
  Lists A and B, in nondecreasing order.<br>
  */<br>
  <strong>void</strong> merge (<strong>ArrayList &lt;Integer&gt; A, ArrayList &lt;Integer&gt; B, ArrayList &lt;Integer&gt; C</strong>)</code></p>
    </li>
    <li>
      <p>The merge method breaks down into four cases:</p>
      <ol type="a">
            <li>
              <p>ArrayList A is done, so pull a value from ArrayList B.</p>
            </li>
          <li>
            <p>ArrayList B is done, so pull a value from ArrayList A.</p>
          </li>
          <li>
            <p>Neither is done, and if A[i] &lt; B[j] (where i &amp; j are index markers in lists A and B) then pull from ArrayList A.</p>
          </li>
          <li>
            <p>Neither is done, and if B[j] &lt;= A[i] then pull from ArrayList B.<br>
              </p>
          </li>
        </ol>
    </li>
    <li>It is important to deal with the four cases in the order described above. For example, if you are done with ArrayList A (if i &gt; A.length-1), you do not want to inspect any values past A[i].</li>
    </ol>
  <ol start="5" class="text">
      <li>
        <p>Example of method merge results:</p>
		<table width="400" border="0" cellspacing="0" cellpadding="0">
          <tr>
            <td bgcolor="#000000"><table width="100%" border="0" cellspacing="1" cellpadding="3">
              <tr>
                <td height="21" bgcolor="#FFFFFF" class="text"><strong>See <a href="transparency/Transparency_A18.2.doc">Transparency A18.2</a>, <em>Merging Two Lists</em></strong></td>
              </tr>
            </table></td>
          </tr>
        </table>
      <blockquote>
          <p>A: 2 6 11 15 21</p>
          <p>B: 4 5 9 13 17 25 29</p>
          <p>C: 2 4 5 6 9 11 13 15 17 21 25 29</p>
      </blockquote>
      </li>
      </ol>
  <p>&#xA0;</p><br><br>
<table cellspacing="0" cellpadding="0" border="0">
  <tr>
    <td width="90%"><span class="header">C. Recursive MergeSort</span></td>
    <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 5 of 9</nobr></font></td>
  </tr>
</table>
  <br>
  <ol class="text">
    <li>
      <p>Instead of dividing the list once, a recursive mergeSort will keep dividing the list in half until the sublists are one or two values in length.</p>
    </li>
    <li>
        <p>When developing a recursive solution, a key step is identifying the base case of the solution. What situation will terminate the recursion? In this case, a sublist of one or two values will be our two base cases.</p>
    </li>
  <li>      Let&apos;s try and work through the recursive mergeSort of a list of eight values.</li>
  </ol>
  <blockquote>
    <p align="center"><img src="http://iws.punahou.edu/user/DKiang/apcs/LessonA18/images/Fig_A18_4.gif" width="300" height="38"></p>
    <p class="text">The list is divided into two sublists:</p>
    <p align="center"><img src="http://iws.punahou.edu/user/DKiang/apcs/LessonA18/images/Fig_A18_5.gif" width="325" height="38"></p>
    <p class="text">Now let&apos;s work on the left sublist. It will be divided into lists of two.</p>
    <p align="center"><img src="http://iws.punahou.edu/user/DKiang/apcs/LessonA18/images/Fig_A18_6.gif" width="175" height="38"></p>
    <p class="text">Each list of two is now very easy to sort. After each list of two is sorted, we then merge these two lists back into a list of four.</p>
    <p align="center"><img src="http://iws.punahou.edu/user/DKiang/apcs/LessonA18/images/Fig_A18_7.gif" width="175" height="162"></p>
    <p class="text">Now the algorithm proceeds to solve the right sublist (positions 5-8) recursively. Then the two lists of four are merged back together.</p>
    <p align="center"><img src="http://iws.punahou.edu/user/DKiang/apcs/LessonA18/images/Fig_A18_8.gif" width="338" height="280"></p>
  </blockquote>  <p>&#xA0;</p><br><br>
<table cellspacing="0" cellpadding="0" border="0">
  <tr>
    <td width="90%"><span class="header">D. Order of Recursive MergeSort</span></td>
    <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 6 of 9</nobr></font></td>
  </tr>
</table>
  <br>
  <ol class="text">
    <li><p>Suppose that we have a list of 8 numbers. If we trace the migration of one value, it will be a member of the following sizes of lists: eight, four, two. The number of calls of <code>mergeSort</code> needed to sort one value into its final resting spot is log<sub>2</sub>N. If N = 8, then it will take three calls of the algorithm for one value to find its final resting spot.</p>
    </li>
    <li>
        <p>We must apply log<sub>2</sub>N steps to sort N elements in the list. The order of recursive <code>Mergesort</code> is O(N * log<sub>2</sub>N) or O(N * log N).</p>
    </li>
  <li>
      <p>What about the cost of merging the fragments of the list? The merge algorithm is a linear one, so when combined with the <code>mergeSort</code> routine, we have a O (N * log N) + O(N), which remains in the category of an O(N * log N) algorithm.</p>
    </li>
  </ol>
  <p>&#xA0;</p>
<br>  
  <br>
  <table cellspacing="0" cellpadding="0" border="0">
    <tr>
      <td width="90%"><span class="header">Summary/Review</span></td>
      <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 7 of 9</nobr></font></td>
    </tr>
  </table>
  <br>
  <p class="text">The recursive <code>mergeSort</code> produces a dramatic increase in efficiency in comparison with the N<sup>2</sup> order of the quadratic sorts. This concept of dividing the problem in two is used in several other classic algorithms. Once again, recursion makes it easier to define a problem and code the solution.</p>
  <br><br><br><h2>Chapter 19</h2><br>  
  <br>
  <table cellspacing="0" cellpadding="0" border="0">
    <tr>
      <td width="90%"><span class="header">A19 Introduction</span></td>
      <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 1 of 9</nobr></font></td>
    </tr>
  </table>
  <br>
  <p class="text">Searching for an item is a very important algorithm to a computer scientist. What makes computers tremendously valuable is their ability to store and search for information quickly and efficiently. For example, Internet search engines process billions of pages of information to help determine the most appropriate resources for users, and a word processor&#x2019;s spell-checking feature enables quick searching of large dictionaries. In this lesson, you will learn about a simple sequential search and the very efficient binary search.</p>
  <p class="text">The key topics for this lesson are:</p>
  <ol type="A" class="text">
    <li class="text"><a href="A19-A.html">Sequential Search</a></li>
    <li class="text"><a href="A19-B.html">Binary Search</a></li>
  <li class="text"><a href="A19-C.html">Recursive vs. Non-recursive Algorithms</a></li>
  </ol><br>  
  <br>
  <table cellspacing="0" cellpadding="0" border="0">
    <tr>
      <td width="90%"><span class="header"><a href="../vocabulary/index_A.html#A19">A19 Vocabulary</a></span></td>
      <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 2 of 9</nobr></font></td>
    </tr>
  </table>
  <br>
  <table width="500" border="0">
    <tr class="text">
      <td>BINARY SEARCH</td>
      <td>SEQUENTIAL SEARCH</td>
    </tr>
    <tr class="text">
      <td>&#xA0;</td>
      <td>&#xA0;</td>
    </tr>
    <tr class="text">
      <td>&#xA0;</td>
      <td>&#xA0;</td>
    </tr>
    <tr class="text">
      <td>&#xA0;</td>
      <td>&#xA0;</td>
    </tr>
    <tr class="text">
      <td>&#xA0;</td>
      <td>&#xA0;</td>
    </tr>
    <tr class="text">
      <td>&#xA0;</td>
      <td>&#xA0;</td>
    </tr>
    <tr>
      <td>&#xA0;</td>
      <td>&#xA0;</td>
    </tr>
  </table>
  <br>
  <br>  
  <br>
  <table cellspacing="0" cellpadding="0" border="0">
    <tr>
      <td width="90%"><span class="header">A. Sequential Search</span></td>
      <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 3 of 9</nobr></font></td>
    </tr>
  </table>
  <br>
  <ol class="text">
    <li>
      <p>Searching a linear data structure, such as an array, can be as simple and straightforward as checking through every value until you find what you are looking for. A sequential search, also known as a <em>linear search</em>, involves starting at the beginning of a list or sequence, sorted or not, and searching one-by-one through each item, in the order they exist in the list, until the value is found.</p>
    </li>
  <li>
    <p>This unsophisticated approach is appropriate for small lists or unordered lists.</p>
  </li>
  <li>
    <p>The order of a sequential search is linear, O(N).</p>
  </li>
  </ol>
  <p>&#xA0;</p>
  <br><br>  
  <table cellspacing="0" cellpadding="0" border="0">
    <tr>
      <td width="90%"><span class="header">B. Binary Search</span></td>
      <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 4 of 9</nobr></font></td>
    </tr>
  </table>
  <br>
  <ol class="text">
    <li>
      <p>The word binary (from the word two) refers to anything with two possible options or parts. A binary search involves binary decisions - decisions with two choices.</p>
    </li>
<li>
        <p>The underlying idea of a binary search is to divide one&apos;s data in half and to examine the data at the point of the split. If the data is sorted, it&apos;s very easy and efficient to ignore one half or the other half of the data, depending on where the value that is being searched is located.</p>
</li>
  <li>
      <p>Assuming that a list is already sorted, a target value is searched for by repeating the following steps:</p>
    <ol type="a">
            <li>
              <p>Divide the list in half.</p>
            </li>
            <li>
              <p>Examine the value in the middle of the list. Is the target value equal to the value there, or does it come before or after the center value? If the target value comes before or after, then return to step a, to repeat the process with the halved list where the target value is located.</p>
            </li>
        </ol>
  </li>
  <li>
    <p>For example, with a list of 1,024 sorted values, we happen to be searching for a target value that is stored in position 492. Using a binary search, the list of 1,024 is split in half; because the target value is not found in position 512, we proceed to search the first half (and discard the values in the second half). Within the sublist from 1...512, we do another binary search sequence: split; examine; and binary search again.</p>
  </li>
  <li><p>The speed of a binary search comes from the elimination of half of the data set each time. If each arrow below represents one binary search process, only ten steps are required to search a list of 1,024 numbers:</p>
    <p><img src="http://iws.punahou.edu/user/DKiang/apcs/LessonA19/images/Fig_A19_2.gif" width="487" height="19"></p>
    <p>The log<sub>2</sub>1024 is 10. In a worst-case scenario, if the size of the list doubled to 2,048, only one more step would be required using a binary search.</p>
	<p>The efficiency of a binary search is illustrated in this comparison of the number of entries in a list and the number of binary divisions required.</p>
	<table width="400" border="0" cellspacing="0" cellpadding="0">
      <tr>
        <td bgcolor="#000000"><table width="100%" border="0" cellspacing="1" cellpadding="3">
          <tr bgcolor="#FFFFFF" class="text">
            <td width="50%"><div align="center"><strong>Number of Entries</strong></div></td>
            <td width="50%"><div align="center"><strong>Number of Binary Divisions</strong></div></td>
          </tr>
          <tr bgcolor="#FFFFFF" class="text">
            <td><div align="center">1,024</div></td>
            <td><div align="center">10</div></td>
          </tr>
          <tr bgcolor="#FFFFFF" class="text">
            <td><div align="center">2,048</div></td>
            <td><div align="center">11</div></td>
          </tr>
          <tr bgcolor="#FFFFFF" class="text">
            <td><div align="center">4,096</div></td>
            <td><div align="center">12</div></td>
          </tr>
          <tr bgcolor="#FFFFFF" class="text">
            <td><div align="center">&#x2026;</div></td>
            <td><div align="center">&#x2026;</div></td>
          </tr>
          <tr bgcolor="#FFFFFF" class="text">
            <td><div align="center">32,768</div></td>
            <td><div align="center">15</div></td>
          </tr>
          <tr bgcolor="#FFFFFF" class="text">
            <td><div align="center">&#x2026;</div></td>
            <td><div align="center">&#x2026;</div></td>
          </tr>
          <tr bgcolor="#FFFFFF" class="text">
            <td><div align="center">1,048,576</div></td>
            <td><div align="center">20</div></td>
          </tr>
          <tr bgcolor="#FFFFFF" class="text">
            <td><div align="center">N</div></td>
            <td><div align="center">log<sub>2</sub>N</div></td>
          </tr>
        </table></td>
      </tr>
    </table><br>
	</li>
<li><p>The order of a binary search is O(log<sub>2</sub>N).</p></li>
  </ol>
  <blockquote class="text">&#xA0;</blockquote>
  <p>&#xA0;</p><br><br>
<table cellspacing="0" cellpadding="0" border="0">
  <tr>
    <td width="90%"><span class="header">C. Recursive vs. Non-recursive Algorithms</span></td>
    <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 5 of 9</nobr></font></td>
  </tr>
</table>
  <br>
<ol class="text">
    <li>
      <p>The binary search algorithm can be coded recursively or non-recursively. Here are some arguments for each method.</p>
    </li>
<li>
        <p>A non-recursive version requires less memory and fewer steps by avoiding the overhead of making recursive calls.</p>
</li>
<li>
  <p>However, the recursive version is somewhat easier to understand and code and is more fun! The lab assignment can be coded as either a recursive or non-recursive version of binary search.</p>
</li>
</ol>  <p>&#xA0;</p><br>  
  <br>
  <table cellspacing="0" cellpadding="0" border="0">
    <tr>
      <td width="90%"><span class="header">Summary/Review</span></td>
      <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 6 of 9</nobr></font></td>
    </tr>
  </table>
  <br>
  <p class="text">Searching algorithms is widely used in programs. Binary searching is the fastest - if the list is sorted.</p>
  <br><br><br><h2>Chapter 20</h2><br>  
  <br>
  <table cellspacing="0" cellpadding="0" border="0">
    <tr>
      <td width="90%"><span class="header">A20 Introduction</span></td>
      <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 1 of 8</nobr></font></td>
    </tr>
  </table>
  <br>
  <p class="text">A class represents a set of objects that share the same structure and behaviors. The class determines the structure of objects by specifying variables that are contained in each instance of the class, and it determines behavior by providing the instance methods that express the behavior of the objects. This is a powerful idea. However, something like this can be done in most programming languages. The central new idea in object-oriented programming is to allow classes to express the similarities among objects that share some, but not all, of their structure and behavior. Such similarities can be expressed using inheritance and polymorphism.</p>
  <p class="text">The key topics for this lesson are:</p>
  <ol type="A" class="text">
    <li><a href="A20-A.html">Inheritance</a></li>
    <li><a href="A20-B.html">Abstract Classes</a></li>
  <li><a href="A20-C.html">Polymorphism</a></li>
  <li><a href="A20-D.html">Interfaces</a></li>
  </ol><br>  
  <br>
  <table cellspacing="0" cellpadding="0" border="0">
    <tr>
      <td width="90%"><span class="header"><a href="../vocabulary/index_A.html#A20">A20 Vocabulary</a></span></td>
      <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 2 of 8</nobr></font></td>
    </tr>
  </table>
  <br>
  <table width="500" border="0">
    <tr class="text">
      <td width="50%">ABSTRACT</td>
      <td width="50%">CONCRETE CLASS</td>
    </tr>
    <tr class="text">
      <td width="50%">EARLY BINDING</td>
      <td width="50%">INSTANCE</td>
    </tr>
    <tr class="text">
      <td width="50%">INTERFACE</td>
      <td width="50%">LATE BINDING</td>
    </tr>
    <tr class="text">
      <td width="50%">POLYMORPHISM</td>
      <td width="50%">SUBCLASS</td>
    </tr>
    <tr class="text">
      <td width="50%">SUPERCLASS</td>
      <td width="50%">&#xA0;</td>
    </tr>
    <tr class="text">
      <td width="50%">&#xA0;</td>
      <td width="50%">&#xA0;</td>
    </tr>
    <tr>
      <td width="50%">&#xA0;</td>
      <td width="50%">&#xA0;</td>
    </tr>
  </table>
  <br>
  <br>  
  <br>
  <table cellspacing="0" cellpadding="0" border="0">
    <tr>
      <td width="90%"><span class="header">A. Inheritance</span></td>
      <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 3 of 8</nobr></font></td>
    </tr>
  </table>
  <br>
  <ol class="text">
    <li><p>A key element in Object Oriented Programming (OOP) is the ability to derive new classes from existing classes by adding new methods and redefining existing methods. The new class can inherit many of its attributes and behaviors from the existing class. This process of deriving new classes from existing classes is called inheritance, which was introduced in Lesson A11, Inheritance.</p></li>
    <p align="center"><img src="http://iws.punahou.edu/user/DKiang/apcs/LessonA20/images/Fig_A20_1.gif" width="296" height="121"></p>
  </ol>
	<blockquote>
	  <p class="text">The more general class that forms the basis for inheritance is called the superclass. The more specialized class that inherits from the superclass is called the subclass (or derived class).</p>
	  </blockquote>	<ol class="text" start="2">
	  <li><p>In Java, all classes belong to one big hierarchy derived from the most basic class, called Object. This class provides a few features common to all objects; more importantly, it makes sure that any object is an instance of the Object class, which is useful for implementing structures that can deal with any type of object. If we start a class from &#x201C;scratch,&#x201D; the class automatically extends Object. For example:</p>
          <p><code><strong>public class</strong> SeaCreature{<br>
      ...<br>
      }</code></p>
          <p>is equivalent to:</p>
          <p><code><strong>public class</strong> SeaCreature <strong>extends</strong> Object{<br>
      ...<br>
      }</code></p>
          <p>when new classes are derived from <code>SeaCreature</code>, a class hierarchy is created. For example:</p>
          <p><code><strong>public class</strong> Fish <strong>extends</strong> SeaCreature{<br>
      ...<br>
      }</code></p>
          <p><code><strong>public class</strong> Mermaid <strong>extends</strong> SeaCreature{<br>
      ...<br>
      }</code></p>
          <p>This results in the hierarchy shown below.</p>
	  </li>
	  </ol>	<blockquote>
	    <p align="center"><img src="http://iws.punahou.edu/user/DKiang/apcs/LessonA20/images/Fig_A20_2.gif" width="334" height="131"><br>
          <span class="text">Figure 20-1. <code>SeaCreature</code> and two derived classes</span> </p>
      </blockquote>	  <p>&#xA0;</p>
  <br><br>  
  <table cellspacing="0" cellpadding="0" border="0">
    <tr>
      <td width="90%"><span class="header">B. Abstract Classes</span></td>
      <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 4 of 8</nobr></font></td>
    </tr>
  </table>
  <br>
  <ol class="text">
    <li>
      <p>The classes that lie closer to the top of the hierarchy are more general and abstract; the classes closer to the bottom are more specialized. Java allows us to formally define an <em>abstract</em> class. In an abstract class, some or all methods are declared <strong><code>abstract</code></strong> and left without code.</p>
    </li>
    <li>
        <p>An <strong><code>abstract</code></strong> method has only a heading: a declaration that gives the method&#x2019;s name, return type, and arguments. An <strong><code>abstract</code></strong> method has no code. For example, all of the methods in the definition of the <code>SeaCreature</code> class shown below are abstract. <code>SeaCreature</code> tells us what methods a sea creature must have, but not how they work.</p>
        <p><code>// A type of creature in the sea<br>
            <strong>public abstract class</strong> SeaCreature{<br>
      &#xA0;&#xA0;// Called to move the creature in its environment<br>
      &#xA0;&#xA0;<strong>public abstract void</strong> swim();</code></p>
        <p><code> &#xA0;&#xA0;// Attempts to breed into neighboring locations<br>
      &#xA0;&#xA0;<strong>public abstract void</strong> breed();</code></p>
        <p><code> &#xA0;&#xA0;// Removes this creature from the environment<br>
      &#xA0;&#xA0;<strong>public abstract void</strong> die();</code></p>
        <p><code> &#xA0;&#xA0;// Returns the name of the creature<br>
      &#xA0;&#xA0;<strong>public abstract</strong> String getName();<br>
      }</code></p>
    </li>
  <li>
        <p>In an <strong><code>abstract</code></strong> class, some methods and constructors may be fully defined and have code supplied for them while other methods are <strong><code>abstract</code></strong>. A class may be declared <code>abstract</code> for other reasons as well. For example, some of the instance variables in an <code>abstract</code> class may belong to <code>abstract</code> classes.</p>
  </li>
  <li>
      <p>More specialized subclasses of an <code>abstract</code> class have more and more methods defined. Eventually, down the inheritance line, the code is supplied for all methods. A class where all the methods are fully defined is called a <em>concrete</em> class. A program can only create objects of concrete classes. An object is called an <em>instance</em> of its class. An <strong><code>abstract</code></strong> class cannot be instantiated.</p>
  </li>
  <li>
      <p>Different concrete classes in the same hierarchy may define the same method in different ways. For example:</p>
      <p><code><strong>public class</strong> Fish <strong>extends</strong> SeaCreature{<br>
          &#xA0;&#xA0;...</code></p>
      <p><code> &#xA0;&#xA0;/**<br>
            &#xA0;&#xA0;&#xA0;* Returns the name of the creature<br>
            &#xA0;&#xA0;&#xA0;*/<br>
            &#xA0;&#xA0;<strong>public</strong> String getName(){<br>
            &#xA0;&#xA0;&#xA0;&#xA0;<strong>return</strong> &quot;Wanda the Fish&quot;;<br>
            &#xA0;&#xA0;}<br>
            &#xA0;&#xA0;...<br>
          }</code></p>
      <p><code><strong>public class</strong> Mermaid <strong>extends</strong> SeaCreature{<br>
          &#xA0;&#xA0;...</code></p>
      <p><code> &#xA0;&#xA0;/**<br>
            &#xA0;&#xA0;&#xA0;* Returns the name of the creature<br>
            &#xA0;&#xA0;&#xA0;*/<br>
            &#xA0;&#xA0;<strong>public</strong> String getName(){<br>
            &#xA0;&#xA0;&#xA0;&#xA0;<strong>return</strong> &quot;Ariel the Mermaid&quot;;<br>
            &#xA0;&#xA0;}<br>
            &#xA0;&#xA0;...<br>
          }</code></p>
  </li>
  </ol>
  <p>&#xA0;</p><br><br>
<table cellspacing="0" cellpadding="0" border="0">
  <tr>
    <td width="90%"><span class="header">C. Polymorphism</span></td>
    <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 5 of 8</nobr></font></td>
  </tr>
</table>
  <br>
  <ol class="text">
    <li>In addition to facilitating the re-use of code, inheritance provides a common base data type that lets us refer to objects of specific types through more generic types of references; in particular, we can mix objects of different subtypes in the same collection. For example:
      <p><code>SeaCreature s = <strong>new</strong> Fish(...);<br>
        ...<br>
        s.swim();</code></p>
      <p>The data type of an instance of the <code>Fish</code> class is a <code>Fish</code>, but it is also a kind of <code>SeaCreature</code>. Java provides the ability to refer to a specific type through more generic types of references.</p>
    </li>
    <li>
        <p>There may be situations that require a reference to an object using its more generic supertype rather than its most specific type. One such situation is when different subtypes of objects in the same collection (array, list, etc.) are mixed. For example:</p>
        <p><code>ArrayList &lt;SeaCreature&gt; creature = <strong>new</strong> ArrayList &lt;SeaCreature&gt;;<br>
            Creature.add( <strong>new</strong> Fish(...));<br>
            Creature.add( <strong>new</strong> Mermaid(...));<br>
            ...<br>
          creature.get(currentCreature).swim();</code></p>
        <p>This is possible because both <code>Fish</code> and <code>Mermaid</code> are <code>SeaCreatures</code>.</p>
    </li>
  <li>
        <p>Note that the <code>Fish</code> and <code>Mermaid</code> classes provide two different implementations of the <code>swim</code> method. The correct method that belongs to the class of the actual object is located by the Java virtual machine. That means that one method call</p>
        <p><code>String s = x.getname();</code></p>
        <p>can call different methods depending on the current reference of <code>x</code>. When a subclass redefines the implementation of a method from its superclass, it is called overriding the method. Note that for overridden methods in Java, the actual method to call is always determined at run time. This is called <em>dynamic binding</em> or <em>late binding</em>.</p>
  </li>
  <li>
      <p>The principle that the actual type of the object determines the method to be called is <em>polymorphism</em> (Greek for &#x201C;many shapes&#x201D;). The same computation works for objects of many forms and adapts itself to the nature of the objects.</p>
  </li>
  <li>
    <p>Overloading a method is often confused with overriding a method because the names are so similar. Overloading a method means to keep the name of the method, but change the parameter list. In this case, the compiler can choose the method that is actually called because the signatures are different. The Math class has many examples of overloaded methods. For example Math.max(double a, double b) and Math.max(int a, int b) are overloaded versions of the max method. The compiler determines which one to call depending on the type of the arguments that are being passed in.</p>
  </li>
  </ol>
  <p>&#xA0;</p><br><br>
<table cellspacing="0" cellpadding="0" border="0">
  <tr>
    <td width="90%"><span class="header">D. Interfaces</span></td>
    <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 6 of 8</nobr></font></td>
  </tr>
</table>
  <br>
  <ol class="text">
    <li><p>In Lesson A14, <em>Boolean Algebra</em>, it was learned that Java has a class-like form called an <em>interface</em> that can be used to encapsulate only abstract methods and constants. An interface can be thought of as a blueprint or design specification. A class that uses this interface is a class that <em>implements the interface</em>.</p>
    </li>
    <li>
        <p>An interface is similar to an abstract class: it lists a few methods, giving their names, return types, and argument lists, but does not give any code. The difference is that an abstract class my have its constructors and some of its methods implemented, while an interface does not give any code for its methods, leaving their implementation to a class that implements the interface.</p>
    </li>
  <li>
        <p><code>interface</code> and <code>implements</code> are Java reserved words. Here is an example of a simple Java interface:</p>
        <p><code><strong>public interface</strong> Comparable{<br>
          &#xA0;&#xA0;<strong>public int</strong> compareTo(Object other);<br>
          }</code></p>
        <p>This looks much like a class definition, except that the implementation of the <code>compareTo()</code> method is omitted. A class that implements the <code>Comparable</code> interface must provide an implementation for this method. The class can also include other methods and variables. For example,</p>
        <p><code><strong>class</strong> Location <strong>implements</strong> Comparable{<br>
          &#xA0;&#xA0;public int compareTo(Object other){<br>
          &#xA0;&#xA0;&#xA0;&#xA0;. . . // do something -- presumably, compare objects<br>
          &#xA0;&#xA0;}<br>
          &#xA0;&#xA0;&#xA0;&#xA0;. . . // other methods and variables<br>
          }</code></p>
        <p>Any class that implements the <code>Comparable</code> interface defines a <code>compareTo()</code> instance method. Any object created from such a class includes a <code>compareTo()</code> method. We say that an object implements an interface if it belongs to a class that implements the interface. For example, any object of type <code>Location</code> implements the <code>Comparable</code> interface. Note that it is not enough for the object to include a <code>compareTo()</code> method. The class that it belongs to must say that it &#x201C;implements&#x201D; <code>Comparable</code>.</p>
  </li>
  <li>
      <p>A class can implement any number of interfaces. In fact, a class can both extend another class and implement one or more interfaces. So, we can have things like:</p>
      <p><code><strong>class</strong> Fish <strong>extends</strong> SeaCreature <strong>implements</strong> Locatable, Eatable{<br>
            &#xA0;&#xA0;...<br>
          }</code></p>
  </li>
  <li>
      <p>An interface is very much like an abstract class. It is a class that can never be used for constructing objects, but can be used as a basis for making subclasses. Even though you can&apos;t construct an object from an interface, you can declare a variable whose type is given by the interface. For example, if <code>Locatable</code> is an interface defined as follows </p>
      <p><code><strong>public interface</strong> Locatable{<br>
&#xA0;&#xA0;Location location();<br>
          }</code></p>
      <p>then if <code>Fish</code> and <code>Mermaid</code> are classes that implement <code>Locatable</code>, you could say</p>
      <p><code>/**<br>
            &#xA0;* Declare a variable of type Locatable. It can refer to<br>
            &#xA0;* any object that implements the Locatable interface.<br>
            &#xA0;*/<br>
            Locatable nemo;<br>
            <br>
            nemo = <strong>new</strong> Fish(); &#xA0;&#xA0;&#xA0;// nemo now refers to an object<br>
            &#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;// of type Fish<br>
            nemo.location(); &#xA0;&#xA0;&#xA0;&#xA0;&#xA0;// Calls location () method from<br>
            &#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;// class Fish <br>
            nemo = <strong>new</strong> Mermaid(); // Now, nemo refers to an object<br>
            &#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;// of type Mermaid<br>
            nemo.location(); &#xA0;&#xA0;&#xA0;&#xA0;&#xA0;// Calls location() method from<br>
          &#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;// class Mermaid</code></p>
      <p>A variable of type <code>Locatable</code> can refer to any object of any class that implements the <code>Locatable</code> interface. A statement like <code>nemo.location()</code>, above, is legal because <code>nemo</code> is of type <code>Locatable</code>, and any <code>Locatable</code> object has a <code>location()</code> method.</p>
  </li>
  <li>
    <p>You are not likely to need to write your own interfaces until you get to the point of writing fairly complex programs. However, there are a few interfaces that are used in important ways in Java&#x2019;s standard packages. You&#x2019;ll learn about some of these standard interfaces in the next few lessons, and you will see examples of interfaces in the Marine Biology Simulation, which was developed for use in AP Computer Science courses by the College Board&#x2122;.</p>
  </li>
  </ol>
  <p>&#xA0;</p>
<br>  
  <br>
  <table cellspacing="0" cellpadding="0" border="0">
    <tr>
      <td width="90%"><span class="header">Summary/Review</span></td>
      <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 7 of 8</nobr></font></td>
    </tr>
  </table>
  <br>
  <p class="text">The main goals of OOP are team development, software reusability, and easier program maintenance. The main OOP concepts that serve these goals are abstraction, encapsulation, inheritance, and polymorphism. In this lesson, we reviewed these key concepts and their implementation in Java. This lesson examined how Java uses classes and interfaces, inheritance hierarchies, and polymorphism to achieve the goal of better-engineered programs. </p>
  <br><br><br><h2>Chapter 21</h2><br>  
  <br>
  <table cellspacing="0" cellpadding="0" border="0">
    <tr>
      <td width="90%"><span class="header">A21 Introduction</span></td>
      <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 1 of 11</nobr></font></td>
    </tr>
  </table>
  <br>
  <p class="text">Knowing how the computer stores information will give you an understanding of some of the common computational errors such as over-flow, round-off and, under-flow errors. This lesson is a very light introduction to number systems and their relationship to Computer Science.</p>
  <p class="text">The key topics for this lesson are:</p>
  <ol type="A" class="text">
    <li class="text"><a href="A21-A.html">Introduction to Number Systems</a></li>
    <li class="text"><a href="A21-B.html">Review Decimal</a></li>
  <li class="text"><a href="A21-C.html">Octal</a></li>
  <li class="text"><a href="A21-D.html">Hexadecimal</a></li>
  <li class="text"><a href="A21-E.html">Binary</a></li>
  <li class="text"><a href="A21-F.html">Short Cuts Between Binary, Octal, Hexadecimal</a></li>
  <li class="text"><a href="A21-G.html">How this Relates to Computers and Overflow Errors</a></li>
  </ol><br>  
  <br>
  <table cellspacing="0" cellpadding="0" border="0">
    <tr>
      <td width="90%"><span class="header"><a href="../vocabulary/index_A.html#A21">A21 Vocabulary</a></span></td>
      <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 2 of 11</nobr></font></td>
    </tr>
  </table>
  <br>
  <table width="500" border="0">
    <tr class="text">
      <td width="50%">BINARY</td>
      <td width="50%">DECIMAL</td>
    </tr>
    <tr class="text">
      <td width="50%">HEXADECIMAL</td>
      <td width="50%">OCTAL</td>
    </tr>
    <tr class="text">
      <td width="50%">OVER-FLOW ERROR</td>
      <td width="50%">ROUND-OFF ERROR</td>
    </tr>
    <tr class="text">
      <td width="50%">UNDER-FLOW ERROR</td>
      <td width="50%">&#xA0;</td>
    </tr>
    <tr class="text">
      <td width="50%">&#xA0;</td>
      <td width="50%">&#xA0;</td>
    </tr>
    <tr class="text">
      <td width="50%">&#xA0;</td>
      <td width="50%">&#xA0;</td>
    </tr>
    <tr>
      <td width="50%">&#xA0;</td>
      <td width="50%">&#xA0;</td>
    </tr>
  </table>
  <br>
  <br>  
  <br>
  <table cellspacing="0" cellpadding="0" border="0">
    <tr>
      <td width="90%"><span class="header">A. Introduction to Number Systems</span></td>
      <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 3 of 11</nobr></font></td>
    </tr>
  </table>
  <br>
  <ol class="text">
    <li><p>Our number system has 10 as its base. This numbering system (decimal) may have arisen quite naturally from counting on our ten fingers. There are other common number bases that we use without thinking about them, such as when we deal with time (base 60 or sexagesimal): there are, 60 minutes in an hour, and 60 seconds in a minute. Aviators also use a different base when they are dealing with directions and degrees.</p>
    </li>
  <li>
      <p>In Computer Science, we use binary (base 2), octal (base 8), and hexadecimal (base 16) quite a bit. After learning how the bases work, we will look into their relationship to modern computers and how computer calculations are performed.</p>
    </li>
  </ol>
  <p>&#xA0;</p>
  <br><br>  
  <table cellspacing="0" cellpadding="0" border="0">
    <tr>
      <td width="90%"><span class="header">B. Review Decimal</span></td>
      <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 4 of 11</nobr></font></td>
    </tr>
  </table>
  <br>
  <ol class="text">
    <li><p>In reviewing our number system, let&#x2019;s look at what the number 1234 means to us. We are taught very early on about place values. In the decimal number system, starting at the rightmost digit we have the ones place, then the tens place, hundreds place, and finally the thousands place. We are only allowed the digits 0 through 9. The number 1234 represents the following components: </p>
      <blockquote>
        <p><code>1*1000 + 2*100 + 3*10 + 4*1</code></p>
        <p>or</p>
        <p><code>1*10<sup>3</sup> + 2*10<sup>2</sup> + 3*10<sup>1</sup> + 4*10<sup>0</sup></code></p>
      </blockquote>
      <p>We are very accustomed to using decimal numbers so we do not think about breaking a number into its components. However, it is important to learn and understand what numbers represent, often by using hands-on activities. </p>
      <blockquote>
        <p>Example: Given an integer variable num, reverse the number. If we knew there were three digits, we could</p>
        <p><code><strong>int</strong> a = num/100;<br>
              <strong>int</strong> remainder = num%100;<br>
              <strong>int</strong> b = remainder/10;<br>
              <strong>int</strong> c = remainder%10;<br>
            //now we could reassemble it<br>
            num = c*100 + b*10 + a; </code></p>
        <p> This is similar to what we did in Lab Assignment A3.2, <em>Coins</em>.</p>
      </blockquote>
      <p>If we do not know how many digits are in the number, we could use a loop.</p>
      </li>
    <blockquote>
      <p><code><strong>int</strong> x = 12345;<br>
            <strong>int</strong> newX = 0;<br>
            <strong>int</strong> temp = 0;<br>
            while(x &gt; 0){<br>
      &#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;temp = x%10;<br>
      &#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;newX = newX * 10 + temp;<br>
      &#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;x /= 10;<br>
      }<br>
      x = temp;</code></p>
    </blockquote>
    <li>If we move to the right of the decimal place, we start using negative exponents.</li>
  </ol>
  <ol class="text" start="2">
      <blockquote>
          <table width="500" border="0" cellspacing="0" cellpadding="0">
            <tr>
              <td bgcolor="#000000"><table width="100%" border="0" cellspacing="1" cellpadding="3">
                <tr bgcolor="#FFFFFF" class="text">
                  <td width="16%"><div align="center">10<sup>3</sup></div></td>
                  <td width="16%"><div align="center">10<sup>2</sup></div></td>
                  <td width="16%"><div align="center">10<sup>1</sup></div></td>
                  <td width="16%"><div align="center">10<sup>0</sup></div></td>
                  <td width="16%"><div align="center">10<sup>-1</sup></div></td>
                  <td width="16%"><div align="center">10<sup>-2</sup></div></td>
                </tr>
              </table></td>
            </tr>
          </table>
          <p>&#xA0;</p>
      </blockquote>
      </ol>  <p>&#xA0;</p><br><br>
<table cellspacing="0" cellpadding="0" border="0">
  <tr>
    <td width="90%"><span class="header">C. Octal</span></td>
    <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 5 of 11</nobr></font></td>
  </tr>
</table>
  <br>
<ol class="text">
    <li>      After understanding how the decimal number system works, it is quite easy to learn other bases, such as base 8 (octal). They all work basically the same way. In base 8, the available digits are 0 through 7, and each number occupies a place value. The place values are:
      <blockquote>
        <table width="500" border="0" cellspacing="0" cellpadding="0">
          <tr>
            <td bgcolor="#000000"><table width="100%" border="0" cellspacing="1" cellpadding="3">
                <tr bgcolor="#FFFFFF" class="text">
                  <td width="16%"><div align="center">8<sup>3</sup></div></td>
                  <td width="16%"><div align="center">8<sup>2</sup></div></td>
                  <td width="16%"><div align="center">8<sup>1</sup></div></td>
                  <td width="16%"><div align="center">8<sup>0</sup></div></td>
                  <td width="16%"><div align="center">8<sup>-1</sup></div></td>
                  <td width="16%"><div align="center">8<sup>-2</sup></div></td>
                </tr>
            </table></td>
          </tr>
        </table>
        </blockquote>
    <p>We can designate that a number is in a base other than base 10 (decimal) by using subscripts. Note: If there is no subscript, the number is assumed to be decimal. Let&apos;s use the number 123.6 in base 8 - it must be written as 123.6<sub>8</sub>. </p>
    <p> The number 123.68 can be converted to a decimal as:</p>
    <blockquote>
      <p> <code>1*8<sup>2</sup> + 2*8<sup>1</sup> + 3*8<sup>0</sup> + 6*8<sup>-1</sup></code></p>
      <p><code> 1*64 + 2*8 + 3*1 + 6*(1/8)</code></p>
      <p><code> 83.75</code></p>
    </blockquote>
    <p> Now, using the number 567, we&apos;ll show how to convert it from the decimal system to the octal system. Start by looking for the largest power of 8 less than 567. This would be 512 or 8<sup>3</sup>. So in the 8<sup>3</sup> place value, we put a 1. That leaves us with a remainder of 55. The next place value is 8<sup>2</sup>, but 64 is greater than 55 so that place holds a zero. The next place value is 8<sup>1</sup>. 55 divided by 8 gives 6 for the 8<sup>1</sup> place value, with a remainder of 7 left over for the next column. The leftover gets placed in the ones column.</p>
    <blockquote>
      <table width="500" border="0" cellspacing="0" cellpadding="0">
        <tr>
          <td bgcolor="#000000"><table width="100%" border="0" cellspacing="1" cellpadding="3">
              <tr bgcolor="#FFFFFF" class="text">
                <td width="16%"><div align="center">8<sup>3</sup></div></td>
                <td width="16%"><div align="center">8<sup>2</sup></div></td>
                <td width="16%"><div align="center">8<sup>1</sup></div></td>
                <td width="16%"><div align="center">8<sup>0</sup></div></td>
                <td width="16%"><div align="center">8<sup>-1</sup></div></td>
                <td width="16%"><div align="center">8<sup>-2</sup></div></td>
              </tr>
              <tr bgcolor="#FFFFFF" class="text">
                <td><div align="center">1</div></td>
                <td><div align="center">0</div></td>
                <td><div align="center">6</div></td>
                <td><div align="center">7</div></td>
                <td><div align="center">0</div></td>
                <td><div align="center">0</div></td>
              </tr>
          </table></td>
        </tr>
      </table>
      <p>or 1067<sub>8</sub></p>
    </blockquote>
    </li>
</ol>  <p>&#xA0;</p><br><br>
<table cellspacing="0" cellpadding="0" border="0">
  <tr>
    <td width="90%"><span class="header">D. Hexadecimal</span></td>
    <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 6 of 11</nobr></font></td>
  </tr>
</table>
  <br>
  <ol class="text">
    <li>
      <p>Hexadecimal is base 16. This base works exactly the same as base 10 and base 8. Hexadecimal will allow the digits 0 through 15. This gets confusing, however, because the digits 10 through 15 are double digits and raises the question: is 10 a single value or two symbols? To avoid confusion we use other symbols, A through F, to represent the values of 10 through 15. Let&apos;s use the hexadecimal number 34CD and convert it to decimal. This number has the value of:</p>      
	<blockquote>
	    <p><code> 3*16<sup>3</sup> + 4*16<sup>2</sup> + 12*16<sup>1</sup> + 13*16<sup>0</sup><br>
      12288 + 1024 + 192 + 13<br>
      13517</code></p>
	    </blockquote>
	  <p>So the hexadecimal number 34CD is equivalent to 13517 in base 10 (decimal).</p>
	  <p>Converting from decimal to hexadecimal is the same process used for octal earlier: </p>
	  <blockquote>
	    <p><code>12547 -&gt; <br>
  &#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;12547/( 16<sup>3</sup>) -&gt; 3, remainder 259</code></p>
	    <p><code> &#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;259/( 16<sup>2</sup>) -&gt; 1, remainder 3</code></p>
	    <p><code> &#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;3/( 16<sup>1</sup>) -&gt; 0, remainder 3</code></p>
	    </blockquote>
	  <p>So 12547 in the decimal number system is equivalent to 3103<sub>16</sub> in the hexadecimal system.</p>
    </li>
  </ol>
  <p>&#xA0;</p>
  <br><br>
<table cellspacing="0" cellpadding="0" border="0">
  <tr>
    <td width="90%"><span class="header">E. Binary</span></td>
    <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 7 of 11</nobr></font></td>
  </tr>
</table>
  <br>
<ol class="text">
	<li>	  Not surprisingly, binary works the same way as octal and hexadecimal. Binary is base 2, so the only digits that are used are 0 and 1, and the place values are all powers of 2. A binary digit is called a bit. The place values for binary are shown in the table below.
	  <blockquote>
	    <table width="500" border="0" cellspacing="0" cellpadding="0">
          <tr>
            <td bgcolor="#000000"><table width="100%" border="0" cellspacing="1" cellpadding="3">
                <tr bgcolor="#FFFFFF" class="text">
                  <td width="16%"><div align="center">2<sup>3</sup></div></td>
                  <td width="16%"><div align="center">2<sup>2</sup></div></td>
                  <td width="16%"><div align="center">2<sup>1</sup></div></td>
                  <td width="16%"><div align="center">2<sup>0</sup></div></td>
                  <td width="16%"><div align="center">2<sup>-1</sup></div></td>
                  <td width="16%"><div align="center">2<sup>-2</sup></div></td>
                </tr>
                <tr bgcolor="#FFFFFF" class="text">
                  <td><div align="center">8</div></td>
                  <td><div align="center">4</div></td>
                  <td><div align="center">2</div></td>
                  <td><div align="center">1</div></td>
                  <td><div align="center">1/2</div></td>
                  <td><div align="center">1/4</div></td>
                </tr>
            </table></td>
          </tr>
        </table>
	    </blockquote>
	</li>
</ol>
<blockquote>
  <p class="text">Let&apos;s convert two decimal numbers into the binary system: 13 and 482.</p>
  <p class="text">The decimal number <code>13 -&gt; 1101<sub>2</sub> (1*2<sup>3</sup> + 1*2<sup>2</sup> + 0*2<sup>1</sup> +1*2<sup>0</sup>)</code><br>
          <br>
          The decimal number <code>482 -&gt; 111100010<sub>2</sub></code></p>
  <p class="text"> Calculations for converting 482: <br>
          Find the largest power of two that divides into 482. So 2<sup>8</sup>, or 256.<br>
          482/256 = 1 , subtract to get the leftover, 226. <br>
          Now check to see if 2<sup>7</sup>, 128 goes into 226. Notice we only have the choice of 1 or 0 so this will be simple to calculate. 226 - 128 -&gt; 98 (another 1)<br>
          98-64 -&gt; 34 (another 1)<br>
          34-32 -&gt;2 (another 1)<br>
          can&#x2019;t subtract 16 (so a 0 goes here)<br>
          can&#x2019;t subtract 8 (another 0)<br>
          can&#x2019;t subtract 4 (another 0)<br>
          2 - 2 -&gt; 0 (another 1)<br>
          can&#x2019;t subtract 1 (another 0)</p>
  <p class="text"> Answer: 111100010<sub>2</sub></p>
</blockquote><p>&#xA0;</p>
<br><br>
<table cellspacing="0" cellpadding="0" border="0">
  <tr>
    <td width="90%"><span class="header">F. Short Cuts Between Binary, Octal, and Hexadecimal</span></td>
    <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 8 of 11</nobr></font></td>
  </tr>
</table>
  <br>
<ol class="text">
	<li><p>There is a relationship between binary, octal, and hexadecimal numbers. Binary is base 2, octal is base 8(23) and hexadecimal is base 16(24). Let&apos;s convert the binary number 101101011010111 to a hexadecimal number.</p>
	  <blockquote>
	    <p>Binary -&gt; hexadecimal<br>
	        101101011010111</p>
	    </blockquote>
	</li>
<blockquote>
	  <p>Starting at the rightmost digit, split the number into groups of 4<br>
	        101 1010 1101 0111</p>
	  </blockquote>
	<li>	  Each of these groups has 4 binary digits that can range from 0 -15. This is exactly the value of one hexadecimal digit, so match each group of four bits with one hexadecimal digit.</li>
	</ol>
<blockquote>
  <table width="300" border="0" cellspacing="0" cellpadding="0">
    <tr>
      <td bgcolor="#000000"><table width="100%" border="0" cellspacing="1" cellpadding="3">
        <tr bgcolor="#FFFFFF" class="text">
          <td width="50%"><div align="center"><strong>Binary Number Groups</strong></div></td>
          <td width="50%"><div align="center"><strong>Hexadecimal Equivalent</strong></div></td>
        </tr>
        <tr bgcolor="#FFFFFF" class="text">
          <td width="50%"><div align="center">101</div></td>
          <td width="50%"><div align="center">5</div></td>
        </tr>
        <tr bgcolor="#FFFFFF" class="text">
          <td width="50%"><div align="center">1010</div></td>
          <td width="50%"><div align="center">A</div></td>
        </tr>
        <tr bgcolor="#FFFFFF" class="text">
          <td width="50%"><div align="center">1101</div></td>
          <td width="50%"><div align="center">D</div></td>
        </tr>
        <tr bgcolor="#FFFFFF" class="text">
          <td width="50%"><div align="center">0111</div></td>
          <td width="50%"><div align="center">7</div></td>
        </tr>
      </table></td>
    </tr>
  </table>
  <p class="text">So our binary number is equivalent to 5AD7<sub>16</sub>. Going from hexadecimal reverses the procedure so each hexadecimal digit expands to 4 bits.</p>
  <p class="text"> The same process occurs between octal and binary using only 3 bits.<br>
      <br>
  Try the following conversions for practice:</p>
  <blockquote>
    <p class="text"><code>10 110 101<sub>2</sub> -&gt; ___ ____ ____<sub>8</sub><br>
  3F1<sub>16</sub> -&gt; _____ _____ _____<sub>2</sub><br>
  352<sub>8</sub> -&gt; _____ _____ _____<sub>2</sub><br>
  482 -&gt;____________<sub>2</sub><br>
  482 -&gt; ___________<sub>8</sub><br>
  482 -&gt; ________<sub>16</sub><br>
  10001<code><sub>2</sub></code> -&gt; _______<sub>10</sub><br>
  5776<code><sub>8</sub></code> -&gt; _______<sub>10</sub><br>
  3DB<code><sub>16</sub></code> -&gt; _______<sub>10</sub><br>
  110 111 010<code><sub>2</sub></code> -&gt; ___ ____ ____<sub>8</sub><br>
  1011 0010 1111<code><sub>2</sub></code> -&gt; ___ ____ ____<sub>16</sub><br>
  3FA<code><sub>16</sub></code> -&gt; _____ ______ ______<sub>2</sub><br>
  712<code><sub>8</sub></code> -&gt; ______ ______ ______<sub>2</sub></code></p>
    <p class="text">The answers appear at the end of this lesson.</p>
  </blockquote>
</blockquote>
<p>&#xA0;</p><br><br>
<table cellspacing="0" cellpadding="0" border="0">
  <tr>
    <td width="90%"><span class="header">G. How this Relates to Computers and Overflow Errors</span></td>
    <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 9 of 11</nobr></font></td>
  </tr>
</table>
  <p><br>
  </p>
  <ol class="text">
	<li>
	  <p>Modern computers are binary computers. They are made up of switches. Each switch is either on or off at any one time. Everything we put into the computer (numbers and letters) must be converted to binary numbers.</p>
	</li>
<li>
  <p>At some point in time when using a computer, there are not going to be enough bits to accurately represent the decimal numbers in the real world. We will look at this in a smaller scenario, in order to simplify this discussion.</p>
</li>
<li><p>Let&#x2019;s hypothesize that we have 8 bits for our numbers and there are no negative numbers.</p>
  <table width="500" border="0" cellspacing="0" cellpadding="0">
    <tr>
      <td bgcolor="#000000"><table width="100%" border="0" cellspacing="1" cellpadding="3">
        <tr bgcolor="#FFFFFF" class="text">
          <td><div align="center">2<sup>7</sup></div></td>
          <td><div align="center">2<sup>6</sup></div></td>
          <td><div align="center">2<sup>5</sup></div></td>
          <td><div align="center">2<sup>4</sup></div></td>
          <td><div align="center">2<sup>3</sup></div></td>
          <td><div align="center">2<sup>2</sup></div></td>
          <td><div align="center">2<sup>1</sup></div></td>
          <td><div align="center">2<sup>0</sup></div></td>
        </tr>
        <tr bgcolor="#FFFFFF" class="text">
          <td><div align="center">128</div></td>
          <td><div align="center">64</div></td>
          <td><div align="center">32</div></td>
          <td><div align="center">16</div></td>
          <td><div align="center">8</div></td>
          <td><div align="center">4</div></td>
          <td><div align="center">2</div></td>
          <td><div align="center">1</div></td>
        </tr>
      </table></td>
    </tr>
  </table><br>
</li>
<li>
<p>The numbers available to us range from 0000 0000 to 1111 1111 (binary), which is 0 to 255 (decimal). This is not very large for an integer. Attempting to put a larger number into one of our integers would result in an overflow error. Look back at the charts in Lesson A3 for minimum and maximum values for the different types of primitive data types.</p>
</li>
    <li><p>Another computer problem arises when using numbers that have decimal places. Again we will simplify the real process. We will allocate in our 8-bit storage 6 bits for the <em>mantissa</em> (the part to the left of the decimal place) and 2 bits for the fractional portion. We can still have overflow if we try to put a number that is too large for our storage. This storage will hold numbers from 0 to 63.75.</p>
      <table width="500" border="0" cellspacing="0" cellpadding="0">
        <tr>
          <td bgcolor="#000000"><table width="100%" border="0" cellspacing="1" cellpadding="3">
              <tr bgcolor="#FFFFFF" class="text">
                <td><div align="center">2<sup>5</sup></div></td>
                <td><div align="center">2<sup>4</sup></div></td>
                <td><div align="center">2<sup>3</sup></div></td>
                <td><div align="center">2<sup>2</sup></div></td>
                <td><div align="center">2<sup>1</sup></div></td>
                <td><div align="center">2<sup>0</sup></div></td>
                <td><div align="center">2<sup>-1</sup></div></td>
                <td><div align="center">2<sup>-2</sup></div></td>
              </tr>
              <tr bgcolor="#FFFFFF" class="text">
                <td><div align="center">32</div></td>
                <td><div align="center">16</div></td>
                <td><div align="center">8</div></td>
                <td><div align="center">4</div></td>
                <td><div align="center">2</div></td>
                <td><div align="center">1</div></td>
                <td><div align="center">1/2</div></td>
                <td><div align="center">1/4</div></td>
              </tr>
          </table></td>
        </tr>
      </table><br>
    </li>
<li><p>Let&#x2019;s convert 7.25 to our binary representation.</p>
          <table width="500" border="0" cellspacing="0" cellpadding="0">
            <tr>
              <td bgcolor="#000000"><table width="100%" border="0" cellspacing="1" cellpadding="3">
                  <tr bgcolor="#FFFFFF" class="text">
                    <td><div align="center">2<sup>5</sup></div></td>
                    <td><div align="center">2<sup>4</sup></div></td>
                    <td><div align="center">2<sup>3</sup></div></td>
                    <td><div align="center">2<sup>2</sup></div></td>
                    <td><div align="center">2<sup>1</sup></div></td>
                    <td><div align="center">2<sup>0</sup></div></td>
                    <td><div align="center">2<sup>-1</sup></div></td>
                    <td><div align="center">2<sup>-2</sup></div></td>
                  </tr>
                  <tr bgcolor="#FFFFFF" class="text">
                    <td><div align="center">0</div></td>
                    <td><div align="center">0</div></td>
                    <td><div align="center">0</div></td>
                    <td><div align="center">1</div></td>
                    <td><div align="center">1</div></td>
                    <td><div align="center">1</div></td>
                    <td><div align="center">0</div></td>
                    <td><div align="center">1</div></td>
                  </tr>
              </table></td>
            </tr>
          </table>
          <p>Perfect!</p>
          <p>Now try 7.4. The first 6 bits are the same, 000111, but what are we going to do for the decimal places? We have four choices:</p>
          <p>00 -&gt; 0<br>
            01 -&gt; .25<br>
            10 -&gt; .5<br>
          11 -&gt; .75</p>
          <p>We have no other choices. So it looks like we would have to choose between .25 and .5. This is called round-off error. Converting from decimal numbers with fractional parts to a binary representation can cause errors. We are using a very simplified version here, so the errors would usually occur much further out in the decimal places. Most of the time we would not see these errors but as programmers, we should be aware of them. This is why it is never a good idea to compare two floating numbers using &#x201C;==&#x201D;. It is much safer to compare the two and check for a certain level of accuracy.</p>
          <blockquote>
            <p> <code>(Math.abs(x - y)&lt; .000000001) </code>is better than<code> (x == y)</code></p>
          </blockquote>
          <p>This is also why a programmer should choose the best data type for the job.</p>
      </li>
      <li><p>The third type of error is an under-flow error. Let&apos;s use our 8-bit storage scheme again, and try to store the decimal number .1.</p>
        <table width="500" border="0" cellspacing="0" cellpadding="0">
          <tr>
            <td bgcolor="#000000"><table width="100%" border="0" cellspacing="1" cellpadding="3">
                <tr bgcolor="#FFFFFF" class="text">
                  <td><div align="center">2<sup>5</sup></div></td>
                  <td><div align="center">2<sup>4</sup></div></td>
                  <td><div align="center">2<sup>3</sup></div></td>
                  <td><div align="center">2<sup>2</sup></div></td>
                  <td><div align="center">2<sup>1</sup></div></td>
                  <td><div align="center">2<sup>0</sup></div></td>
                  <td><div align="center">2<sup>-1</sup></div></td>
                  <td><div align="center">2<sup>-2</sup></div></td>
                </tr>
                <tr bgcolor="#FFFFFF" class="text">
                  <td><div align="center">0</div></td>
                  <td><div align="center">0</div></td>
                  <td><div align="center">0</div></td>
                  <td><div align="center">1</div></td>
                  <td><div align="center">1</div></td>
                  <td><div align="center">1</div></td>
                  <td><div align="center">0</div></td>
                  <td><div align="center">1</div></td>
                </tr>
            </table></td>
          </tr>
        </table>
      </li>
  </ol>
<blockquote>
  <p class="text">The first 6-bits are 000000. Remember the four choices of decimals:</p>
  <p class="text">00 -&gt; 0<br>
  01 -&gt; .25<br>
  10 -&gt; .5<br>
  11 -&gt; .75</p>
    <p class="text">The number we are trying to store is too small for our storage scheme. Converting from decimal numbers to binary does not work for numbers very close to 0. </p>
    <p class="text">Answers to Practice Questions:</p>
    <blockquote>
      <p class="text"><code>10 110 101<sub>2</sub> -&gt; 265<sub>8</sub><br>
  3F1<sub>16</sub> -&gt; 0011 1111 0001<sub>2</sub><br>
  352<sub>8</sub> -&gt; 011 101 010<sub>2</sub><br>
  482 -&gt; 0001 1110 0010<sub>2</sub> </code>(Hint: convert to hexadecimal 1st)<code><br>
  482 -&gt; 742<sub>8</sub><br>
  482 -&gt; 1E2<sub>16</sub><br>
  10001<sub>2</sub> -&gt; 17<sub>10</sub><br>
  5776<sub>8</sub> -&gt; 3070<sub>10</sub><br>
  3DB<sub>16</sub> -&gt; 987<sub>10</sub><br>
  110 111 010<sub>2</sub> -&gt; 672<sub>8</sub><br>
  1011 0010 1111<sub>2</sub> -&gt; B2F<sub>16</sub><br>
  3FA<sub>16</sub> -&gt; 0011 1111 1010<sub>2</sub><br>
  712<sub>8</sub> -&gt; 111 001 010<sub>2</sub></code></p>
    </blockquote>
</blockquote>
<p>&#xA0;</p>
<br>  
  <br>
  <table cellspacing="0" cellpadding="0" border="0">
    <tr>
      <td width="90%"><span class="header">Summary/Review</span></td>
      <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 10 of 11</nobr></font></td>
    </tr>
  </table>
  <br>
  <p class="text">There are some dangers and pitfalls in assuming that a computer will always give you the correct answer. Understanding the inner workings of a computer will help you write better programs. Also, hexadecimal numbers are used quite commonly in web design and also in many graphical editing programs.</p>
  <br><br><br><h2>Chapter 22</h2><br>  
  <br>
  <table cellspacing="0" cellpadding="0" border="0">
    <tr>
      <td width="90%"><span class="header">A22 Introduction</span></td>
      <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 1 of 6</nobr></font></td>
    </tr>
  </table>
  <br>
  <p class="text">Computers are very complex and interesting machines. Any computer programmer should know as much about them as possible. An understanding of the possible problems associated with computers can be useful to avoid the possible negative results of using them.</p>
  <p class="text">The key topics for this lesson are:</p>
  <ol type="A" class="text">
    <li><a href="A22-A.html">Hardware</a></li>
    <li><a href="A22-B.html">Software</a></li>
  <li><a href="A22-C.html">Networking</a></li>
  <li><a href="A22-D.html">Ethics</a></li>
  </ol><br>  
  <br>
  <table cellspacing="0" cellpadding="0" border="0">
    <tr>
      <td width="90%"><span class="header">A. Hardware</span></td>
      <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 2 of 6</nobr></font></td>
    </tr>
  </table>
  <br>
  <ol class="text">
    <li>
      <p>In order for a computer to make calculations and process jobs, it must have a designated location to store, read and write the information that it is being manipulated. The most integral part of a computer&#x2019;s internal memory is called primary memory, which has generally been in the form of Random Access Memory (commonly known as RAM) since 1968. When a computer is engaged in processing a task, data is stored in the computer&#x2019;s primary memory. A computer&#x2019;s primary memory only holds the data for as long as the computer is powered up with a steady flow of electrical current - it is lost when the computer is shut down.</p>
    </li>
    <li>
      <p>Another form of memory that is very important to the modern computer is called secondary memory. Secondary memory is different from primary memory in the speed of access, the duration of the memory, and the total capacity. It is generally slower than primary memory, which makes it a poor choice for processing jobs. However, secondary memory is usually higher capacity and does not need a constant current running through it to retain its memory, so it useful for long-term storage. Modern versions of secondary memory storage hardware range from hard disk drives to floppy disk drives to flash drives, as well as to optical discs such as CD-ROMs and DVDs.</p>
    </li>
  <li>
    <p>The Central Processing Unit (CPU) is also a very necessary component of computer hardware. The CPU, known colloquially as the computer&apos;s &apos;brain&apos;, processor, or central processor, conducts all of the data calculations and processes for the data held in the computer&#x2019;s memory. The CPU is housed in a silicon chip called a microprocessor. These components understand the basic computer instructions that are provided by the computer&apos;s software. Even though CPUs are often physically small, they can contain millions of parts.</p>
  </li>
  <li>
    <p>Storage devices (such as disk drives), display devices (such as computer monitors or screens), output devices (printers, speakers), input devices (keyboards, mice, joysticks, scanners) and other peripherals (modems and network cards) are all considered types of hardware - that is, computer components that can actually be physically touched. </p>
  </li>
  </ol>
    <p>&#xA0;</p>
  <br><br>  
  <table cellspacing="0" cellpadding="0" border="0">
    <tr>
      <td width="90%"><span class="header">B. Software</span></td>
      <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 3 of 6</nobr></font></td>
    </tr>
  </table>
  <br>
  <ol class="text">
    <li>
      <p>Software is a general term for all the computer instructions or data (usually in the form of programs or applications) that exist on a computer. Programs are stored in memory and generally do not have a tangible aspect. Software can range from computer games to word processors (applications software) to the computer&#x2019;s operating system (OS or system software), which manages and controls all the other software on the system.</p>
    </li>
    <li>
        <p>Operating systems have been evolving for many years and have become more and more advanced. The major operating systems competing for the personal computer market today are various versions of Microsoft Windows (i.e., 2000, NT, XP Home, XP Pro), Apple Macintosh (i.e., OS 8, 9, X, Tiger), and Linux (there are dozens of operating systems based on Linux that have their own individual strengths and weaknesses).</p>
    </li>
  <li>
      <p>The main object of this curriculum is to teach students how to create their own computer software. When creating computer software programs as students have already been doing, a language translator and compiler are required to convert the Java code into software &apos;language&apos; that the CPU is able to understand. Without the aid of these tools, it would be necessary to program computers entirely in binary, with 1&#x2019;s and 0&#x2019;s. Imagine debugging code that looked like that!</p>
    </li>
  </ol>
  <br><br>
<table cellspacing="0" cellpadding="0" border="0">
  <tr>
    <td width="90%"><span class="header">C. Networking</span></td>
    <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 4 of 6</nobr></font></td>
  </tr>
</table>
  <br>
  <ol class="text">
    <li>
      <p>A network of computers is defined as two or more computer systems connected to each other, in order to communicate and share data. Networks may be a simple linking of computers found close together (in one&apos;s home, school, or in the same building), or they may span a relatively large geographical area. A wide-area network (known as a WAN) consists of two or more local-area networks (known as LANs). The largest WAN in existence is the Internet, an interconnected system of networks, which has been expanding rapidly around the world over the last couple of decades. There are millions of websites on the Internet today. This rapid expansion is blurring the definition of networks since a few simple clicks can connect a user to hundreds of different computers within a few seconds.</p>
    </li>
    <li>
      <p>There are many benefits for networking computers together. The most basic benefit is for sharing and communicating data. The Internet and the World Wide Web have grown exponentially, providing an efficient exchange of information that is unprecedented - a worldwide information highway. Another feature of networking that is becoming popular is called thin client - this exists when a computer (client) in a client-server network has little or no hardware or software on it. The client&apos;s computer depends primarily on the centralized and managed host server for processing activities. </p>
    </li>
  </ol>
  <p>&#xA0;</p><br><br>
<table cellspacing="0" cellpadding="0" border="0">
  <tr>
    <td width="90%"><span class="header">D. Ethics</span></td>
    <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 5 of 6</nobr></font></td>
  </tr>
</table>
  <br>
  <ol class="text">
    <li><p>The power and expansion of computers and networking has unfortunately brought many ethical questions and situations to the forefront. While computers are powerful tools for many aspects of our modern lives and have provided us with amazing advances in many fields from astrophysics to zoology, they have in turn given us many new problematic choices for action and choice. The burgeoning field of computer ethics includes consideration of both personal and social policies for the ethical use of computer technology.</p>
    </li>
    <li>
        <p>Companies have emerged to specialize in the manufacture of anti-virus, anti-spyware, anti-spam, and privacy protection software programs. Nearly everyone has heard of computers getting infected with a malicious computer virus and behaving strangely. Trojan Horses, invasive programs disguised as other things, such as music videos or games, can cause problems with computer systems and compromise a computer user&apos;s privacy. Spyware can latch onto a computer and send all sorts of data to third parties, who use this knowledge to adjust their advertising.</p>
    </li>
  <li>
        <p>A whole new field of criminal justice has emerged which deals only with serious computer crimes, such as unauthorized use of a computer (i.e., the theft of usernames and passwords), identity theft, denial of service attacks, the alteration of websites, illegal or offensive material posted on websites or received in emails, predatory sexual behavior, copyright infringement, unregulated gambling, and more. Sexual predators can hide behind a screen name. Computer hackers attempt to get bank account and credit card information. Pornography and gambling can often be hard to regulate over the Internet, and copyright infringement is much more likely to go unnoticed.</p>
  </li>
  <li>
    <p>Since most of these issues and problems are fairly new due to the expansion of the Internet and information technologies everywhere, laws and rules are just starting to be implemented, although it has been a challenge to keep up with the rapid acceleration of changes. It is always important to think about the ramifications of one&apos;s own actions when using computer technology. </p>
  </li>
  </ol>
  <p>&#xA0;</p>
<br>  
  <br>
  <table cellspacing="0" cellpadding="0" border="0">
    <tr>
      <td width="90%"><span class="header">Summary/Review</span></td>
      <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 6 of 6</nobr></font></td>
    </tr>
  </table>
  <br>
  <p class="text">It is strongly recommended that computer programmers know how computers function. An understanding of how they work can help to demystify some of the computing processes that are going on behind the scenes as well as to help clarify some of the quirky things that computers do. Understanding the history of computers and their development over time can give us insight as to where they may be heading in the future and help computer programmers to plan for the inevitable changes. The Internet holds a vast amount of information on many subjects related to computers, and should be explored for the depth of content located there.</p>
  <br><br><br><h2>Chapter 23</h2><br>  
  <br>
  <table cellspacing="0" cellpadding="0" border="0">
    <tr>
      <td width="90%"><span class="header">AB23 Introduction</span></td>
      <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 1 of 9</nobr></font></td>
    </tr>
  </table>
  <br>
  <p class="text">Two-dimensional arrays allow the programmer to solve problems involving rows and columns. Many data processing problems involve rows and columns, such as an airplane seat reservation system or the mathematical modeling of bacterial growth. A classic problem involving two-dimensional arrays is the bacteria simulation program presented in Lab Assignment AB23.1, <em>Life</em>. After surveying the syntax and unique aspects of larger data structures, we will apply them to more challenging lab assignments.</p>
  <p class="text">The key topics for this lesson are:</p>
  <ol type="A" class="text">
    <li class="text"><a href="AB23-A.html">Two-Dimensional Arrays</a></li>
    <li class="text"><a href="AB23-B.html">Passing Two-Dimensional Arrays to Methods</a></li>
  <li class="text"><a href="AB23-C.html">Two-Dimensional Array Algorithms</a></li>
  </ol><br>  
  <br>
  <table cellspacing="0" cellpadding="0" border="0">
    <tr>
      <td width="90%"><span class="header"><a href="../vocabulary/index_AB.html">AB23 Vocabulary</a></span></td>
      <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 2 of 9</nobr></font></td>
    </tr>
  </table>
  <br>
  <table width="500" border="0">
    <tr class="text">
      <td width="50%">MATRIX</td>
      <td width="50%">ROW</td>
    </tr>
    <tr class="text">
      <td>COLUMN</td>
      <td>LENGTH</td>
    </tr>
    <tr class="text">
      <td>&#xA0;</td>
      <td>&#xA0;</td>
    </tr>
    <tr class="text">
      <td>&#xA0;</td>
      <td>&#xA0;</td>
    </tr>
    <tr class="text">
      <td>&#xA0;</td>
      <td>&#xA0;</td>
    </tr>
    <tr class="text">
      <td>&#xA0;</td>
      <td>&#xA0;</td>
    </tr>
    <tr>
      <td>&#xA0;</td>
      <td>&#xA0;</td>
    </tr>
  </table>
  <br>
  <br>  
  <br>
  <table cellspacing="0" cellpadding="0" border="0">
    <tr>
      <td width="90%"><span class="header">A. Two-Dimensional Arrays</span></td>
      <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 3 of 9</nobr></font></td>
    </tr>
  </table>
  <br>
  <ol class="text">
    <li><p>Often the data a program uses comes from a two-dimensional situation. For example, maps are two-dimensional (or more), the layout of a printed page is two-dimensional, a computer-generated image (such as on your computer&apos;s screen) is two-dimensional, and so on.</p>
      <p>For these situations, a Java programmer can use a <em>two-dimensional array</em>. This allows for the creation of table-like data structures with a row and column format. The first subscript is a row index in a table while the second subscript is a column index in a table. Here is example code, in Sample Code 23-1, including a diagram of the array table.</p>
    </li>
  </ol>
  <blockquote>
    <p class="text"><u>Sample Code 23-1</u></p>
    <p class="text"><code><strong>int</strong>[][] table = new int[3][4];<br>
          <strong>int</strong> row, col;</code></p>
    <p><span class="text"><code><strong>for</strong> (row = 0; row &lt; 3; row++){<br>
  &#xA0;&#xA0;&#xA0;<strong>for</strong> (col = 0; col &lt; 4; col++){<br>
        &#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;table[row][col] = row + col;<br>
        <code>&#xA0;&#xA0;&#xA0;</code>}<br>
        }</code></span></p>
    <p align="center"><img src="http://iws.punahou.edu/user/DKiang/apcs/LessonAB23/images/Fig_AB23_1.gif" width="201" height="195"></p>
    </blockquote>  <ol start="2">
    <li class="text">
      <p>Two-dimensional arrays are objects. A variable such as <code>table</code> is a reference to a 2D array object. The declaration </p>
    <p><code><strong>int</strong>[][] table;</code></p>
      <p>defines a <code>table</code> that holds a reference to a 2D array of integers. Without any further initialization, table holds the value <strong><code>null</code></strong>.</p>
    </li>
  <li class="text">
        <p>The declaration </p>
        <p><code><strong>int</strong>[][]table = <strong>new int</strong>[3][4];</code></p>
        <p>defines a <code>table</code> that holds a reference to a 2D array of integers, creates an array object of 3 rows and 4 columns, and puts the reference in <code>table</code>. All the elements of the array are initialized to zero.</p>
  </li>
    <li class="text">
        <p>The declaration </p>
        <p><code><strong>int</strong>[][] table = { {0,0,0,0},<br>
          &#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{0,0,0,0},<br>
          &#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{0,0,0,0} };</code></p>
        <p>does exactly the same thing as the previous declaration (and would not ordinarily be used.)</p>
    </li>
    <li class="text">
        <p>The declaration </p>
        <p><code>int[][]table = { {0,1,2,3},<br>
          &#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{1,2,3,4},<br>
          &#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{2,3,4,5} };</code></p>
        <p>creates an array of the same dimensions (same number of rows and columns) as the previous array and initializes the elements to the given values in each cell.</p>
    </li>
    <li class="text">
        <p>If no initializer is provided for an array, then when the array is created, it is automatically filled with the appropriate values: zero for numbers, <strong><code>false</code></strong> for <strong><code>boolean</code></strong>, and <strong><code>null</code></strong> for objects.</p>
    </li>
    <li class="text">
        <p>Just as with one-dimensional arrays, the row and column numbering of a 2-D array begins at subscript zero (0). The 3 rows of the table are numbered from 0...2. Likewise, the 4 columns of the table are numbered from 0...3.</p>
    </li>
    <li class="text">
        <p>The array <code>table</code> is filled with the sums of <code>row</code> and <code>col</code>, which is accomplished by Sample Code 23-2 (see below). To access each location of the matrix, specify the row coordinate first, then the column:</p>
        <p><code>table[row][col]</code></p>
        <p>Each subscript must have its own square brackets.</p>
    </li>
    <li class="text">
        <p>The length of a 2D array is the number of rows it has. The row index will run from 0 to length -1. The number of rows in <code>table</code> is given by the value <code>table.length</code>. </p>
        <p>Each row of a 2D array has its own length. To get the number of columns in table, use any of the following: </p>
        <p><code>table[0].length<br>
            table[1].length <br>
          table[2].length. </code></p>
        <p>There is actually no rule that says that all the rows of an array must have the same length, and some advanced applications of arrays use varying-sized rows. But if you use the <strong><code>new</code></strong> operator to create an array in the manner described above, you&apos;ll always get an array with equal-sized rows.</p>
    </li>
    <li class="text">
        <p>The routine that assigned values to the array used the specific numbers of rows and columns. That is fine for this particular program, but a better definition would work for an array of any two dimensions.</p>
        <p><u>Sample Code 23-2</u></p>
        <p><code><strong>int</strong>[][] table = new int[3][4];<br>
            <strong>int</strong> row, col;</code></p>
        <p><code><strong>for</strong> (row = 0; row &lt; table.length; row++){<br>
  &#xA0;&#xA0;&#xA0;<strong>for</strong> (col = 0; col &lt; table[row].length; col++){<br>
            &#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;table[row][col] = row + col;<br>
            &#xA0;&#xA0;&#xA0;}<br>
          }</code></p>
        <p>In Sample Code 23-2, the limits of the for loops have been redefined using <code>table.length</code> and <code>table[row].length</code> so that they work with any two-dimensional array of ints with any number of rows and columns .</p>
    </li>
    </ol>  <p>&#xA0;</p>
  <br><br>  
  <table cellspacing="0" cellpadding="0" border="0">
    <tr>
      <td width="90%"><span class="header">B. Passing Two-Dimensional Arrays to Methods</span></td>
      <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 4 of 9</nobr></font></td>
    </tr>
  </table>
  <br>
  <ol class="text">
    <li>The following program in Sample Code 23-3 illustrates parameter passing of an array. The purpose of this method is to print out the array.
      <p> <u>Sample Code 23-3</u></p>
      <p><code>// A program to illustrate 2D array parameter passing</code></p>
      <p><code> <strong>public void</strong> printTable (<strong>int</strong>[][] pTable){<br>
  &#xA0;&#xA0;<strong>for</strong> (<strong>int</strong> row = 0; row &lt; pTable.length; row++){<br>
  &#xA0;&#xA0;&#xA0;&#xA0;<strong>for</strong> (<strong>int</strong> col = 0; col &lt; pTable[row].length; col++){<br>
  &#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;System.out.printf(&#x201C;%4d&#x201D;, pTable[row][col]);<br>
  &#xA0;&#xA0;&#xA0;&#xA0;}<br>
  &#xA0;&#xA0;&#xA0;&#xA0;System.out.println();<br>
  &#xA0;&#xA0;}<br>
  }</code></p>
    </li>
<li>
        <p>The <code>printTable</code> method uses a reference parameter, <code><strong>int</strong>[][] pTable</code>. The local identifier <code>pTable</code> serves as an alias for the actual parameter <code>grid</code> passed to the method.</p>
</li>
  <li>
    <p>When a program is running and it tries to access an element of an array, the Java virtual machine checks that the array element actually exists. This is called <em>bounds checking</em>. If the program tries to access an array element that does not exist, the Java virtual machine will generate an <code>ArrayIndexOutOfBoundsException</code> exception. Ordinarily, this will halt the program.</p>
  </li>
  </ol>
  <p>&#xA0;</p><br><br>
<table cellspacing="0" cellpadding="0" border="0">
  <tr>
    <td width="90%"><span class="header">C. Two-Dimensional Array Algorithms</span></td>
    <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 5 of 9</nobr></font></td>
  </tr>
</table>
  <br>
<ol class="text">
    <li>
      <p>The most common 2-D array algorithms will involve processing the entire grid, usually row-by-row or column-by-column.</p>
    </li>
<li>        
  <p>Problem-solving on a matrix could involve processing:</p>
<ol type="a">
    <li type="a">one row</li>
  <li>one column</li>
<li>one cell</li>
<li>adjacent cells in different directions</li>
</ol>
</li>
</ol>  <p>&#xA0;</p><br>  
  <br>
  <table cellspacing="0" cellpadding="0" border="0">
    <tr>
      <td width="90%"><span class="header">Summary/Review</span></td>
      <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 6 of 9</nobr></font></td>
    </tr>
  </table>
  <br>
  <p class="text">Two-dimensional arrays will be applied to two interesting problems. The simulation of life in a petri dish of bacteria will require a two-dimensional array representation. The second and third lab assignments are different versions of the &#x201C;Knight&#x2019;s Tour&#x201D; problem - an interesting and demanding chess movement problem.</p>
  <br><br><br><h2>Chapter 24</h2><br>  
  <br>
  <table cellspacing="0" cellpadding="0" border="0">
    <tr>
      <td width="90%"><span class="header">AB24 Introduction</span></td>
      <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 1 of 7</nobr></font></td>
    </tr>
  </table>
  <br>
  <p class="text">Suppose that you are trapped inside a maze and you need to find your way out. Initial attempts at exiting are random and because the walls all appear identical, you begin wasting time and energy trying the same routes over and over again. After some thought and after recalling a useful computer science algorithm, you take advantage of a tool you have in your pocket - a marking pen. You begin marking the walls with some notes and a time stamp. (This technique recalls the one used by Hansel and Gretel in the Grimm fairy tale, when Hansel marked his path through the woods with shiny stones (and then breadcrumbs), so that he could safely find his way back.) At each branch point, you mark the direction you are about to attempt with an arrow. If a dead-end is encountered just around the corner, you retreat to the branch point, mark &#x201C;dead-end&#x201D; for that direction, and try another direction. By marking the directions that have failed, you avoid needlessly trying them again. </p>
  <p class="text">This two-dimensional problem involving backtracking provides us with a recursive matrix problem (and its entire solution), translated from <em>Oh! Pascal!</em>, 2nd edition. Your programming assignment will also be a recursive matrix problem.</p>
  <p class="text">The key topics for this lesson are:</p>
  <ol type="A" class="text">
    <li class="text"><a href="AB24-A.html">Defining the Maze Problem</a></li>
    <li class="text"><a href="AB24-B.html">Developing the Recursive Solution</a></li>
  <li class="text"><a href="AB24-C.html">The Solution to the Maze Problem</a></li>
  </ol><br>  
  <br>
  <table cellspacing="0" cellpadding="0" border="0">
    <tr>
      <td width="90%"><span class="header"><a href="../vocabulary/index_AB.html#AB24">AB24 Vocabulary</a></span></td>
      <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 2 of 7</nobr></font></td>
    </tr>
  </table>
  <br>
  <table width="500" border="0">
    <tr class="text">
      <td width="50%">BACKTRACKING</td>
      <td width="50%">&#xA0;</td>
    </tr>
    <tr class="text">
      <td>&#xA0;</td>
      <td>&#xA0;</td>
    </tr>
    <tr class="text">
      <td>&#xA0;</td>
      <td>&#xA0;</td>
    </tr>
    <tr class="text">
      <td>&#xA0;</td>
      <td>&#xA0;</td>
    </tr>
    <tr class="text">
      <td>&#xA0;</td>
      <td>&#xA0;</td>
    </tr>
    <tr class="text">
      <td>&#xA0;</td>
      <td>&#xA0;</td>
    </tr>
    <tr>
      <td>&#xA0;</td>
      <td>&#xA0;</td>
    </tr>
  </table>
  <br>
  <br>  
  <br>
  <table cellspacing="0" cellpadding="0" border="0">
    <tr>
      <td width="90%"><span class="header">A. Defining the Maze Problem</span></td>
      <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 3 of 7</nobr></font></td>
    </tr>
  </table>
  <br>
  <ol class="text">
    <li><p>The maze will be defined as a 2-D grid of asterisks (marking walls) and blanks (marking potential paths). The size of the grid will be 12 x 12 and the starting location will be at 6, 6.</p>
    </li>
  <li>
        <p>The data structure for this problem will be a 2-dimensional array of <strong><code>char</code></strong>. The array will be declared as a 13 x 13 grid so that we can use locations 1..12 by 1..12. Row 0 and column 0 will not be used in the data structure.</p>
  </li>
  <li>
          <p>The initial grid is stored as a text file and will be loaded into the array.</p>
          <p>(Here is a copy of the <em>mazeData.txt</em> file)</p>
		  <p><img src="http://iws.punahou.edu/user/DKiang/apcs/LessonAB24/images/Fig_AB24_1.gif" width="120" height="211"></p>
  </li>
  <li>
      <p>The solution is a backtracking algorithm involving a series of trial and error attempts. A potential path out of the maze will be traced with a !, with moves limited to horizontal or vertical directions. If a dead-end is encountered, back up and try a different direction.</p>
  </li>
  <li>
    <p>We will be at an exit point if we arrive at row 1 or <code>MAXROW</code>, or at column 1 or <code>MAXCOL</code>.</p>
  </li>
  </ol>
  <p>&#xA0;</p>
  <br><br>  
  <table cellspacing="0" cellpadding="0" border="0">
    <tr>
      <td width="90%"><span class="header">B. Developing the Recursive Solution</span></td>
      <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 4 of 7</nobr></font></td>
    </tr>
  </table>
  <br>
  <ol class="text">
    <li>
      <p>In developing a recursive solution, consider the base cases first. What situation(s) cause the recursive method to exit?      </p>
      <ol type="a" class="text">
            <li>
              <p>We have arrived at a location that is off the data structure. It is important to catch this situation first to avoid an array indexing error.</p>
            </li>
          <li>
              <p>Encountering a &apos;*&apos; character means that we have run into a wall. The algorithm should stop.</p>
          </li>
        <li>
            <p>Encountering a location we have already visited should cause the algorithm to stop.</p>
        </li>
        <li>
          <p>Arriving at a location that has a row or column value equal to 1 or <code>MAXROW</code> or <code>MAXCOL</code> means that we have found an exit point.</p>
        </li>
      </ol>
    </li>
    <li>
      <p>The general case of encountering a blank space requires the following steps: </p>
    </li>
<ol type="a" class="text">
      <li>
        <p>Change the character value from the blank space to the &apos;!&apos; character.</p>
      </li>
    <li>
        <p>Check to see if you are at an exit point. If so, print the maze with a trail of &apos;!&apos; markers to the exit point.</p>
    </li>
<li>
      <p>If you are not at an exit point, make 4 recursive calls to check all 4 directions, feeding the new coordinates of the 4 neighboring cells.</p>
    </li>
</ol>
        <li>When an exit point is found, print only the successful trail of &apos;!&apos; marks that leads to an exit. As a result, it is necessary for each recursive call to work with a copy of the array. Why is this? If a reference to the original array is passed with each recursive call, the placement of &apos;!&apos; marks would be permanent in the data structure.</li>
  </ol>
  <p>&#xA0;</p><br><br>
<table cellspacing="0" cellpadding="0" border="0">
  <tr>
    <td width="90%"><span class="header">C. The Solution to the Maze Problem</span></td>
    <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 5 of 7</nobr></font></td>
  </tr>
</table>
  <br>
  <blockquote class="text">
    <p><code>import java.io.File;<br>
      import java.util.Scanner;<br>
      import java.io.IOException;</code></p>
  <p><code>/**<br>
  &#xA0;* Description of the Class<br>
  &#xA0;*<br>
  &#xA0;* @author Administrator<br>
  &#xA0;* @created July 16, 2002<br>
  &#xA0;*/<br>
  <strong>class</strong> ThreadTheMaze{<br>
  &#xA0;/**<br>
  &#xA0;&#xA0;* Description of the Field<br>
  &#xA0;&#xA0;*/<br>
  &#xA0;&#xA0;<strong>private final static char</strong> BLANK = &apos; &apos;;<br>
  &#xA0;&#xA0;<strong>private static final int</strong> MAXROW = 12;<br>
  &#xA0;&#xA0;<strong>private static final int</strong> MAXCOL = 12;<br>
  &#xA0;&#xA0;<strong>private int</strong> myMaxRow;<br>
  &#xA0;&#xA0;<strong>private int</strong> myMaxCol;<br>
  &#xA0;&#xA0;<strong>private char</strong> [][] myMaze;</code></p>
    <p><code> &#xA0;&#xA0;<strong>public</strong> ThreadTheMaze(){<br>
  &#xA0;&#xA0; myMaze = <strong>new</strong> char [MAXROW + 1][MAXCOL + 1];<br>
  &#xA0;&#xA0; myMaxRow = myMaze.length - 1;<br>
  &#xA0;&#xA0; myMaxCol = myMaze[0].length - 1;<br>
  &#xA0;&#xA0;}</code></p>
    <p><code> &#xA0;&#xA0;/**<br>
  &#xA0;&#xA0; * Initiates the trace process<br>
  &#xA0;&#xA0; *<br>
  &#xA0;&#xA0; * @param none<br>
  &#xA0;&#xA0; */<br>
  &#xA0;&#xA0;<strong>public void</strong> doTraceMaze() {<br>
  &#xA0;&#xA0;&#xA0;loadMaze();<br>
  &#xA0;&#xA0;&#xA0;traceMaze(myMaze, myMaxRow/2, myMaxCol/2);<br>
  &#xA0;&#xA0;}</code></p>
    <p><code> &#xA0;&#xA0;/**<br>
  &#xA0;&#xA0; * Loads the maze characters from mazeData.txt<br>
  &#xA0;&#xA0; *<br>
  &#xA0;&#xA0; * @param maze Description of Parameter<br>
  &#xA0;&#xA0; */<br>
  &#xA0;&#xA0;<strong>private void</strong> loadMaze(){<br>
  &#xA0;&#xA0;&#xA0;String line;<br>
  &#xA0;&#xA0;&#xA0;Scanner in;<br>
  &#xA0;&#xA0;&#xA0;<strong>try</strong>{<br>
  &#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;in = <strong>new</strong> Scanner(<strong>new</strong> File(&quot;mazeData.txt&quot;));</code></p>
    <p><code> &#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<strong>for</strong> (<strong>int</strong> row = 1; row &lt;= myMaxRow; row++){<br>
  &#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;line = in.nextLine();<br>
  &#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<strong>for</strong> (<strong>int</strong> col = 1; col &lt;= myMaxCol; col++){<br>
  &#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;myMaze[row][col] = line.charAt(col-1);<br>
  &#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;}<br>
  &#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;}<br>
  &#xA0;&#xA0;&#xA0;}<strong>catch</strong>(IOException i){<br>
  &#xA0;&#xA0;&#xA0;System.out.println(&quot;Error: &quot; + i.getMessage());<br>
  &#xA0;&#xA0;}<br>
  }</code></p>
    <p><code> &#xA0;&#xA0;/**<br>
  &#xA0;&#xA0; * Description of the Method<br>
  &#xA0;&#xA0; *<br>
  &#xA0;&#xA0; * @param maze Description of Parameter<br>
  &#xA0;&#xA0; */<br>
  &#xA0;&#xA0;<strong>public void</strong> printMaze(char[][] maze){<br>
  &#xA0;&#xA0;&#xA0;&#xA0;Scanner console = <strong>new</strong> Scanner(System.in);</code></p>
    <p><code> &#xA0;&#xA0;&#xA0;&#xA0;<strong>for</strong> (<strong>int</strong> row = 1; row &lt;= myMaxRow; row++){<br>
  &#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<strong>for</strong> (<strong>int</strong> col = 1; col &lt;= myMaxCol; col++){<br>
  &#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;System.out.print(&quot;&quot; + maze[row][col]);<br>
  &#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;}<br>
  &#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;System.out.println();<br>
  &#xA0;&#xA0;&#xA0;&#xA0;}<br>
  &#xA0;&#xA0;&#xA0;&#xA0;System.out.println();<br>
  &#xA0;&#xA0;&#xA0;&#xA0;System.out.println(&quot;Hit enter to see if there are more solutions.&quot;);<br>
  &#xA0;&#xA0;&#xA0;&#xA0;String anything = console.nextLine();<br>
  &#xA0;&#xA0;}</code></p>
    <p><code> &#xA0;&#xA0;/**<br>
      &#xA0;&#xA0; * Will attempt to find a path out of the maze. A<br>
&#xA0;&#xA0;      * path will be marked with the ! marker. The method <br>
      &#xA0;&#xA0; * makes a copy of the array each time so that only <br>
&#xA0;&#xA0;      * the path out will be marked, otherwise extra ! <br>
      &#xA0;&#xA0; * markers will appear in the answer.<br>
  &#xA0;&#xA0; * The function is recursive.<br>
  &#xA0;&#xA0; *<br>
  &#xA0;&#xA0; * @param maze Description of Parameter<br>
  &#xA0;&#xA0; * @param row Description of Parameter<br>
  &#xA0;&#xA0; * @param col Description of Parameter<br>
  &#xA0;&#xA0; */<br>
  &#xA0;&#xA0;<strong>public void</strong> traceMaze(<strong>char</strong>[][] maze, <strong>int</strong> row, <strong>int</strong> col){<br>
  &#xA0;&#xA0;&#xA0;&#xA0;//char[][] mazeCopy = (char[][])maze.clone();</code></p>
    <p><code>&#xA0;&#xA0;&#xA0;&#xA0;<strong>char</strong>[][] mazeCopy = <strong>new</strong> <strong>char</strong>[maze.length][maze[0].length];<br>
  &#xA0;&#xA0;&#xA0;&#xA0;<strong>for</strong> (<strong>int</strong> r = 0; r &lt; mazeCopy.length; r++){<br>
  &#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<strong>for</strong> (<strong>int</strong> c = 0; c &lt; mazeCopy[0].length; c++){<br>
  &#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;mazeCopy[r][c] = maze[r][c];<br>
  &#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;}<br>
  &#xA0;&#xA0;&#xA0;&#xA0;}</code></p>
    <p><code>&#xA0;&#xA0;&#xA0;&#xA0;<strong>if</strong> (1 &lt;= row &amp;&amp; row &lt;= myMaxRow &amp;&amp; 1 &lt;= col &amp;&amp; col &lt;= myMaxCol){<br>
  &#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;// boundary check, if false, a base case<br>
  &#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<strong>if</strong> (BLANK == mazeCopy[row][col]){<br>
  &#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;// if false, base case<br>
  &#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;mazeCopy[row][col] = &apos;!&apos;;<br>
  &#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<strong>if</strong> (1 == row || myMaxRow == row || 1 == col || myMaxCol == col){<br>
  &#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;printMaze(mazeCopy); // base case<br>
  &#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;}<strong>else</strong>{<br>
  &#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;traceMaze(mazeCopy, row - 1, col);<br>
  &#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;traceMaze(mazeCopy, row, col + 1);<br>
  &#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;traceMaze(mazeCopy, row + 1, col);<br>
  &#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;traceMaze(mazeCopy, row, col - 1);<br>
  &#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;}<br>
  &#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;}<br>
  &#xA0;&#xA0;&#xA0;&#xA0;}<br>
  &#xA0;&#xA0;}</code></p>
    <p><code>}</code></p>
    <p>Here are the two solutions when starting at location (6,6):</p>
    <p><img src="http://iws.punahou.edu/user/DKiang/apcs/LessonAB24/images/Fig_AB24_1a.gif" width="441" height="184"></p>
  </blockquote>  <ol>
    <li class="text">
      <p>It is very significant that a blank space be changed to an &apos;!&apos; mark before the recursive calls are made. For example, suppose you began at location 6,6 and a blank space was encountered. If you didn&apos;t change the blank to an &apos;!&apos; mark, the recursive call to solve the upward direction would receive the location 5,6. This recursive call would eventually look back down at location 6,6 - the location where it came from. A blank space would still be there and the recursive calls would go around in circles until the computer ran out of memory.</p>
    </li>
  <li class="text">
      <p>Changing the blank space to an &apos;!&apos; mark is like leaving a trail of markers. When a recursive call of a neighboring cell looks back at the cell from which it came, it will see a &apos;!&apos; mark and not a blank space. </p>
    </li>
    </ol>  <p>&#xA0;</p><br>  
  <br>
  <table cellspacing="0" cellpadding="0" border="0">
    <tr>
      <td width="90%"><span class="header">Summary/Review</span></td>
      <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 6 of 7</nobr></font></td>
    </tr>
  </table>
  <br>
  <p class="text">Some of the earlier examples of recursion were applied to linear problems. The factorial or Fibonacci problems were one dimensional, which required only one recursive call within the algorithm. The maze problem is best-solved recursively because of the different directions that the problem solving takes. Loosely stated, any problem that involves multiple directions and returning to a branch point is a likely candidate for recursion.</p>
  <br><br><br><h2>Chapter 25</h2><br>  
  <br>
  <table cellspacing="0" cellpadding="0" border="0">
    <tr>
      <td width="90%"><span class="header">AB25 Introduction</span></td>
      <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 1 of 11</nobr></font></td>
    </tr>
  </table>
  <br>
  <p class="text">Two critical criteria used for selecting a data structure and algorithm are the amount of memory required and the speed of execution. The analysis of the speed of an algorithm leads to a summary statement called the order of an algorithm.</p>
  <p class="text">The key topics for this lesson are:</p>
  <ol type="A" class="text">
    <li class="text"><a href="AB25-A.html">Order of Algorithms</a></li>
    <li class="text"><a href="AB25-B.html">Constant Algorithms, O(1)</a></li>
  <li class="text"><a href="AB25-C.html">log<sub>2</sub>N Algorithms, O(log<sub>2</sub>N)</a></li>
  <li class="text"><a href="AB25-D.html">Linear Algorithms, O(N)</a></li>
  <li class="text"><a href="AB25-E.html">N * log<sub>2</sub>N Algorithms, O(N * log<sub>2</sub>N)</a></li>
  <li class="text"><a href="AB25-F.html">Quadratic Algorithms, (N<sup>2</sup>)</a></li>
  <li class="text"><a href="AB25-G.html">Other Orders</a></li>
  <li class="text"><a href="AB25-H.html">Comparison of Orders of Algorithms</a></li>
  </ol><br>  
  <br>
  <table cellspacing="0" cellpadding="0" border="0">
    <tr>
      <td width="90%"><span class="header"><a href="../vocabulary/index_AB.html#AB25">AB25 Vocabulary</a></span></td>
      <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 2 of 11</nobr></font></td>
    </tr>
  </table>
  <br>
  <table width="500" border="0">
    <tr class="text">
      <td width="50%">BIG O NOTATION</td>
      <td width="50%">CONSTANT ORDER</td>
    </tr>
    <tr class="text">
      <td>CUBIC ORDER</td>
      <td>LINEAR ORDER</td>
    </tr>
    <tr class="text">
      <td>LOG<sub>2</sub> NORDER</td>
      <td>N LOG<sub>2</sub> NORDER</td>
    </tr>
    <tr class="text">
      <td>ORDER OF ALGORITHM</td>
      <td>QUADRATIC ORDER</td>
    </tr>
    <tr class="text">
      <td>&#xA0;</td>
      <td>&#xA0;</td>
    </tr>
    <tr class="text">
      <td>&#xA0;</td>
      <td>&#xA0;</td>
    </tr>
    <tr class="text">
      <td>&#xA0;</td>
      <td>&#xA0;</td>
    </tr>
    <tr class="text">
      <td>&#xA0;</td>
      <td>&#xA0;</td>
    </tr>
    <tr class="text">
      <td>&#xA0;</td>
      <td>&#xA0;</td>
    </tr>
  </table>
  <br>
  <br>  
  <br>
  <table cellspacing="0" cellpadding="0" border="0">
    <tr>
      <td width="90%"><span class="header">A. Order of Algorithms</span></td>
      <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 3 of 11</nobr></font></td>
    </tr>
  </table>
  <br>
  <ol class="text">
    <li>
      <p>The order of an algorithm is based on the number of steps that it takes to complete a task. Time is not a valid measuring stick because computers have different processing speeds. We want a method of comparing algorithms that is independent of the computing environment and the speed of the microprocessor.</p>
    </li>
<li>
  <p>Most algorithms solve problems involving an amount of data, N. The order of algorithms will be expressed as a function of N, the size of the data set.</p>
</li>
  <li><p>The following chart summarizes the numerical relationships of common functions of N.</p>
    <table width="500" border="0" cellspacing="0" cellpadding="0">
      <tr>
        <td bgcolor="#000000"><table width="100%" border="0" cellspacing="1" cellpadding="3">
          <tr bgcolor="#FFFFFF" class="text">
            <td><div align="center">A<br>
              N
            </div></td>
            <td><div align="center">B<br>
              O(log<sub>2</sub>N)              <br>
            </div></td>
            <td><div align="center">C<br>
              O(N)            </div></td>
            <td><div align="center">D<br>
              O(N* log<sub>2</sub>N)            </div></td>
            <td><div align="center">E<br>
              O(N<sup>2</sup>)            </div></td>
          </tr>
          <tr bgcolor="#FFFFFF" class="text">
            <td><div align="center"><code>&#xA0;&#xA0;&#xA0;1</code></div></td>
            <td><div align="center"><code>&#xA0;0</code></div></td>
            <td><div align="center"><code>&#xA0;&#xA0;&#xA0;1</code></div></td>
            <td><div align="center"><code>&#xA0;&#xA0;&#xA0;&#xA0;0</code></div></td>
            <td><div align="center"><code>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;1</code></div></td>
          </tr>
          <tr bgcolor="#FFFFFF" class="text">
            <td><div align="center"><code>&#xA0;&#xA0;&#xA0;2</code></div></td>
            <td><div align="center"><code>&#xA0;1</code></div></td>
            <td><div align="center"><code>&#xA0;&#xA0;&#xA0;2</code></div></td>
            <td><div align="center"><code>&#xA0;&#xA0;&#xA0;&#xA0;2</code></div></td>
            <td><div align="center"><code>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;4</code></div></td>
          </tr>
          <tr bgcolor="#FFFFFF" class="text">
            <td><div align="center"><code>&#xA0;&#xA0;&#xA0;4</code></div></td>
            <td><div align="center"><code>&#xA0;2</code></div></td>
            <td><div align="center"><code>&#xA0;&#xA0;&#xA0;4</code></div></td>
            <td><div align="center"><code>&#xA0;&#xA0; &#xA0;8</code></div></td>
            <td><div align="center"><code>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;16</code></div></td>
          </tr>
          <tr bgcolor="#FFFFFF" class="text">
            <td><div align="center"><code>&#xA0;&#xA0;&#xA0;8</code></div></td>
            <td><div align="center"><code>&#xA0;3</code></div></td>
            <td><div align="center"><code>&#xA0;&#xA0;&#xA0;8</code></div></td>
            <td><div align="center"><code>&#xA0;&#xA0;&#xA0;24</code></div></td>
            <td><div align="center"><code>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;64</code></div></td>
          </tr>
          <tr bgcolor="#FFFFFF" class="text">
            <td><div align="center"><code>&#xA0;&#xA0;16</code></div></td>
            <td><div align="center"><code>&#xA0;4</code></div></td>
            <td><div align="center"><code>&#xA0;&#xA0;16</code></div></td>
            <td><div align="center"><code>&#xA0;&#xA0;&#xA0;64</code></div></td>
            <td><div align="center"><code>&#xA0;&#xA0;&#xA0;&#xA0;256</code></div></td>
          </tr>
          <tr bgcolor="#FFFFFF" class="text">
            <td><div align="center"><code>&#xA0;&#xA0;32</code></div></td>
            <td><div align="center"><code>&#xA0;5</code></div></td>
            <td><div align="center"><code>&#xA0;&#xA0;32</code></div></td>
            <td><div align="center"><code>&#xA0;&#xA0;160</code></div></td>
            <td><div align="center"><code>&#xA0;&#xA0;&#xA0;1024</code></div></td>
          </tr>
          <tr bgcolor="#FFFFFF" class="text">
            <td><div align="center"><code>&#xA0;&#xA0;64</code></div></td>
            <td><div align="center"><code>&#xA0;6</code></div></td>
            <td><div align="center"><code>&#xA0;&#xA0;64</code></div></td>
            <td><div align="center"><code>&#xA0;&#xA0;384</code></div></td>
            <td><div align="center"><code>&#xA0;&#xA0;&#xA0;4096</code></div></td>
          </tr>
          <tr bgcolor="#FFFFFF" class="text">
            <td><div align="center"><code>&#xA0;128</code></div></td>
            <td><div align="center"><code>&#xA0;7</code></div></td>
            <td><div align="center"><code>&#xA0;128</code></div></td>
            <td><div align="center"><code>&#xA0;&#xA0;896</code></div></td>
            <td><div align="center"><code>&#xA0;&#xA0;16384</code></div></td>
          </tr>
          <tr bgcolor="#FFFFFF" class="text">
            <td><div align="center"><code>&#xA0;256</code></div></td>
            <td><div align="center"><code>&#xA0;8</code></div></td>
            <td><div align="center"><code>&#xA0;256</code></div></td>
            <td><div align="center"><code>&#xA0;2048</code></div></td>
            <td><div align="center"><code>&#xA0;&#xA0;65536</code></div></td>
          </tr>
          <tr bgcolor="#FFFFFF" class="text">
            <td><div align="center"><code>&#xA0;512</code></div></td>
            <td><div align="center"><code>&#xA0;9</code></div></td>
            <td><div align="center"><code>&#xA0;512</code></div></td>
            <td><div align="center"><code>&#xA0;4608</code></div></td>
            <td><div align="center"><code>&#xA0;262144</code></div></td>
          </tr>
          <tr bgcolor="#FFFFFF" class="text">
            <td><div align="center"><code>1024</code></div></td>
            <td><div align="center"><code>10</code></div></td>
            <td><div align="center"><code>1024</code></div></td>
            <td><div align="center"><code>10240</code></div></td>
            <td><div align="center"><code>1048576</code></div></td>
          </tr>
        </table></td>
      </tr>
    </table><br>
          <ol type="a">
            <li>
              <p>The first column, N, is the number of items in a data set.</p>
            </li>
            <li>
              <p>The other four columns are mathematical functions based on the size of N. In computer science, we write this with a capital O (order) instead of the traditional F (function) of mathematics. This type of notation is the order of an algorithm, or Big O notation.</p>
            </li>
            <li>              The graph below, Order of Algorithms, gives a clearer sense of the relationships among the columns of numbers. Since the vertical axis represents the theoretical number of steps required by an algorithm to sort a list of N items, lines B and C represent more efficient algorithms than D and E. Today&#x2019;s data sets can grow to enormous sizes, so algorithm designers are always searching for ways to reduce the number of steps, even on the fastest supercomputers.
              <p align="center"><img src="http://iws.punahou.edu/user/DKiang/apcs/LessonAB25/images/Fig_AB25_1.gif" width="419" height="267"></p>
            </li>
<li>You have already seen column E in an experimental sense when you counted the number of steps in the quadratic sorting algorithms. The relationship between columns A and E is quadratic - as the value of N increases, the other column increases as a function of N<sup>2</sup>. The graph of column E is a portion of a parabola.</li>
          </ol>
    </li>
  </ol>
  <p>&#xA0;</p>
  <br><br>  
  <table cellspacing="0" cellpadding="0" border="0">
    <tr>
      <td width="90%"><span class="header">B. Constant Algorithms, O(1)</span></td>
      <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 4 of 11</nobr></font></td>
    </tr>
  </table>
  <br>
  <ol class="text">
    <li><p>This relationship was not included in the <em>Order of Algorithms</em> graph. Here, the size of the data set does not affect the number of steps this type of algorithm takes. For example:
      </p>
      <p><code><strong>public int</strong> howBig(ArrayList &lt;Integer&gt; list){<br>
  &#xA0;&#xA0;&#xA0;&#xA0;<strong>return</strong> list.size();<br>
  }</code></p>
    </li>
      <li>
          <p>The number of data items in the array could vary from 0...4000, but this does not affect the <code>howBig</code> algorithm. It will take one step regardless of how big the data set is.</p>
      </li>
  <li>
        <p>A constant time algorithm could have more than just one step, as long as the number of steps is independent of the size (N) of the data set.</p>
      </li>
  </ol>
  <br><br>
<table cellspacing="0" cellpadding="0" border="0">
  <tr>
    <td width="90%"><span class="header">C. Log<sub>2</sub>N Algorithms, O(log<sub>2</sub>N)</span></td>
    <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 5 of 11</nobr></font></td>
  </tr>
</table>
  <br>
<ol class="text">
    <li>
      <p>A logarithm is the exponent to which a base number must be raised to equal a given number.</p>
    </li>
<li>
        <p>A log<sub>2</sub>N algorithm, seen in line B on the <em>Order of Algorithms</em> graph, is one where the number of steps increases as a function of log<sub>2</sub>N. If the number of data was 1024, the number of steps equals log<sub>2</sub>1024, or 10 steps since 2<sup>10</sup> = 1024.</p>
</li>
<li>
    <p>Algorithms in this category involve splitting the data set in half repeatedly. Several examples will be encountered later in the course.</p>
</li>
<li>
  <p>Algorithms that fit in this category are classed as O(log N), regardless of the numerical base used in the analysis.</p>
</li>
</ol>  <blockquote>&#xA0;</blockquote>
<p>&#xA0;</p><br><br>
<table cellspacing="0" cellpadding="0" border="0">
  <tr>
    <td width="90%"><span class="header">D. Linear Algorithms, O(N)</span></td>
    <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 6 of 11</nobr></font></td>
  </tr>
</table>
  <br>
  <ol class="text">
    <li>This is an algorithm where the number of steps is directly proportional to the size of the data set, seen in line C on the <em>Order of Algorithms</em> graph. As N increases, the number of steps also increases.
      <p><code><strong>public long</strong> sumData(ArrayList &lt;Integer&gt; list){<br>
  &#xA0;&#xA0;<strong>long</strong> total = 0;</code></p>
      <p><code> &#xA0;&#xA0;Iterator &lt;Integer&gt; itr = list.iterator();<br>
  &#xA0;&#xA0;<strong>while</strong>(itr.hasNext()){<br>
  &#xA0;&#xA0;&#xA0;&#xA0;total += itr.next();<br>
  &#xA0;&#xA0;}<br>
  <br>
  &#xA0;&#xA0;<strong>return</strong> total; <br>
  }</code></p>
    </li>
  <li>
        <p>In the above example, as the size of the array increases, the number of steps increases at the same rate.</p>
  </li>
  <li>
      <p>A non-recursive linear algorithm, O(N), always has a loop involved.</p>
  </li>
  <li>
      <p>Recursive algorithms, in which the looping concept is developed through recursive calls, are usually linear. For example, the recursive factorial function is a linear function.</p>
      <p><code><strong>public long</strong> fact (int n) {<br>
  // precondition: n &gt; 0</code></p>
      <p><code> <strong>&#xA0;&#xA0;if</strong> (1 == n)<br>
            <strong>&#xA0;&#xA0;&#xA0;&#xA0;return</strong> 1;<br>
            <strong>&#xA0;&#xA0;else</strong><br>
            <strong>&#xA0;&#xA0;&#xA0;&#xA0;return</strong> n * fact(n - 1);<br>
          }</code></p>
      <p>The number of calls of fact will be <code>n</code>. Inside of the function is one basic step, an <code><strong>if</strong>/<strong>else</strong></code>. So we are executing one statement <em>n</em> times.</p>
  </li>
  </ol>
  <blockquote class="text">&#xA0;</blockquote>    <p>&#xA0;</p><br><br>
<table cellspacing="0" cellpadding="0" border="0">
  <tr>
    <td width="90%"><span class="header">E. N * log<sub>2</sub>N Algorithms, O(N * log<sub>2</sub>N)</span></td>
    <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 7 of 11</nobr></font></td>
  </tr>
</table>
  <br>
<ol class="text">
	<li>
	  <p>Algorithms of this type, seen in line D on the <em>Order of Algorithms</em> graph, have a log <sub>2</sub>N procedure that must be applied N times.</p>
	</li>
<li>
        <p>The recursive MergeSort is a O(N * log<sub>2</sub>N) algorithm.</p>
</li>
<li>
  <p>As the graph shows, these algorithms are markedly more efficient than our next category, quadratics.</p>
</li>
</ol>
<p>&#xA0;</p>
<br><br>
<table cellspacing="0" cellpadding="0" border="0">
  <tr>
    <td width="90%"><span class="header">F. Quadratic Algorithms, (N<sup>2</sup>)</span></td>
    <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 8 of 11</nobr></font></td>
  </tr>
</table>
  <br>
<ol class="text">
	<li>
	  <p>This is an algorithm, seen in line E on the <em>Order of Algorithms</em> graph, in which the number of steps required to solve a problem increases as a function of N<sup>2</sup>. For example, here is bubbleSort.</p>
	<p><code><strong>void</strong> bubbleSort(ArrayList &lt;Comparable&gt; list){<br>
  &#xA0;&#xA0;<strong>for</strong> (<strong>int</strong> outer = 0; outer &lt; list.length - 1; outer++){<br>
  &#xA0;&#xA0;&#xA0;&#xA0;<strong>for</strong> (<strong>int</strong> inner = 0; inner &lt; list.size()-outer-1; inner++){<br>
  &#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<strong>if</strong> (list.get(inner).compareTo(list.get(inner + 1) &gt; 0){<br>
  &#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//swap list[inner] &amp; list[inner+1]<br>
  &#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<strong>Comparable</strong> temp = list.get(inner);<br>
  &#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;list.set(inner, list.get(inner + 1));<br>
  &#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;list.set(inner + 1, temp);<br>
  &#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;}<br>
  &#xA0;&#xA0;&#xA0;&#xA0;}<br>
  &#xA0;&#xA0;}<br>
  }	</code></p>
	</li>
<li>
        <p>The <strong><code>if</code></strong> statement is buried inside nested loops, each of which is tied to the size of the data set, N. The <strong><code>if</code></strong> statement is going to be executed approximately N times for each of N items, or N<sup>2</sup> times in all.</p>
</li>
<li>
    <p>The efficiency of this bubble sort was slightly improved by having the inner loop decrease, but we still categorize this as a quadratic algorithm.</p>
</li>
<li>
    <p>For example, the number of times the inner loop happens varies from 1 to (N-1). On average, the inner loop occurs (N/2) times.</p>
</li>
<li>
    <p>The outer loop happens (N-1) times, or rounded off N times.</p>
</li>
<li>
    <p>The number of times the <strong>if</strong> statement is executed is equal to this expression:</p>
    <p># if statements = (Outer loop) * (Inner loop)<br>
            # if statements = (N) * (N/2)<br>
          # if statements = N<sup>2</sup>/2</p>
</li>
<li>
    <p>The coefficient 1/2 becomes insignificant for large values of N, so we have an algorithm that is quadratic in nature.</p>
</li>
<li>
  <p>When determining the order of an algorithm, we are only concerned with its category, not a detailed analysis of the number of steps.</p>
</li>
</ol>
<p>&#xA0;</p><br><br>
<table cellspacing="0" cellpadding="0" border="0">
  <tr>
    <td width="90%"><span class="header">G. Other Orders</span></td>
    <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 9 of 11</nobr></font></td>
  </tr>
</table>
  <br>
<ol class="text">
	<li>
	  <p>A cubic algorithm is one where the number of steps increases as a cube of N, or N<sup>3</sup>.</p>
	</li>
	<li>
	  <p>An exponential algorithm is one where the number of steps increases as the power of a base, like 2<sup>N</sup>.</p>
	</li>
<li>
  <p>Both of these categories are astronomical in the number of steps required. Such algorithms are avoided when possible, and for large values of N can run slowly on even the fastest computers.</p>
</li>
</ol>
<p>&#xA0;</p>
<br><br>
<table cellspacing="0" cellpadding="0" border="0">
  <tr>
    <td width="90%"><span class="header">H. Comparison of Orders of Algorithms</span></td>
    <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 10 of 11</nobr></font></td>
  </tr>
</table>
  <br>
<ol class="text">
	<li>
	  <p> We obviously want to use the most efficient algorithm in our programs.&#xA0; Whenever possible, choose an algorithm that requires the fewest number of steps to process data.</p>
	</li>
	</ol>
<blockquote>&#xA0;</blockquote>
<p>&#xA0;</p><br>  
  <br>
  <table cellspacing="0" cellpadding="0" border="0">
    <tr>
      <td width="90%"><span class="header">Summary/Review</span></td>
      <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 11 of 11</nobr></font></td>
    </tr>
  </table>
  <br>
  <p class="text">When designing solutions to programming problems, we are often concerned about finding the most efficient solutions regarding time and space. We will consider memory requirements at a later time. Speed issues are based on the number of steps required by algorithms. </p>
  <br><br><br><h2>Chapter 26</h2><br>  
  <br>
  <table cellspacing="0" cellpadding="0" border="0">
    <tr>
      <td width="90%"><span class="header">AB26 Introduction</span></td>
      <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 1 of 6</nobr></font></td>
    </tr>
  </table>
  <br>
  <p class="text">Quicksort is another recursive sorting algorithm that works by dividing lists in half. Whereas mergeSort divided lists in half and then sorted each sublist, QuickSort will roughly sort the entire list, and then split the list in half. The order of these two sorts falls into the category O(N * log N), which was introduced in Lesson AB25, <em>Order of Algorithms</em>. When the lists become large, either of these sorts will do an excellent job.</p>
  <p class="text">The key topics for this lesson are:</p>
  <ol type="A" class="text">
    <li class="text"><a href="AB26-A.html">QuickSort</a> </li>
    <li class="text"><a href="AB26-B.html">Order of QuickSort</a> </li>
  </ol><br>  
  <br>
  <table cellspacing="0" cellpadding="0" border="0">
    <tr>
      <td width="90%"><span class="header"><a href="../vocabulary/index_AB.html#AB26">AB26 Vocabulary</a></span></td>
      <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 2 of 6</nobr></font></td>
    </tr>
  </table>
  <br>
  <table width="500" border="0">
    <tr class="text">
      <td>QUICKSORT</td>
      <td>&#xA0;</td>
    </tr>
    <tr class="text">
      <td>&#xA0;</td>
      <td>&#xA0;</td>
    </tr>
    <tr class="text">
      <td>&#xA0;</td>
      <td>&#xA0;</td>
    </tr>
    <tr class="text">
      <td>&#xA0;</td>
      <td>&#xA0;</td>
    </tr>
    <tr class="text">
      <td>&#xA0;</td>
      <td>&#xA0;</td>
    </tr>
    <tr class="text">
      <td>&#xA0;</td>
      <td>&#xA0;</td>
    </tr>
    <tr>
      <td>&#xA0;</td>
      <td>&#xA0;</td>
    </tr>
  </table>
  <br>
  <br>  
  <br>
  <table cellspacing="0" cellpadding="0" border="0">
    <tr>
      <td width="90%"><span class="header">A. QuickSort</span></td>
      <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 3 of 6</nobr></font></td>
    </tr>
  </table>
  <br>
  <ol class="text">
    <li><p>Here is the overall strategy of QuickSort:</p>
      <ol type="a">
            <li>
              <p>QuickSort chooses an arbitrary value from somewhere in the list. A common location is the middle value of the list.</p>
            </li>
            <li>
              <p>This value becomes a decision point for roughly sorting the lis-t into two sublists, which are called the &#x201C;left&#x201D; and the &#x201C;right&#x201D; sublists. All the values smaller than the dividing value are placed in the left sublist, while all the values greater than the dividing value are placed in the right sublist.</p>
            </li>
            <li>
              <p>Each sublist is then recursively sorted with QuickSort.</p>
            </li>
            <li>
              <p>The termination of QuickSort occurs when a list of one value is obtained, which by definition is sorted.</p>
            </li>
        </ol>
    </li>
    <li>
    <p>This is the code for quickSort:</p>
          <p><code><strong>void</strong> quickSort (ArrayList &lt;Comparable&gt; list, int first, int last){<br>
          &#xA0;&#xA0;<strong>int</strong> g = first, h = last;</code></p>
          <p><code> &#xA0;&#xA0;<strong>int</strong> midIndex = (first + last) / 2;<br>
            &#xA0;&#xA0;Comparable dividingValue = list.get(midIndex);<br>
            &#xA0;&#xA0;<strong>do</strong>{<br>
            &#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<strong>while</strong> (list.get(g).compareTo(dividingValue) &lt; 0) g++;<br>
            &#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<strong>while</strong> (list.get(h).compareTo(dividingValue) &gt; 0) h--;<br>
            &#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<strong>if</strong> (g &lt;= h){<br>
            &#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//swap(list[g], list[h]);<br>
            &#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;swap(list,g,h);<br>
            &#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;g++;<br>
            &#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;h--;<br>
            &#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;}<br>
            &#xA0;&#xA0;}<strong>while</strong> (g &lt; h);<br>
            &#xA0;&#xA0;<strong>if</strong> (h &gt; first) quickSort (list,first,h);<br>
            &#xA0;&#xA0;<strong>if</strong> (g &lt; last) quickSort (list,g,last);<br>
          }</code></p>
  </li>
    <li>Suppose we have the following list of 9 unsorted values in an array:
        <p> 17 22 34 28 19 84 11 92 1</p>
      <ol type="a">
            <li>
              <p>The values received by the formal parameter <code>list</code> in the first call of <code>quickSort</code> are a reference to an array, and the first and last cells of the array, 0 and 8. Variable <code>first</code> is initialized with the value 0, and <code>last</code> is initialized with the value 8.</p>
            </li>
            <li>
              <p>The <code>midIndex</code> value is calculated as (0+8) / 2, which equals 4.</p>
            </li>
            <li>
              <p>The <code>dividingValue</code> is the value in location 4, list[4] = 19.</p>
            </li>
            <li>
              <p>The value of 19 will be our decision point for sorting values into two lists. The list to the left will contain all the values less than or equal to 19. The list to the right will contain the values larger than 19. Or simply put, small values go to the left and large values go to the right.</p>
            </li>
            <li>
              <p>The identifiers <code>g</code> and <code>h</code> will be <u>indices</u> to locations in the list. The <strong><code>while</code></strong> loops will move <code>g</code> and <code>h</code> until a value is found to be on the wrong side of the dividing value of 19. The g index is initialized with the value of <code>first</code> and the <code>h</code> index is initialized with the value of <code>last</code>.</p>
            </li>
            <li>
              <p>The <code>g</code> index starts at position 0 and moves until it &#x201C;sees&#x201D; that 22 is on the wrong side. Index <code>g</code> stops at location 1. </p>
            </li>
            <li>
              <p>The <code>h</code> index starts at position 8. Immediately it &#x201C;sees&#x201D; that the value 1 is on the wrong side. </p>
            </li>
            <li>
              <p>Since <code>g &lt;= h</code> (1 &lt;= 8), the values in <code>list[1]</code> and <code>list[8]</code> are swapped. After the values are swapped, index <code>g</code> moves one position to the right and index <code>h</code> moves one position to the left. </p>
            </li>
            <li>
              <p>The values of the pointers are now: <code>g = 2, h = 7</code>. We continue the <strong><code>do-while</code></strong> loop until <code>g</code> and <code>h</code> have passed each other, that is when <code>g &gt; h</code>. At this point, the lists will be roughly sorted, with values smaller than 19 on the left, and values greater than 19 on the right.</p>
            </li>
            <li>
              <p>If the left sublist has more than one value, (which is determined by the <code>h &gt; first</code> expression), then a recursive call of <code>quickSort</code> is made. This call of <code>quickSort</code> will send the index positions that define that smaller sublist.</p>
            </li>
            <li>
              <p>Likewise, if the right sublist has more than one value, <code>quickSort</code> is called again and the index positions that define that sublist are passed.</p>
            </li>
          </ol>
    </li>
  </ol>  <p>&#xA0;</p>
  <br><br>  
  <table cellspacing="0" cellpadding="0" border="0">
    <tr>
      <td width="90%"><span class="header">B. Order of QuickSort</span></td>
      <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 4 of 6</nobr></font></td>
    </tr>
  </table>
  <br>
  <ol class="text">
    <li><p>Determining the order of QuickSort, O (N* log<sub>2</sub>N), is a difficult process. The best way to understand it is to imagine a hypothetical situation in which each call of <code>quickSort</code> results in sublists of the same size. Let&#x2019;s try a size of 128, because it is a power of 2.</p>
    </li>
    <li>
        <p>If a list has 128 elements, the number of calls of <code>quickSort</code> required to move a value into its correct spot is log<sub>2</sub>128, which equals 7 steps. Dividing the list in half gives us the log<sub>2</sub>N aspect of QuickSort.</p>
    </li>
  <li>
        <p>But we need to do this to 128 numbers, so the approximate number of steps to sort 128 numbers will be 128 * log<sub>2</sub>128. A general expression of the order of QuickSort will be O(N * log<sub>2</sub>N). An O(N * log<sub>2</sub>N) algorithm is a more specific designation of the broader category called O(N * log N).</p>
  </li>
  <li>
    <p>A graph of an O(N* log<sub>2</sub>N) algorithm is close to a linear algorithm, for large values of N. The log<sub>2</sub>N number of steps grows very slowly, making QuickSort a dramatic improvement over the O(N<sup>2</sup>) sorts.</p>
  </li>
  </ol>
  <p>&#xA0;</p><br>  
  <br>
  <table cellspacing="0" cellpadding="0" border="0">
    <tr>
      <td width="90%"><span class="header">Summary/Review</span></td>
      <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 5 of 6</nobr></font></td>
    </tr>
  </table>
  <br>
  <p class="text">QuickSort is generally the fastest and therefore most widely used sorting algorithm. There is a variation of QuickSort named &#x201C;QuickerSort&#x201D; but it is still in the same class of algorithms. Once again, recursion makes fast work of a difficult task.</p>
  <br><br><br><h2>Chapter 27</h2><br>  
  <br>
  <table cellspacing="0" cellpadding="0" border="0">
    <tr>
      <td width="90%"><span class="header">AB27 Introduction</span></td>
      <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 1 of 9</nobr></font></td>
    </tr>
  </table>
  <br>
  <p class="text">ArrayList, part of the Java List Collection, was introduced in Lesson A15, <em>ArrayList</em>. As demonstrated throughout this curriculum, lists are very useful. This lesson will cover the List Interface and the two different implementations of Lists: ArrayList and LinkedList. Iterators will be covered as well as the different methods of storage used by the two implementations.</p>
  <p class="text">The key topics for this lesson are:</p>
  <ol type="A" class="text">
    <li class="text"><a href="AB27-A.html">The <code>List Interface</code></a></li>
    <li class="text"><a href="AB27-B.html">The <code>ArrayList</code> Class</a></li>
  <li class="text"><a href="AB27-C.html">The <code>LinkedList</code> Class</a></li>
  <li class="text"><a href="AB27-D.html">Traversing a List using <code>Iterator</code> or <code>ListIterator</code> Objects</a></li>
  <li class="text"><code><a href="AB27-E.html">LinkedList</a></code><a href="AB27-E.html"> vs <code>ArrayList</code></a> </li>
  </ol><br>  
  <br>
  <table cellspacing="0" cellpadding="0" border="0">
    <tr>
      <td width="90%"><span class="header"><a href="../vocabulary/index_AB.html#AB27">AB27 Vocabulary</a></span></td>
      <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 2 of 9</nobr></font></td>
    </tr>
  </table>
  <br>
  <table width="500" border="0">
    <tr class="text">
      <td width="50%">ITERATOR</td>
      <td width="50%"><code>ListIterator</code></td>
    </tr>
    <tr class="text">
      <td>LINKEDLIST</td>
      <td>TRAVERSE</td>
    </tr>
    <tr class="text">
      <td>&#xA0;</td>
      <td>&#xA0;</td>
    </tr>
    <tr class="text">
      <td>&#xA0;</td>
      <td>&#xA0;</td>
    </tr>
    <tr class="text">
      <td>&#xA0;</td>
      <td>&#xA0;</td>
    </tr>
    <tr class="text">
      <td>&#xA0;</td>
      <td>&#xA0;</td>
    </tr>
    <tr>
      <td>&#xA0;</td>
      <td>&#xA0;</td>
    </tr>
  </table>
  <br>
  <br>  
  <br>
  <table cellspacing="0" cellpadding="0" border="0">
    <tr>
      <td width="90%"><span class="header">A. The List Interface</span></td>
      <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 3 of 9</nobr></font></td>
    </tr>
  </table>
  <br>
  <p class="text">The AP subset of the Java List interface is shown below:</p>  <p class="text"><code>interface java.util.List</code> - AP subset</p>
  <p class="text"><code><strong>int</strong> size() <br>
      <strong>boolean</strong> add(Object x) <br>
    Object get(<strong>int</strong> index)<br>
    Object set(<strong>int</strong> index, Object x)<br>
    Iterator iterator()<br>
    ListIterator listIterator()</code></p>
  <p class="text">In order to implement a List, you must use the methods listed in the interface. Java provides two implementations for a List: ArrayList and LinkedList.</p>
  <p class="text"> Like <code>ArrayList</code> and other collection classes, <code>LinkedList</code> stores references to objects. </p>
  <p class="text"><code>List &lt; ClassName &gt; classList = <strong>new</strong> LinkedList &lt; ClassName &gt;();<br>
    classList.add(<strong>new</strong> ClassName(_APCS_));<br>
    ...<br>
    ClassName favoriteClass = classList.get(1)</code></p>
  <p class="text">This creates <code>classList</code> as a <code>List</code> implemented as a <code>LinkedList</code>. Declaring <code>classList</code> as a List restricts the methods for <code>classList</code> to those in the <code>List</code> interface. Instantiating <code>classList</code> as a <code>LinkedList</code> means it is stored as a <code>LinkedList</code>.</p>
  <p>&#xA0;</p>
  <br><br>  
  <table cellspacing="0" cellpadding="0" border="0">
    <tr>
      <td width="90%"><span class="header">B. The ArrayList Class</span></td>
      <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 4 of 9</nobr></font></td>
    </tr>
  </table>
  <br>
  <ol class="text">
    <li><p>The <code>ArrayList</code> class, <code>java.util.ArrayList</code>, provides the following methods in addition to the List methods:</p>
      <p><code>void add(<strong>int</strong> index, Object x)<br>
        Object remove(<strong>int</strong> index)</code></p>
    </li>
    <li>
      <p>The basics of using the <code>ArrayList</code> class were explained in Lesson A15, <em>ArrayList</em>.</p>
    </li>
  </ol>
  <p>&#xA0;</p><br><br>
<table cellspacing="0" cellpadding="0" border="0">
  <tr>
    <td width="90%"><span class="header">C. The LinkedList Class</span></td>
    <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 5 of 9</nobr></font></td>
  </tr>
</table>
  <br>
<ol class="text">
    <li><p>The <code>LinkedList</code> class is based on the linked list data structure, just as the <code>ArrayList</code> class is based on the array data structure. An array is a random access data structure of contiguous elements. Any element in an array can be accessed directly using an index. In a linked list, the elements are connected by links and are not necessarily contiguous. In a linked list, the elements cannot be accessed directly; the elements must be accessed sequentially, following the links until the desired element is reached. A good analogy for an array is the viewing of a DVD (digital video disc). Any scene in a movie on a DVD can be accessed directly using the DVD scene selection menu to &apos;jump&apos; to the scene. </p>
      <p>By contrast, playing a videocassette tape is an example of a linked list. To reach a scene with a videocassette recorder/player (VCR), the tape must be advanced through all of the previous scenes. Some high-end VCRs have a feature that automatically goes back and marks the beginning and end of each commercial of a recorded program. Then, when playing the tape &#x2014; with the commercial advance feature turned on &#x2014; the VCR fast-forwards over the ads to skip them. To the user, it appears that the VCR is accessing the marked positions directly. However, the VCR internally sequences through the taped commercials to reach the marked positions. This is similar to what happens in a linked list when accessing an element by an index.</p>
    </li>
<li>
        <p>The <code>LinkedList</code> class, <code>java.util.LinkedList</code>, provides the following methods in addition to the List methods:</p>
        <p><code><strong>void</strong> addFirst( Object x)<br>
            <strong>void</strong> addLast(Object x)<br>
          Object getFirst()<br>
          Object getLast()<br>
          Object removeFirst()<br>
          Object removeLast()</code></p>
</li>
<li>
    <p>To declare a reference variable for a <code>LinkedList</code>, do the following.</p>
    <p><code>// myLinkedList is a reference to an LinkedList <br>
      // object. <br>
      LinkedList &lt;ClassName&gt; myLinkedList = <br>
      <strong>new</strong> LinkedList &lt;ClassName&gt; ();</code></p>
</li>
<li>
    <p>An object can be declared as a <code>List</code> and created as a <code>LinkedList</code> or <code>ArrayList</code>. In that case, only the methods of <code>List</code> are available to the object. The advantage is that either implementation can be chosen without having to change any of the code that uses the object.</p>
    <p><code><strong>if</strong> (implementationChoice.equals(&quot;LinkedList&quot;)) {<br>
  &#xA0;&#xA0;&#xA0;List &lt;String&gt; list = <strong>new</strong> LinkedList &lt;String&gt;();<br>
      }<br>
      <strong>if</strong> (implementationChoice.equals(&quot;ArrayList&quot;)) {<br>
      &#xA0;&#xA0;&#xA0;List &lt;String&gt; list = <strong>new</strong> ArrayList &lt;String&gt;();<br>
      }<br>
      list.add(&quot;John&quot;);<br>
      list.add(&quot;George&quot;);</code></p>
    <p><code><strong>for</strong>(String temp : list){<br>
  &#xA0;&#xA0;&#xA0;System.out.println(temp);<br>
  }</code></p>
    <p>Notice that the for each loop can be used here. A for each loop can be used in any collection that implements Iterable.</p>
</li>
</ol>  <p>&#xA0;</p><br><br>
<table cellspacing="0" cellpadding="0" border="0">
  <tr>
    <td width="90%"><span class="header">D. Traversing a List using Iterator or ListIterator Objects</span></td>
    <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 6 of 9</nobr></font></td>
  </tr>
</table>
  <br>
  <ol class="text">
    <li><p>A traversal of a list is an operation that visits all the elements of the list in sequence and performs some operation.</p>
    </li>
  <li>
        <p>An iterator is an object associated with the list. When an iterator is created, it points to a specific element in the list, usually the first. The iterator provides methods to check whether there are more elements to be visited, to obtain the next element, and to remove the current element. This makes it easy to traverse a list. Using an iterator helps prevent OBOBs (&apos;Off-By-One-Bugs&apos;: attempts to access an element beyond the length of the list) because the iterator knows how big the list is.</p>
  </li>
  <li>
      <p>In Java, iterators are defined by the library interface, <code>java.util.Iterator</code>.</p>
  </li>
  <li>
      <p><code>Iterator</code> defines three basic methods:</p>
      <p><code>Object next()<br>
          // Returns the next element in the iteration</code></p>
      <p><code><strong>boolean</strong> hasNext()<br>
          // Returns true if the iteration has more elements</code></p>
      <p><code><strong>void</strong> remove()<br>
          // Removes the last element returned by next from the list</code></p>
  </li>
  <li>
      <p>A list traversal would be implemented using an iterator as follows.</p>
      <p><code>LinkedList &lt;String&gt; list = <strong>new</strong> LinkedList &lt;String&gt;();<br>
            // Add values to the list<br>
          ...</code></p>
      <p><code>Iterator &lt;String&gt; iter = list.iterator();<br>
            <strong>while</strong> (iter.hasNext()){<br>
            &#xA0;&#xA0;System.out.println(iter.next());<br>
          }</code></p>
      <p>Note that the list provides the iterator.</p>
  </li>
  <li>
      <p>A limitation of the <code>Iterator</code> interface is that an iterator always starts at the beginning of the list and can only move forward.</p>
  </li>
  <li>
      <p>A more comprehensive <code>ListIterator</code> object is returned by <code>List</code>&#x2019;s <code>listIterator</code> method. <code>ListIterator</code> extends <code>Iterator</code>. A ListIterator can start at any specified position in the list and can proceed forward or backward. For example:</p>
      <p><code>ListIterator &lt;String&gt; listIter = <br>
            list.listIterator(list.size());<br>
            <strong>while</strong> (listIter.hasPrevious()){<br>
            &#xA0;&#xA0;String value = listIter.previous();<br>
            &#xA0;&#xA0;// process value<br>
            &#xA0;&#xA0;...<br>
          }</code></p>
  </li>
  <li>
      <p>Some useful <code>ListIterator</code> methods are summarized below:</p>
      <p><code>Object next()<br>
          // Returns the next element in the iteration.</code></p>
      <p><code><strong>void</strong> add(Object x)<br>
          // Inserts the argument into the list being iterated over.</code></p>
      <p><code><strong>void</strong> set(Object x)<br>
          // Replaces the last element returned by next by the argument.</code></p>
  </li>
  <li>
      <p>The following two examples illustrate one of the advantages of iterators.</p>
      <p><u>Example 1:</u> <br>
            <br>
            <code>LinkedList &lt;String&gt; list = <strong>new</strong> LinkedList &lt;String&gt;();<br>
          // Add values to the list</code></p>
      <p><code> &#xA0;&#xA0;&#xA0;list.add(&quot;John&quot;);<br>
  &#xA0;&#xA0;&#xA0;list.add(&quot;Ann&quot;);<br>
  &#xA0;&#xA0;&#xA0;list.add(&quot;Betsy&quot;);<br>
  &#xA0;&#xA0;&#xA0;list.add(&quot;Nancy&quot;);<br>
            <br>
            &#xA0;&#xA0;&#xA0;<strong>for</strong>(<strong>int</strong> i = 0; i &lt; list.size(); i++){<br>
            &#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;String value = list.get(i);<br>
            &#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;System.out.println(value);<br>
            &#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<strong>if</strong>(value.equals(&quot;Ann&quot;))<br>
            &#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;list.remove(i); <br>
          &#xA0;&#xA0;&#xA0;}</code></p>
      <p><em><code><u>Run Output:</u></code></em></p>
      <p><code>John<br>
            Ann<br>
            Nancy<br>
      </code>
          </p>
      <p><u>Example 2:</u></p>
      <p> <code>LinkedList &lt;String&gt; list2 = <strong>new</strong> LinkedList &lt;String&gt;();<br>
          // Add values to the list</code></p>
      <p><code> &#xA0;&#xA0;&#xA0;list2.add(&quot;John&quot;);<br>
  &#xA0;&#xA0;&#xA0;list2.add(&quot;Ann&quot;);<br>
  &#xA0;&#xA0;&#xA0;list2.add(&quot;Betsy&quot;);<br>
  &#xA0;&#xA0;&#xA0;list2.add(&quot;Nancy&quot;);<br>
  &#xA0;&#xA0;&#xA0;Iterator &lt;String&gt; listIter = list2.iterator();<br>
            &#xA0;&#xA0;&#xA0;<strong>while</strong> (listIter.hasNext()){<br>
            &#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;String value = listIter.next();<br>
            &#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;System.out.println(value);<br>
            &#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<strong>if</strong>(value.equals(&quot;Ann&quot;))<br>
            &#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;listIter.remove();<br>
          &#xA0;&#xA0;&#xA0;}</code></p>
      <p><em><code><u>Run Output:</u></code></em></p>
      <p><code>John<br>
            Ann<br>
            Betsy<br>
          Nancy</code></p>
      <p>In <u>Example 1</u>, the index is external to the list, so after removing Ann, i is incremented but the elements of the list have changed positions and Betsy is skipped. In <u>Example 2</u>, the iterator keeps track of the positions of the elements after Ann is removed and Betsy is not skipped.</p>
  </li>
  </ol>
  <p>&#xA0;</p>
  <br><br>
<table cellspacing="0" cellpadding="0" border="0">
  <tr>
    <td width="90%"><span class="header">E. LinkedList vs ArrayList</span></td>
    <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 7 of 9</nobr></font></td>
  </tr>
</table>
  <br>
  <p class="text">An important aspect of good programming is to choose the best data structure to solve a particular problem. Here are some advantages and disadvantages of using one versus the other &#x2014; <code>LinkedList</code> vs <code>ArrayList</code>:</p>  <table width="90%" border="0" cellspacing="0" cellpadding="4">
    <tr class="text">
      <td><strong>Operation</strong></td>
      <td><strong><code>LinkedList</code></strong></td>
      <td><strong><code>ArrayList</code></strong></td>
    </tr>
    <tr class="text">
      <td>Searching</td>
      <td>Best performance is O(N) because the list must be searched sequentially even if it is ordered.</td>
      <td>Best performance is O(log N) if the list is ordered because a binary search can be used.</td>
    </tr>
    <tr class="text">
      <td>Insertion/deletion</td>
      <td>Performance is O(1) no matter how big the list is. At most, two elements are affected (see Lesson AB30).</td>
      <td>Performance is O(N) because many elements of the list may have to be moved.</td>
    </tr>
    <tr class="text">
      <td>Accessing by index</td>
      <td>Performance is O(N).</td>
      <td>Performance is O(1).</td>
    </tr>
  </table>  <p class="text">When designing a program to build a telephone directory, for example, <code>ArrayList</code> might be a better choice than <code>LinkedList</code>. The directory would not change often, so insertion/deletion would not be a major concern. However, fast searching would be important.</p>
<p class="text">On the other hand, <code>LinkedList</code> might be better for a print spooler program. Print jobs will frequently be inserted (when a new print request is received) and deleted (when the print job is sent to the physical printer). The list could even be prioritized so that small print jobs would be inserted near the front of the list. However, searching through the list for a particular print job would not be a common occurrence.</p>
<p class="text">&#xA0;</p><br>  
  <br>
  <table cellspacing="0" cellpadding="0" border="0">
    <tr>
      <td width="90%"><span class="header">Summary/Review</span></td>
      <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 8 of 9</nobr></font></td>
    </tr>
  </table>
  <br>
  <p class="text">Java provides two implementations of the List interface: <code>ArrayList</code> and <code>LinkedList</code>. Both implementations allow a program to use the standard methods of <code>List</code> as well as to take advantage of methods specific to each implementation. Iterators are useful for traversing lists. Each implementation of <code>List</code> has advantages that make it well suited for different tasks.</p>
  <br><br><br><h2>Chapter 28</h2><br>  
  <br>
  <table cellspacing="0" cellpadding="0" border="0">
    <tr>
      <td width="90%"><span class="header">AB28 Introduction</span></td>
      <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 1 of 11</nobr></font></td>
    </tr>
  </table>
  <br>
  <p class="text">As we saw in Lesson AB27, <em>Java Lists and Iterators</em>, a collection is an object that holds other objects. It can be used in many situations, but a collection is most often used to add, remove, and otherwise manage the elements in it.</p>
  <p class="text">Collections can be implemented in several ways. That is, the data structure that stores the objects can be implemented using different techniques. In this lesson, Sets and Maps will be studied. A Set is a collection of elements without duplicates. A Map is a group of elements that can be referenced by a key value. </p>
  <p class="text">The key topics for this lesson are:</p>
  <ol type="A" class="text">
    <li class="text"><a href="AB28-A.html">Sets</a></li>
    <li class="text"><code><a href="AB28-B.html">TreeSet</a></code></li>
  <li class="text"><code><a href="AB28-C.html">HashSet</a></code></li>
  <li class="text"><code><a href="AB28-D.html">HashSet</a></code><a href="AB28-D.html"> vs. <code>TreeSet</code></a></li>
  <li class="text"><a href="AB28-E.html">Maps</a></li>
  <li class="text"><code><a href="AB28-F.html">TreeMap</a></code></li>
  <li class="text"><code><a href="AB28-G.html">HashMap</a></code></li>
  </ol><br>  
  <br>
  <table cellspacing="0" cellpadding="0" border="0">
    <tr>
      <td width="90%"><span class="header"><a href="../vocabulary/index_AB.html#AB28">AB28 Vocabulary</a></span></td>
      <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 2 of 11</nobr></font></td>
    </tr>
  </table>
  <br>
  <table width="500" border="0">
    <tr class="text">
      <td width="50%">HASHMAP</td>
      <td width="50%">HASHSET</td>
    </tr>
    <tr class="text">
      <td>KEY</td>
      <td>MAP</td>
    </tr>
    <tr class="text">
      <td>SET</td>
      <td>TREESET</td>
    </tr>
    <tr class="text">
      <td>TREEMAP</td>
      <td>&#xA0;</td>
    </tr>
    <tr class="text">
      <td>&#xA0;</td>
      <td>&#xA0;</td>
    </tr>
    <tr class="text">
      <td>&#xA0;</td>
      <td>&#xA0;</td>
    </tr>
    <tr>
      <td>&#xA0;</td>
      <td>&#xA0;</td>
    </tr>
  </table>
  <br>
  <br>  
  <br>
  <table cellspacing="0" cellpadding="0" border="0">
    <tr>
      <td width="90%"><span class="header">A. Sets</span></td>
      <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 3 of 11</nobr></font></td>
    </tr>
  </table>
  <br>
  <ol class="text">
    <li><p>In the Java standard class library, the <code>Set</code> interface defines the operations on an object that represents a set of elements. The <code>Set</code> interface is based on the idea of a mathematical set. A set is a collection that has no duplicate elements.</p>
    </li>
  <li>
        <p>A <code>Set</code> must not have two elements that are equal as specified by an object&#x2019;s <code>equals</code> method. For example <code>{7, 11, 13}</code> is a set but <code>{7, 11, 11}</code> is not.</p>
  </li>
  <li>      
    <p>The <code>Set</code> interface allows the following operations:
    </p>
    <ul class="textd">
          <li>insert an element into the set</li>
      <li>remove an element from the set</li>
    <li>test if a given element is in the set</li>
    <li>iterate over the elements of the set using Iterator</li>
    </ul><br>
  </li>
  <li>    
    <p>Figure 28.1 below lists the methods of the <code>Set</code> interface that are a part of the AP subset.</p>
        <blockquote>
          <p><code>// Adds the specified element to this set if it is<br>
              // not already present and returns true. If this set<br>
              // already contains the specified element, the call<br>
              // leaves this set unchanged and returns false.<br>
              <strong>boolean</strong> add(Object obj);</code></p>
          <p><code>// Returns true if the set contains the specified<br>
              // element, false otherwise.<br>
              <strong>boolean</strong> contains(Object obj);</code></p>
          <p><code>// Removes the specified element from this set if it<br>
              // is present and returns true. Returns false if the<br>
              // element was not in the set.<br>
              <strong>boolean</strong> remove(Object obj);</code></p>
          <p><code>// Returns the number of elements in this set.<br>
              <strong>int</strong> size();</code></p>
        </blockquote>
  </li>
  <blockquote>
    <p><code>// Returns an iterator over the elements in the set.<br>
            Iterator iterator()</code><br>
            <br>
            Figure 28.1 - Methods of the <code>Set</code> interface included in the AP Subset</p>
  </blockquote>
        <li>
          <p>Because a set may not have duplicates, the elements of a <code>Set</code> should be immutable (unchangeable) objects. If a <code>Set</code> contained changeable objects, an object could be changed to become equal to another object in the <code>Set</code>.        </p>
        </li>
          <li>
            <p>Because the elements in a set do not have to be in order, the <code>Set</code> interface does not require that the elements in the iterator returned by the <code>iterator</code> method be in any particular order. The order of the values generated by the iterator depends on the class that implements <code>Set</code>.</p>
          </li>
  </ol>
  <p>&#xA0;</p>
  <br><br>  
  <table cellspacing="0" cellpadding="0" border="0">
    <tr>
      <td width="90%"><span class="header">B. TreeSet</span></td>
      <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 4 of 11</nobr></font></td>
    </tr>
  </table>
  <br>
  <ol class="text">
    <li>
      <p>The <code>java.util.TreeSet</code> class in the Java standard class library is an implementation of the <code>Set</code> interface using trees. This class uses a balanced binary search tree to keep elements in sorted order. The <code>TreeSet</code> class implements the <code>Set</code> interface, so Figure 28.1 describes <code>TreeSet&apos;s</code> methods as well.</p>
    </li>
    <li>
        <p>In general, any <code>Comparable</code> objects may be placed into a <code>TreeSet</code>. This guarantees that the set will be in ascending order, as determined by the object&#x2019;s <code>compareTo</code> method. Items in a <code>TreeSet</code> should also be mutually comparable, meaning that for any pair of elements <code>e1</code> and <code>e2</code> in the set, <code>e1.compareTo(e2)</code> will not throw a <code>ClassCastException</code>. The items in a <code>TreeSet</code> should all be of the same type.</p>
    </li>
  <li>
        <p>Because of the balanced binary tree implementation, the <code>TreeSet</code> class provides an <em>O</em>(<em>log n</em>) run time for the operations <code>add</code>, <code>remove</code>, and <code>contains</code>.</p>
        <p><code>import java.util.TreeSet;<br>
          import java.util.Set;<br>
          <br>
          Set &lt;String&gt; myTree = <strong>new</strong> TreeSet &lt;String&gt;();<br>
          myTree.add(&quot;Nancy&quot;);<br>
          myTree.add(&quot;David&quot;);<br>
          myTree.add(&quot;David&quot;);<br>
          System.out.println(myTree.size());</code></p>
        <p><code><strong>for</strong>(String temp : myTree){<br>
  &#xA0;&#xA0;System.out.println(temp);<br>
  }</code></p>
        <p>The output for this code fragment is</p>
        <p><code>The size of the set is 2<br>
            David<br>
          Nancy</code></p>
    </li>
  </ol>
  <p>&#xA0;</p><br><br>
<table cellspacing="0" cellpadding="0" border="0">
  <tr>
    <td width="90%"><span class="header">C. HashSet</span></td>
    <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 5 of 11</nobr></font></td>
  </tr>
</table>
  <br>
<ol class="text">
    <li>
      <p>The <code>java.util.HashSet</code> class in the Java standard class library is an implementation of the Set interface using a hash key. A hash key is an index that is calculated from a value by a hashing algorithm (see Lesson AB32, <em>Hash-Coded Data Storage</em> for more information on hash keys). The HashSet class implements the Set interface; therefore, Figure 28.1 describes HashSet&#x2019;s methods as well.</p>
    <p><code>Set &lt;String&gt; s = <strong>new</strong> HashSet &lt;String&gt;();<br>
  s.add(&quot;Lynn&quot;);<br>
  s.add(&quot;Nancy&quot;);<br>
  s.add(&quot;David&quot;);<br>
  s.add(&quot;Lynn&quot;);<br>
  System.out.println(&quot;Size of set = &quot; + s.size());<br>
        Iterator itr = s.iterator();<br>
        <strong>while</strong>(itr.hasNext()){<br>
  &#xA0;&#xA0;&#xA0;System.out.println(itr.next());<br>
  }</code></p>
      <p><code><u><em>Run Output:</em></u><br>
        Lynn<br>
        David<br>
        Nancy</code></p>
    </li>
<li>
        <p>Since a HashSet does not guarantee any particular order, the order of the output is not known. All we do know is that we will get all of the elements in the Set.</p>
</li>
<li>
  <p>Hashing is a way for the data to be stored in an array in such a way that it can be retrieved very efficiently. Hashing is O(1) for <code>add</code>, <code>remove</code>, and <code>contains</code>.</p>
</li>
</ol>  <p>&#xA0;</p><br><br>
<table cellspacing="0" cellpadding="0" border="0">
  <tr>
    <td width="90%"><span class="header">D. HashSet vs. TreeSet</span></td>
    <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 6 of 11</nobr></font></td>
  </tr>
</table>
  <br>
  <p class="text">Here are some advantages and disadvantages of using a hash compared to using a tree.</p>  <p class="text">Hashing is very efficient as long as the hashing algorithm is a good one. It gives very fast access to any element in the <code>HashSet</code>. However, dealing with the complexities of creating the hashing algorithm as well as dealing with collisions (a collision is when two different items have the same hash key) can be difficult. One consequence of collisions is that extra memory is required to handle the possibility of collisions. Lesson AB32, <em>Hash-Coded Data Storage</em> will explore hashing in detail.</p>
  <p class="text">Balanced binary search trees give good average performance for any data size. In certain situations, they can be incredibly efficient and always use the minimum amount of memory. Lesson AB30, <em>Binary Trees</em> will explore balanced binary search trees in detail.</p>
  <blockquote>&#xA0;</blockquote>  <p>&#xA0;</p>
  <br><br>
<table cellspacing="0" cellpadding="0" border="0">
  <tr>
    <td width="90%"><span class="header">E. Maps</span></td>
    <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 7 of 11</nobr></font></td>
  </tr>
</table>
  <br>
<ol class="text">
	<li>
	  <p>A map maintains a correspondence between elements of two sets of objects. The objects in one set are thought to be &#x201C;keys,&#x201D; and the objects in the other set are thought to be &#x201C;values.&#x201D; A map cannot contain duplicate keys, which means that each key maps to only one value. Different keys, however, can map to the same value.</p>
	</li>
<li>
        <p>An example of a map is an email directory: the keys in the map are the email addresses and the values are the names in the address book. Each email address in the directory maps to one name. Duplicate keys are not allowed, so the keys in a map form a set. Note that this does not preclude two different keys mapping to the same value, just as two email addresses can belong to one name. Like the elements of a <code>Set</code>, the keys in a <code>Map</code> should be immutable.</p>
</li>
<li>    
  <p>The <code>Map</code> interface allows the following operations:
  </p>
  <ul class="textd">
        <li>insert a key/value pair into the map</li>
    <li>retrieve any value, given its key</li>
  <li>test if a given key is in the map</li>
  <li>view the elements in the map</li>
  <li>iterate over the mapping elements, using <code>Iterator</code></li>
  </ul><br>
</li>
<li>
  <p>In Java, this functionality is formalized by the <code>java.util.Map</code> interface. A few of <code>Map</code>&#x2019;s commonly used methods that are included as part of the AP Subset are shown in Figure 28.2 below.</p>
</li>
        <ol type="a">
          <li>
            <p>The put method adds a key/value association to the map. If the key was previously associated with a different value, the old association is broken and put returns the value previously associated with the key. If the key had no prior association with a value, <code>put</code> returns <code>null</code>. </p>
          </li>
          <li>
            <p>The <code>get</code> method returns the value associated with a given key or <code>null</code> if the key is not associated with any value. </p>
          </li>
          <li>
            <p>The <code>containsKey</code> method returns <code>true</code> if a given key is associated with a value and <code>false</code> otherwise.</p>
          </li>
        </ol>
        <li>      Figure 28.2 below lists the methods of the <code>Map</code> interface that are a part of the AP subset. </li>
</ol>
<blockquote>
  <p class="text"><code>// Adds the key-value pair to this map. Returns the<br>
    // previous value associated with specified key, or<br>
    // null if there was no mapping for key.<br>
    Object put(Object key, Object value);</code></p>
<p class="text"><code>// Returns the value to which the specified key is<br>
    // mapped, or null if the map contains no mapping<br>
    // for this key.<br>
    Object get(Object key);</code></p>
  <p class="text"><code>// Removes the mapping for this key from this map<br>
    // if present. Returns the value to which the map<br>
    // previously associated with the key, or null if<br>
    // the map contained no mapping for this key. Note<br>
    // that a return value of null may also indicate<br>
    // that this key was previously mapped to null<br>
    Object remove(Object key);</code></p>
  <p class="text"><code>// Returns true if this map contains a mapping for<br>
    // the specified key, false otherwise.<br>
    <strong>boolean</strong> containsKey(Object key);</code></p>
  <p class="text"><code>// Returns the number of key-value pairs in the map.<br>
        <strong>int</strong> size();</code></p>
  <p><span class="text"><code>// Returns a set containing the keys in this map.<br>
    Set keySet()</code></span><code><br>
    <br>
    </code><span class="text">Figure 28.2 - Methods of the Map interface included in the AP Subset</span> </p>
</blockquote>
<p>&#xA0;</p>
<br><br>
<table cellspacing="0" cellpadding="0" border="0">
  <tr>
    <td width="90%"><span class="header">F. TreeMap</span></td>
    <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 8 of 11</nobr></font></td>
  </tr>
</table>
  <br>
<ol class="text">
	<li><p>The <code>java.util.TreeMap</code> class implements the <code>Map</code> interface using a balanced binary search tree ordered by keys. In general, any <code>Comparable</code> objects may be placed into a <code>TreeMap</code> as the key. This guarantees that the keys will be in ascending order, as determined by the key object&#x2019;s <code>compareTo</code> method.</p>
	</li>
<li>
        <p>Because of the balanced binary tree implementation, the <code>TreeMap</code> class provides an <em>O</em>(<em>log n</em>) run time for the operations <code>put</code>, <code>get</code>, and <code>containsKey</code>.</p>
</li>
<li>
    <p>The following code fragment demonstrates implementation of a <code>TreeMap</code>:</p>
    <p><code>TreeMap studentMap = <strong>new</strong> TreeMap();</code></p>
    <p><code><strong>for</strong> (<strong>int</strong> recNum = 1; recNum &lt;= NUM_STUDENTS; recNum++){<br>
          &#xA0;&#xA0;Student s = new Student(); &#xA0;&#xA0;&#xA0;// declare a new Student<br>
          &#xA0;&#xA0;s.setName(...); &#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;// set the student&#x2019;s<br>
          &#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;// attributes<br>
          &#xA0;&#xA0;s.setGradeLevel(...); &#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;// ...<br>
          &#xA0;&#xA0;s.setID(...); &#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;// ...</code></p>
    <p><code> &#xA0;&#xA0;studentMap.put(s.getID(), s); // add student to the map<br>
          &#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;// using ID as the key<br>
          }<br>
          // Display the student whose key is S964413<br>
          System.out.println(studentMap.get(&quot;S964413&quot;));</code></p>
</li>
<li>
    <p>The Map interface does not specify a method for obtaining an iterator, and the <code>TreeMap</code> class does not have one. Instead, you can get the set of all keys by calling the <code>keySet</code> method, then iterate over that set to <code>get</code> all values. For example:</p>
    <p><code>TreeMap acronym = new TreeMap();<br>
            String key;<br>
          Definition value; // acronym definition</code></p>
    <p><code>acronym.put(&quot;CS&quot;, new Definition(&quot;Computer Science&quot;));<br>
  acronym.put(&quot;AP&quot;, new Definition(&quot;Advanced Placement&quot;));</code></p>
    <p><code>Set keys = acronym.keySet();<br>
            Iterator iter = keys.iterator();<br>
            <strong>while</strong> (iter.hasNext()){<br>
          &#xA0;&#xA0;key = (String)iter.next();<br>
          &#xA0;&#xA0;value = (Definition)acronym.get(key);</code></p>
    <p><code> &#xA0;&#xA0;// process value<br>
  &#xA0;&#xA0;System.out.println(key + &quot; stands for &quot; +<br>
            &#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;value.getDefinition());<br>
          }</code></p>
    <p>The output for this code fragment is</p>
    <p><code>AP stands for Advanced Placement<br>
          CS stands for Computer Science</code></p>
    <p>The values will be processed in the ascending order of keys.</p>
</li>
<li>
  <p><code>TreeMap</code> is more general than <code>TreeSet</code>. Both implement Binary Search Trees, but in <code>TreeSet</code> the values are compared to each other, while in <code>TreeMap</code>, no ordering is assumed for the values and the tree is arranged according to the order of the keys. In a way, a set is a special case of a map where a value serves as its own key.<br>
            <br>
            <code>import java.util.TreeMap;<br>
            <br>
            &#xA0;&#xA0;&#xA0;TreeMap &lt;Integer, String&gt; map = new TreeMap &lt;Integer, String&gt; ();<br>
            &#xA0;&#xA0;&#xA0;String name = &quot;John&quot;;<br>
            &#xA0;&#xA0;&#xA0;map.put(new Integer(3),name);<br>
            &#xA0;&#xA0;&#xA0;map.put(new Integer(2),&quot;Nancy&quot;);<br>
            &#xA0;&#xA0;&#xA0;map.put(new Integer(1),&quot;George&quot;);<br>
            <br>
            &#xA0;&#xA0;&#xA0;System.out.println(&#x201C;Size of map&#x201D; + map.size());<br>
            &#xA0;&#xA0;&#xA0;System.out.println(&#x201C;Person for 1: &#x201D; + map.get(1));</code></p>
</li>
</ol>
<p>&#xA0;</p>
<br><br>
<table cellspacing="0" cellpadding="0" border="0">
  <tr>
    <td width="90%"><span class="header">G. HashMap</span></td>
    <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 9 of 11</nobr></font></td>
  </tr>
</table>
  <br>
<ol class="text">
	<li>The java.util.HashMap class implements the Map interface using a hash code into an array.
      <p><code>HashMap &lt;Integer, String&gt; familyMap = <strong>new</strong> HashMap &lt;Integer, String&gt; ();<br>
  String name = &quot;John&quot;;<br>
        familyMap.put(new Integer(3),name);<br>
        familyMap.put(new Integer(2),&quot;Nancy&quot;);<br>
        familyMap.put(new Integer(1),&quot;George&quot;);<br>
        <br>
        Set &lt;Integer&gt; familyList = <strong>new</strong> TreeSet &lt;Integer&gt;();<br>
        familyList = familyMap.keySet();</code></p>
	</li>
</ol>
<p>&#xA0;</p>
<br>  
  <br>
  <table cellspacing="0" cellpadding="0" border="0">
    <tr>
      <td width="90%"><span class="header">Summary/Review</span></td>
      <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 10 of 11</nobr></font></td>
    </tr>
  </table>
  <br>
  <p class="text">The <code>java.util</code> package includes two interfaces, <code>Sets</code> and <code>Maps</code>. The <code>TreeSet</code> and the TreeMap classes implement their interfaces using balanced binary trees. If the data implements Comparable, the data will be stored in order. The <code>HashSet</code> and HashMap classes implement the <code>java.util.Map</code>. </p>
  <br><br><br><h2>Chapter 29</h2><br>  
  <br>
  <table cellspacing="0" cellpadding="0" border="0">
    <tr>
      <td width="90%"><span class="header">AB29 Introduction</span></td>
      <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 1 of 16</nobr></font></td>
    </tr>
  </table>
  <br>
  <p class="text">In this lesson, you will study a new data structure, the linked list, which is used to implement a list of elements arranged in some kind of order. This is the backbone of the LinkedList class that is part of the Java Collections. The linked list structure uses memory that shrinks and grows as needed but not in the same way as arrays. The discussion of linked lists includes the specification and implementation of a node class. This curriculum will use the node class suggested by College Board. </p>
  <p class="text">This lesson will present the common manipulations performed on a linked list: adding, removing and traversing. The concepts from this lesson will provide us with the tools to build our own more advanced data structure, the binary search tree.</p>
  <p class="text">The key topics for this lesson are:</p>
  <ol type="A" class="text">
    <li class="text"><a href="AB29-A.html">Declarations for a Linked List</a></li>
    <li class="text"><a href="AB29-B.html">Methods for Manipulating Nodes</a></li>
  <li class="text"><a href="AB29-C.html">Implementing Linked Lists</a></li>
  <li class="text"><a href="AB29-D.html">Traversing a Linked List - Method printList</a></li>
  <li class="text"><a href="AB29-E.html">Pitfalls of Linked Data Structures</a></li>
  <li class="text"><a href="AB29-F.html">Building an Ordered Linked List</a></li>
  <li class="text"><a href="AB29-G.html">Linked List Algorithms</a></li>
  <li class="text"><a href="AB29-H.html">Static vs. Dynamic Data Structures</a></li>
  <li class="text"><a href="AB29-H.html">Doubly-Linked Lists</a></li>
  <li class="text"><a href="AB29-J.html">Deleting from a Doubly-Linked List</a></li>
  </ol><br>  
  <br>
  <table cellspacing="0" cellpadding="0" border="0">
    <tr>
      <td width="90%"><span class="header"><a href="../vocabulary/index_AB.html#AB29">AB29 Vocabulary</a></span></td>
      <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 2 of 16</nobr></font></td>
    </tr>
  </table>
  <br>
  <table width="500" border="0">
    <tr class="text">
      <td>AUXILIARY POINTER</td>
      <td>DOUBLY-LINKED LIST</td>
    </tr>
    <tr class="text">
      <td>EXTERNAL POINTER</td>
      <td>INTERNAL POINTER</td>
    </tr>
    <tr class="text">
      <td>LINKED LIST</td>
      <td>NODE</td>
    </tr>
    <tr class="text">
      <td>NULL REFERENCE</td>
      <td>TRAVERSE</td>
    </tr>
    <tr class="text">
      <td>&#xA0;</td>
      <td>&#xA0;</td>
    </tr>
    <tr class="text">
      <td><strong></strong></td>
      <td>&#xA0;</td>
    </tr>
    <tr class="text">
      <td>&#xA0;</td>
      <td>&#xA0;</td>
    </tr>
    <tr class="text">
      <td>&#xA0;</td>
      <td>&#xA0;</td>
    </tr>
    <tr class="text">
      <td>&#xA0;</td>
      <td>&#xA0;</td>
    </tr>
  </table>
  <br>
  <br>  
  <br>
  <table cellspacing="0" cellpadding="0" border="0">
    <tr>
      <td width="90%"><span class="header">A. Declarations for a Linked List</span></td>
      <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 3 of 16</nobr></font></td>
    </tr>
  </table>
  <br>
  <ol class="text">
    <li><p>A linked list is a sequence of elements arranged one after another, with each element connected to the next element by a &#x201C;link.&#x201D; The link to the next element is combined with each element in a component called a <em>node</em>. A node is represented pictorially as a box with an element written inside of the box and a link drawn as an arrow and used to connect one node to another.</p>
      <p align="center"><img src="http://iws.punahou.edu/user/DKiang/apcs/LessonAB29/images/Fig_AB29_1.gif" width="362" height="88"><br>
        Figure 29-1      </p>
          <p>In addition to connecting two nodes, the links also place the nodes in a particular order. In Figure 29-1 above, the five nodes form a chain with the first node linked to the second, the second node linked to the third node, and so on until the last node is reached. The last node is a special case since it is not linked to another node and its link is indicated with a diagonal line.</p>
        </li>
        <li><p>Each node contains two pieces of information: an element and a reference to another node. This can be implemented as a Java class for a node using an instance variable to hold the element, and a second instance variable that is a reference to another node as follows.    </p>
       <p><code><strong>public</strong> class ListNode{<br>
            &#xA0;&#xA0;<strong>private</strong> Object value; &#xA0;// the element stored in this node<br>
            &#xA0;&#xA0;<strong>private</strong> ListNode next; // reference to next node in List<br>
            ...<br>
          }</code></p>
        </li>
        <li><p>The declaration seems circular and in some ways it is, but the compiler will allow such definitions. A <code>ListNode</code> will have two data members, an <code>Object</code> and a reference to another <code>ListNode</code>. The instance variable next will point to the next <code>ListNode</code> in a linked list.</p></li>
        <li>
          <p>The <code>ListNode</code> class is constructed so that the elements of a list are objects (i.e., have the <code>Object</code> data type). Since any class extends <code>Object</code>, you can put any kind of object into a list, including arrays and strings.</p>
</li>
        <li>
          <p>Whenever a program builds and manipulates a linked list, the nodes are accessed through one or more references to nodes. Typically, a program includes a reference to the first node (<code>first</code>) and a reference to the last node (<code>last</code>).</p>
          <p><code>ListNode first;<br>
          ListNode last;</code></p>
          <p> A program can create a linked list as shown below in Figure 29.2. The <code>first</code> and <code>last</code> reference variables provide access to the first and last nodes of the list.</p>
        <p align="center"><img src="http://iws.punahou.edu/user/DKiang/apcs/LessonAB29/images/Fig_AB29_2.gif" width="353" height="91"><br>
          Figure 29.2          </p>
        </li>
<li><p>Figure 29-2 illustrates a linked list with a reference to the first node where the list terminates at the final node (indicated by a diagonal line in the reference field of the last node). Instead of a reference to another node, the final node contains <em>a null reference</em>. Recall that null is a special Java constant that can be used for any reference variable that has nothing to refer to. There are several common situations where the null reference is used:</p>
  <ol type="a">
    <li>
      <p>When a reference variable is first declared and there is not yet an object for it to refer to, it can be given an initial value of the null reference.</p>
    </li>
    <li>
      <p>The null reference occurs in the link part of the final node of a linked list.</p>
    </li>
    <li>
      <p>When a linked list does not yet have any nodes, the null reference is used for the <code>first</code> and <code>last</code> reference variables to indicate an empty list.</p>
    </li>
  </ol>
</li>
  </ol>
  <p>&#xA0;</p>
  <br><br>  
  <table cellspacing="0" cellpadding="0" border="0">
    <tr>
      <td width="90%"><span class="header">B. Methods for Manipulating Nodes</span></td>
      <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 4 of 16</nobr></font></td>
    </tr>
  </table>
  <br>
  <ol class="text">
    <li><p>Methods for the <code>ListNode</code> class will consist of those for creating, accessing, and modifying nodes.</p>
    </li>
      <li>
          <p>The constructor for the <code>ListNode</code> class is responsible for creating a node and initializing the two instance variables of a new node. </p>
          <p><code><strong>public</strong> ListNode(Object initValue, ListNode initNext) {<br>
            // post: constructs a new element with object initValue,<br>
            // followed by next element<br>
      &#xA0;&#xA0;value = initValue;<br>
      &#xA0;&#xA0;next = initNext;<br>
      }</code></p>
      </li>
  <li>
          <p>Here is an example of code to create the first node of a linked list.</p>
          <p><code>ListNode first;<br>
          first = <strong>new</strong> ListNode(<strong>new</strong> Integer(23), null);</code></p>
          <p>After execution of the two statements, <code>first</code> refers to the header node of a small linked list that contains just one node with the <code>Integer 23</code>.</p>
  <p><img src="http://iws.punahou.edu/user/DKiang/apcs/LessonAB29/images/Fig_AB29_3.gif" width="202" height="86"></p>
  </li>
<li>
          <p>Getting and setting the data and link of the node are accomplished with getter and setter methods as follows.</p>
          <blockquote>
            <p><code><strong>public</strong> Object getValue(){<br>
              // post: returns value associated with this element<br>
            &#xA0;&#xA0;<strong>return</strong> value;<br>
            }</code></p>
            <p><code><strong>public</strong> ListNode getNext(){<br>
              // post: returns reference to next value in list</code><br>
              <code> &#xA0;&#xA0;<strong>return</strong> next;<br>
              }</code></p>
            <p><code><strong>public void</strong> setValue(Object theNewValue) {<br>
              &#xA0;&#xA0;value = theNewValue;<br>
            }</code></p>
          </blockquote>
    </li>
    <blockquote>
          <p><code><strong>public void</strong> setNext(ListNode theNewNext) {<br>
            // post: sets reference to new next value<br>
            &#xA0;&#xA0;next = theNewNext;<br>
            }</code></p>
    </blockquote>
    <li>The following segment of code using <code>ListNode</code> will illustrate the syntax of accessing the data members of a <code>ListNode</code>.
          <p><code>ListNode list;</code></p>
          <p><code>list = <strong>new</strong> ListNode(<strong>new</strong> Integer(13), <strong>null</strong>);</code></p>
          <p><code>System.out.println(&quot;The node contains: &quot; +<br>
            &#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;(Integer)list.getValue());</code></p>
          <p><code>list.setValue(<strong>new</strong> Integer(17));<br>
        System.out.println(&quot;The node contains: &quot; +<br>
            &#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;(Integer)list.getValue());<br>
            </code></p>
          <p><em><code><u>Run Output:</u></code></em></p>
          <p><code>The node contains: 13<br>
            The node contains: 17</code></p>
        </li>
  </ol>
  <p>&#xA0;</p>
  <br><br>
<table cellspacing="0" cellpadding="0" border="0">
  <tr>
    <td width="90%"><span class="header">C. Implementing Linked Lists</span></td>
    <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 5 of 16</nobr></font></td>
  </tr>
</table>
  <br>
<ol class="text">
    <li><p>In this section, we will look at a class that implements a linked list of <code>ListNode</code> objects. This class encapsulates the list operations that maintain the links as the list is modified. To keep the class simple, we will implement only a singly linked list, and the list class will supply direct access only to the first list element.</p>
    </li>
<li>
        <p>The <code>SinglyLinkedList</code> class holds a reference, <code>first</code>, to the first <code>ListNode</code> (or null, if the list is completely empty). Access to the first node is provided by the <code>getFirst</code> method. If the list is empty, a <code>NoSuchElementException</code> is thrown (see Lesson A13, <em>Exceptions</em>).</p>
        <blockquote>
          <p><code><strong>public class</strong> SinglyLinkedList{<br>
          &#xA0;&#xA0;<strong>private</strong> ListNode first;</code></p>
          <p><code> &#xA0;&#xA0;<strong>public</strong> SinglyLinkedList(){<br>
          &#xA0;&#xA0;&#xA0;&#xA0;first = null;<br>
          &#xA0;&#xA0;}</code></p>
          <p><code> &#xA0;&#xA0;<strong>public</strong> Object getFirst(){<br>
          &#xA0;&#xA0;&#xA0;&#xA0;<strong>if</strong> (first == <strong>null</strong>){<br>
          &#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<strong>throw new</strong> NoSuchElementException();<br>
          &#xA0;&#xA0;&#xA0;&#xA0;}<strong>else</strong><br>
          &#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<strong>return</strong> first.getValue();<br>
          &#xA0;&#xA0;}<br>
          }</code> </p>
        </blockquote>
		</li><li>
        <p>Additional nodes are added to the head of the list with the <code>addFirst</code> method. When a new link is added to the list, it becomes the head of the list, and the link that the old list had becomes the next link:</p>
        <blockquote>
          <p><code><strong>public class</strong> SinglyLinkedList{</code></p>
          <p><code> &#xA0;&#xA0;...<br>
          &#xA0;&#xA0;<strong>public void</strong> addFirst(Object value) {<br>
          &#xA0;&#xA0;&#xA0;&#xA0;first = <strong>new</strong> ListNode(value, first);<br>
          &#xA0;&#xA0;}<br>
          &#xA0;&#xA0;...<br>
          }</code></p>
		  </blockquote>
		  </li>
		  <li>
          <p>The statement <code>ListNode(value, first)</code> invokes the ListNode constructor. The line of code</p>
        <p><code>first = <strong>new</strong> ListNode(value, first);</code></p>
        <p> is broken down as follows.</p>
        <ol type="a">
          <li>
            <p>The <strong><code>new</code></strong> command allocates enough memory to store a <code>ListNode</code>.</p>
          </li>
          <li>
            <p>The new <code>ListNode</code> will be assigned the values of <code>value</code> and <code>first</code></p>
          </li>
          <li>
            <p>The address of this newly constructed <code>ListNode</code> is assigned to <code>first</code>.</p>
          </li>
          <li>
            <p>It is important to understand the old and new values of <code>first</code>:<br>
            </p>
          </li>
        </ol>
        <p align="center"><img src="http://iws.punahou.edu/user/DKiang/apcs/LessonAB29/images/Fig_AB29_4.gif" width="400" height="132"></p>
	    </li>
<li><p>The very first time that <code>addFirst()</code> is called, the instance variable, first, will be null. A new node is constructed with the values value and <strong><code>null</code></strong> and now <code>first</code> points to this new node. The constructor provides a new node between the variable <code>first</code> and the node that <code>first</code> formerly referenced.</p>
        <table width="500" border="0" align="center" cellpadding="3" cellspacing="0">
          <tr valign="top">
            <td width="50%"><img src="http://iws.punahou.edu/user/DKiang/apcs/LessonAB29/images/Fig_AB29_5.gif" width="234" height="144"></td>
            <td width="50%"><span class="text">before the call of the constructor
              </span>              <p class="text">call the constructor, <code>first</code> is passed as a <strong><code>null</code></strong> value</p>
              <p class="text"><code>first</code> is changed, references the newly constructed node</p></td>
          </tr>
        </table>
</li>
        <li><p>The second time that <code>addFirst()</code> is called, first is already pointing to the <code>first</code> node of the linked list. When the constructor is called, the new node is constructed and placed between <code>first</code> and the node <code>first</code> used to point to.</p>
          <p align="center"><img src="http://iws.punahou.edu/user/DKiang/apcs/LessonAB29/images/Fig_AB29_6.gif" width="234" height="193"></p>
          <p>The value of <code>first</code> passed to the <code>ListNode</code> constructor is used to initialize the <code>next</code> field of the new node.</p>
  </li>
</ol>  <p>&#xA0;</p><br><br>
<table cellspacing="0" cellpadding="0" border="0">
  <tr>
    <td width="90%"><span class="header">D. Traversing a Linked List - Method printList</span></td>
    <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 6 of 16</nobr></font></td>
  </tr>
</table>
  <br>
  <ol class="text">
    <li>To traverse a list means to start at one end and visit all the nodes. In the case of method <code>printList</code>, the task is to print the <code>value</code> field from each node.
      <p><code><strong>public class</strong> SinglyLinkedList{</code></p>
      <p><code> &#xA0;&#xA0;...<br>
  &#xA0;&#xA0;<strong>public void</strong> printList(){<br>
  <br>
  &#xA0;&#xA0;&#xA0;&#xA0;ListNode temp = first; // start at the first node<br>
  &#xA0;&#xA0;&#xA0;&#xA0;<strong>while</strong> (temp != <strong>null</strong>) {<br>
  &#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;System.out.print(temp.getValue() + &quot; &quot;);<br>
  &#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;temp = temp.getNext(); // go to next node<br>
  &#xA0;&#xA0;&#xA0;&#xA0;}<br>
  &#xA0;&#xA0;}<br>
  &#xA0;&#xA0;...<br>
  }</code></p>
      </li>
      <ol type="a">
            <li>
              <p>We need a variable to traverse through the list so temp is created. Because <code>temp</code> is an alias to <code>first</code>, we can use it to traverse the list without altering the reference to the start of the list. The <code>ListNode</code> variable, <code>temp</code>, will contain <strong><code>null</code></strong> when we are done.</p>
            </li>
            <li>
              <p>Until <code>temp</code> equals <strong><code>null</code></strong>, the <strong><code>while</code></strong> loop will do two steps at each node; print the data field, then advance the <code>temp</code> reference.</p>
            </li>
            <li>
              <p>The statement, <code>temp = temp.getNext()</code>, is a very important one, this moves temp to the next node. </p>
            </li>
        </ol>
  </ol>
  <p>&#xA0;</p><br><br>
<table cellspacing="0" cellpadding="0" border="0">
  <tr>
    <td width="90%"><span class="header">E. Pitfalls of Linked Data Structures</span></td>
    <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 7 of 16</nobr></font></td>
  </tr>
</table>
  <br>
<ol class="text">
	<li><p>A linked list must end with a <strong><code>null</code></strong> value. Without such a marker at the end of the list, a routine cannot &#x201C;see&#x201D; the end of the data structure. This assignment of a <strong><code>null</code></strong> value at the end of the list is often taken care of when a new node is packaged or through the use of a constructor.</p>
	</li>
<li>
        <p>When a reference variable is <strong><code>null</code></strong>, it is a programming error to invoke one of its methods or to try to access one of its instance variables. For example, a program may maintain a reference to the first node of a linked list, as follows:</p>
        <blockquote>
          <p><code>ListNode first;</code></p>
        </blockquote>
        <p>Initially, the list is empty and <code>first</code> is the null reference. At this point, it is a programming error to invoke one of the <code>first</code>&#x2019;s methods. The error would occur as a <code>NullPointerException</code>.</p>
    </li>
</ol>
<blockquote>&#xA0;</blockquote>
<p>&#xA0;</p>
<br><br>
<table cellspacing="0" cellpadding="0" border="0">
  <tr>
    <td width="90%"><span class="header">F. Building an Ordered Linked List</span></td>
    <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 8 of 16</nobr></font></td>
  </tr>
</table>
  <br>
<ol class="text">
	<li>
	  <p>If data are supplied in unordered fashion, building an ordered linked list from the data becomes a harder problem. Consider the following cases for inserting a new value into the linked list:</p>
	<p>a. Insert the new value into an empty list.</p>
	  <p>b. Insert the new value at the front of the list.</p>
	  <p>c. Insert the new value at the end of the list.</p>
	  <p>d. Insert the new value between two nodes.</p>
	</li>
<li>
        <p>Suppose the data was supplied in this order.</p>
        <p> 42 6 95 12 &lt;eof&gt;</p>
        <p>The resulting ordered linked list looks like this:</p>
<p align="center"><img src="http://iws.punahou.edu/user/DKiang/apcs/LessonAB29/images/Fig_AB29_7.gif" width="412" height="115"></p>
</li>
<li>
          <p>Two of the cases are easy to identify and solve: the empty list case (a) and placing the new value at the front of the list (b). Adding the value to the end of the list (c) is easy to identify and solve if you maintain a marker to the last node. To assist us in our discussion of linked list algorithms, two definitions will be helpful:</p>
          <ol type="a">
            <li>
              <p>An internal pointer is one that exists inside a node. An internal pointer joins one node to the next in the linked list. </p>
            </li>
            <li>
              <p>An external pointer is one that points to a node from outside the list. Every linked data structure must have at least one external pointer that allows access to the data structure. The linked list in this lesson has two external pointers, <code>first</code> and <code>last</code>.</p>
            </li>
          </ol>
</li>
  <li>
    <p>Suppose a fifth value, 61, is to be inserted into the list (d). We can see in the diagram that it will go between the 42 and 95. When inserting a value into the list, we will use helping external pointers, also called auxiliary pointers.        </p>
  </li>
          <li><p>It is possible to find the attachment point using just one auxiliary pointer, but we will use two: <code>temp</code> and <code>back</code>. Using two external pointers makes the hookup easier. Finding the attachment point involves a search. The pointer, <code>temp</code>, starts at <code>first</code> and is moved through the list until it is just past the insertion point. The pointer, <code>back</code>, trails <code>temp</code> by one position at each step of the search.</p>
		  
        <blockquote>
          <p><code><strong>while</strong> we haven&apos;t found the attachment point{<br>
            &#xA0;&#xA0;&#xA0;back = temp; &#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//move back up to temp<br>
            &#xA0;&#xA0;&#xA0;temp = temp.getNext(); //advance temp one node ahead<br>
            }</code></p>
        </blockquote>
  <p> The position of our pointers at the end of the search:</p>
        <p align="center"><img src="http://iws.punahou.edu/user/DKiang/apcs/LessonAB29/images/Fig_AB29_8.gif" width="440" height="209"></p>
        </li>
<li>
          <p>The new node needs to be placed between <code>back</code> and <code>temp</code>. If we call this new node <code>newValue</code>, then inserting it into the list would consist of the following steps. </p>
          <blockquote>
            <p> <code>back.setNext(newValue);<br>
              newValue.setNext(temp);</code></p>
          </blockquote>
      </li>
</ol>
<p>&#xA0;</p><br><br>
<table cellspacing="0" cellpadding="0" border="0">
  <tr>
    <td width="90%"><span class="header">G. Linked-List Algorithms</span></td>
    <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 9 of 16</nobr></font></td>
  </tr>
</table>
  <br>
<ol class="text">
	<li><p>Searching an ordered linked list is a sequential search process similar to what we just covered with insertion. A linked list is not a random access data structure. You cannot jump to the middle of a linked list. Only sequential moves are possible. The search function could return a value or a pointer to that cell.</p>
	</li>
<li>
        <p>Deleting a value involves the following steps:</p>
        <ol type="a">
          <li>
            <p>Locating the value (if it exists) to be deleted.</p>
          </li>
          <li>
            <p>Re-hooking pointers around the node to be deleted.</p>
          </li>
          <li>Updating <code>first</code> or <code>last</code> if necessary.</li>
        </ol>
</li>
</ol>
<p>&#xA0;</p>
<br><br>
<table cellspacing="0" cellpadding="0" border="0">
  <tr>
    <td width="90%"><span class="header">H. Static vs. Dynamic Data Structures</span></td>
    <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 10 of 16</nobr></font></td>
  </tr>
</table>
  <br>
<ol class="text">
	<li><p>An array is a somewhat static data structure that has the following advantages and disadvantages:</p>
	  <table width="500" border="0" cellspacing="0" cellpadding="0">
        <tr>
          <td bgcolor="#000000"><table width="500" border="0" cellspacing="1" cellpadding="3">
              <tr bgcolor="#FFFFFF" class="text">
                <td width="50%"><div align="center"><strong>Advantages of an array</strong></div></td>
                <td width="50%"><div align="center"><strong>Disadvantages of an array</strong></div></td>
              </tr>
              <tr bgcolor="#FFFFFF" class="text">
                <td><p>1. Easy to implement and use<br>
              2. Fast, random-access feature </p></td>
                <td>1. Memory is usually wasted<br>
            2. Inserting/deleting is slower</td>
              </tr>
          </table></td>
        </tr>
      </table><br>
	</li>
<li><p>A linked list (LL) is a dynamic data structure that has the following advantages and disadvantages:</p>
        <table width="500" border="0" cellspacing="0" cellpadding="0">
          <tr>
            <td bgcolor="#000000"><table width="500" border="0" cellspacing="1" cellpadding="3">
                <tr bgcolor="#FFFFFF" class="text">
                  <td width="50%"><div align="center"><strong>Advantages of LL</strong></div></td>
                  <td width="50%"><div align="center"><strong>Disadvantages of LL</strong></div></td>
                </tr>
                <tr valign="top" bgcolor="#FFFFFF" class="text">
                  <td><p>1. Memory is allocated when the program is run; therefore, the data structure is only as big as it needs to be.<br>
              2. Memory is conserved.</p></td>
                  <td>1. Each node of the list takes more memory.<br>
            2. The data structure is not random access so processing must be done in sequential order.</td>
                </tr>
            </table></td>
          </tr>
        </table>
</li>
    </ol>
	<p>&#xA0;</p>
	<br><br>
<table cellspacing="0" cellpadding="0" border="0">
  <tr>
    <td width="90%"><span class="header">I. Doubly-Linked Lists</span></td>
    <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 11 of 16</nobr></font></td>
  </tr>
</table>
  <br>
<ol class="text">
	<li><p>The node of a doubly-linked list will contain the information field and two reference fields. One reference will refer to a previous node while the other reference will refer to the next node in the list.</p>
	</li>
<li>
        <p>The following class definitions will be used:</p>
        <p><code><strong>public class</strong> DListNode{<br>
      &#xA0;&#xA0;<strong>private</strong> Object value;<br>
      &#xA0;&#xA0;<strong>private</strong> DListNode next;<br>
      &#xA0;&#xA0;<strong>private</strong> DListNode previous;<br>
      <br>
      &#xA0;&#xA0;// Constructor:<br>
      &#xA0;&#xA0;<strong>public</strong> DListNode(Object initValue,<br>
      &#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;DListNode initNext,<br>
      &#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;DListNode initPrevious){<br>
      <br>
      &#xA0;&#xA0;&#xA0;&#xA0;value = initValue;<br>
      &#xA0;&#xA0;&#xA0;&#xA0;next = initNext;<br>
      &#xA0;&#xA0;&#xA0;&#xA0;previous = initPrevious;<br>
      &#xA0;&#xA0;}<br>
      <br>
      &#xA0;&#xA0;<strong>public</strong> Object getValue(){<br>
      &#xA0;&#xA0;&#xA0;&#xA0;<strong>return</strong> value;<br>
      &#xA0;&#xA0;}<br>
      <br>
      &#xA0;&#xA0;<strong>public</strong> DListNode getNext(){ <br>
      &#xA0;&#xA0;&#xA0;&#xA0;<strong>return</strong> next;<br>
      &#xA0;&#xA0;}<br>
      <br>
      &#xA0;&#xA0;<strong>public</strong> DListNode getPrevious(){<br>
      &#xA0;&#xA0;&#xA0;&#xA0;<strong>return</strong> previous;<br>
      &#xA0;&#xA0;}<br>
      <br>
      &#xA0;&#xA0;<strong>public void</strong> setValue(Object theNewValue){<br>
      &#xA0;&#xA0;&#xA0;&#xA0;value = theNewValue;<br>
      &#xA0;&#xA0;}<br>
      <br>
      &#xA0;&#xA0;<strong>public void</strong> setNext(DListNode theNewNext){<br>
      &#xA0;&#xA0;&#xA0;&#xA0;next = theNewNext;<br>
      &#xA0;&#xA0;}<br>
      <br>
      &#xA0;&#xA0;<strong>public void</strong> setPrevioust(DListNode theNewPrevious){<br>
      &#xA0;&#xA0;&#xA0;&#xA0;previous = theNewPrevious;<br>
      &#xA0;&#xA0;}<br>
      }</code></p>
</li>
<li>    Figure 29-3 illustrates a doubly-linked list, of type <code>DListNode</code> containing <code>Integer</code> objects.
  <p align="center"><img src="http://iws.punahou.edu/user/DKiang/apcs/LessonAB29/images/Fig_AB29_9.gif" width="500" height="96"><br>
    Figure 29-3  </p>
</li>
<li>
          <p>A <strong><code>null</code></strong> value must be placed at each end of the list to signify the end of the data structure. In the diagram, a <strong><code>null</code></strong> is indicated with the diagonal line.</p>
  </li>
  <li>
          <p>A doubly-linked list should have two external references to access the data structure. In the case above, <code>first</code> and <code>last</code> are the two entry points.</p>
  </li>
  <li>
          <p>A doubly-linked list can be traversed in either direction.</p>
  </li>
  <li>
          <p>Inserting values into an ordered doubly-linked list is a similar process to the algorithm used with a singly-linked list. However, the number of reference manipulations will double.</p>
  </li>
  <li>
        <p>The addition of a new node to a position between two existing nodes will require four reference hookups.</p>
  </li>
</ol>
<p>&#xA0;</p>
<br><br>
<table cellspacing="0" cellpadding="0" border="0">
  <tr>
    <td width="90%"><span class="header">J. Deleting from a Doubly-Linked List</span></td>
    <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 12 of 16</nobr></font></td>
  </tr>
</table>
  <br>
<ol class="text">
	<li><p>The same special cases that we saw for singly-linked lists also apply to doubly-linked lists.</p>
	</li>
<li>
      <p>Deletions require updating both the <code>next</code> and <code>previous</code> pointers.</p>
    </li>
</ol>
<p>&#xA0;</p>
<br>  
  <br>
  <table cellspacing="0" cellpadding="0" border="0">
    <tr>
      <td width="90%"><span class="header">Summary/Review</span></td>
      <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 13 of 16</nobr></font></td>
    </tr>
  </table>
  <br>
  <p class="text">You have just learned your first dynamic data structure, a linked list. The concept of indirection makes dealing with references a bit more difficult, but careful reading and lots of diagrams will help. Following a working program is a good start, but only by writing code will you develop proficiency with lists. The doubly-linked list is an extension of the basic linked list.</p>
  <br><br><br><h2>Chapter 30</h2><br>  
  <br>
  <table cellspacing="0" cellpadding="0" border="0">
    <tr>
      <td width="90%"><span class="header">AB30 Introduction</span></td>
      <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 1 of 15</nobr></font></td>
    </tr>
  </table>
  <br>
  <p class="text">A binary tree is a different kind of data structure that demands new terminology and algorithms. A binary tree node will have two pointers available for linking with other nodes, resulting in diagrams that look like inverted trees. A binary tree will begin with one node at the top and branch out below. As you might expect, the potential of going one of two different ways leads to some challenging programming problems. In fact, the idea of trying one direction and then backtracking naturally leads to recursion.</p>
  <p class="text">The key topics for this lesson are:</p>
  <ol type="A" class="text">
    <li class="text"><a href="AB30-A.html">Binary Tree Vocabulary</a></li>
    <li class="text"><a href="AB30-B.html">Building a Binary Tree</a></li>
  <li class="text"><a href="AB30-C.html">Shape of a Binary Tree</a></li>
  <li class="text"><a href="AB30-D.html"><code>Inorder</code> Tree Traversal</a></li>
  <li class="text"><a href="AB30-E.html">Preorder and Postorder Tree Traversals</a></li>
  <li class="text"><a href="AB30-F.html">Counting the Nodes in a Tree</a></li>
  <li class="text"><a href="AB30-G.html">Searching a Binary Tree</a></li>
  <li class="text"><a href="AB30-H.html">Deletion from a Binary Tree</a></li>
  <li class="text"><a href="AB30-I.html"><code>deleteTargetNode</code> Method</a></li>
  </ol><br>  
  <br>
  <table cellspacing="0" cellpadding="0" border="0">
    <tr>
      <td width="90%"><span class="header"><a href="../vocabulary/index_AB.html#AB30">AB30 Vocabulary</a></span></td>
      <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 2 of 15</nobr></font></td>
    </tr>
  </table>
  <br>
  <table width="500" border="0">
    <tr class="text">
      <td>BINARY TREE</td>
      <td>CHILD NODE</td>
    </tr>
    <tr class="text">
      <td>EDGE</td>
      <td>INORDER</td>
    </tr>
    <tr class="text">
      <td>LEAF</td>
      <td>POSTORDER</td>
    </tr>
    <tr class="text">
      <td>PARENT NODE</td>
      <td>ROOT NODE</td>
    </tr>
    <tr class="text">
      <td>PREORDER</td>
      <td>TREE TRAVERSAL</td>
    </tr>
    <tr class="text">
      <td>SUBTREE</td>
      <td>&#xA0;</td>
    </tr>
    <tr class="text">
      <td>VISITING A NODE</td>
      <td>&#xA0;</td>
    </tr>
    <tr class="text">
      <td>&#xA0;</td>
      <td>&#xA0;</td>
    </tr>
    <tr class="text">
      <td>&#xA0;</td>
      <td>&#xA0;</td>
    </tr>
  </table>
  <br>
  <br><br>  
  <table cellspacing="0" cellpadding="0" border="0">
    <tr>
      <td width="90%"><span class="header">A. Binary Tree Vocabulary</span></td>
      <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 3 of 15</nobr></font></td>
    </tr>
  </table>
  <br>
  <ol class="text">
    <li>A binary tree is a data structure where each node has two pointers, each pointing to another node or containing a <strong><code>null</code></strong> value.
      <p align="center"><img src="http://iws.punahou.edu/user/DKiang/apcs/LessonAB30/images/Fig_AB30_1.gif" width="431" height="282"></p>
    </li>
<li><p>The following binary tree terms will be defined and applied to the above example.</p>
          <ol type="a">
            <li>
              <p><u>Root node</u> - the top node in the tree; the node whose value is 52.</p>
            </li>
            <li>
              <p><u>Parent node</u> - a node that points to one or two nodes below it.</p>
            </li>
            <li>
              <p><u>Child node</u> - the node being pointed to by a parent; every node in the tree is a child to another node, except for the root node.</p>
            </li>
            <li>
              <p><u>Leaf</u> - a node that has no children</p>
            </li>
            <li>
              <p><u>Level</u> - the distance from the root, calculated by counting the shortest distance from the root to that node. Examples: 29 is stored in a node at level 1, 62 is stored in a node at level 2, 17 is stored at level 3, etc.</p>
            </li>
            <li>
              <p><u>Edge</u> - an edge joins two nodes. In the above diagram, each arrow represents an edge.</p>
            </li>
          </ol>
        </li>
        <li>
          <p>This tree is an example of an ordered binary tree that has the following property. For every parent node, a child to the right will have a larger value, while a child to the left will have a smaller value.        </p>
        </li>
        <li>
          <p>A subtree is the entire left branch or right branch of a node. For example, the left subtree of the node containing 52 has 4 nodes. The right subtree of node containing 75 has only 1 node.</p>
          </li>
        <li>
          <p>A leaf will have two <strong><code>null</code></strong> pointers.</p>
</li>
  </ol>
  <p>&#xA0;</p>
  <br><br>  
  <table cellspacing="0" cellpadding="0" border="0">
    <tr>
      <td width="90%"><span class="header">B. Building a Binary Tree</span></td>
      <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 4 of 15</nobr></font></td>
    </tr>
  </table>
  <br>
  <ol class="text">
    <li><p>The following definition of a TreeNode class will be used in the remainder of this section on building a binary tree.</p>
      <p><code><strong>public class</strong> TreeNode{<br>
  &#xA0;&#xA0;<strong>private</strong> Object value;<br>
  &#xA0;&#xA0;<strong>private</strong> TreeNode left;<br>
  &#xA0;&#xA0;<strong>private</strong> TreeNode right;</code></p>
      <p><code> &#xA0;&#xA0;<strong>public</strong> TreeNode(Object initValue, TreeNode initLeft,<br>
  &#xA0;&#xA0;TreeNode initRight) {<br>
  &#xA0;&#xA0;&#xA0;&#xA0;value = initValue;<br>
  &#xA0;&#xA0;&#xA0;&#xA0;left = initLeft;<br>
  &#xA0;&#xA0;&#xA0;&#xA0;right = initRight;<br>
  &#xA0;&#xA0;}<br>
  <br>
  &#xA0;&#xA0;<strong>public</strong> Object getValue(){<br>
  &#xA0;&#xA0;&#xA0;&#xA0;<strong>return</strong> value;<br>
  &#xA0;&#xA0;}</code></p>
      <p><code> &#xA0;&#xA0;<strong>public</strong> TreeNode getLeft(){<br>
  &#xA0;&#xA0;&#xA0;&#xA0;<strong>return</strong> left;<br>
  &#xA0;&#xA0;}</code></p>
      <p><code> &#xA0;&#xA0;<strong>public</strong> TreeNode getRight(){<br>
  &#xA0;&#xA0;&#xA0;&#xA0;<strong>return</strong> right;<br>
  &#xA0;&#xA0;}</code></p>
      <p><code> &#xA0;&#xA0;<strong>public void</strong> setValue(Object theNewValue) {<br>
  &#xA0;&#xA0;&#xA0;&#xA0;<strong>value</strong> = theNewValue;<br>
  &#xA0;&#xA0;}</code></p>
      <p><code> &#xA0;&#xA0;<strong>public void</strong> setLeft(TreeNode theNewLeft) {<br>
  &#xA0;&#xA0;&#xA0;&#xA0;left = theNewLeft;<br>
  &#xA0;&#xA0;}</code></p>
      <p><code> &#xA0;&#xA0;<strong>public void</strong> setRight(TreeNode theNewRight) {<br>
  &#xA0;&#xA0;&#xA0;&#xA0;right = theNewRight;<br>
  &#xA0;&#xA0;}<br>
  }</code></p>
    </li>
      <li>
          <p>Suppose the following integers were inserted into a sorted binary tree in the indicated order.</p>
          <p>26 79 14 99 53 9 35 21 87</p>
          <p>Draw the resulting binary tree.</p>
      </li>
  <li><p>You will notice that as each node was added to the tree, it was inserted as a leaf. The insert algorithm will be recursive.</p>
    <table width="400" border="0" cellspacing="0" cellpadding="0">
      <tr>
        <td bgcolor="#000000"><table width="100%" border="0" cellspacing="1" cellpadding="3">
          <tr>
            <td bgcolor="#FFFFFF" class="text"><strong>See <a href="transparency/Transparency_AB30.1.doc">Transparency AB30.1</a>, <em>Building a Binary Tree</em></strong></td>
          </tr>
        </table></td>
      </tr>
    </table><br>
  </li>
<li><p>Given this parameter list for the insert method, develop the pseudocode below it.</p>
    <p><code><strong>void</strong> insert (TreeNode node, Object data)<br>
            // Will insert data into an ordered binary tree. <br>
          // The solution is recursive.</code></p>
  </li>
  </ol>
  <p>&#xA0;</p>
  <br><br>
<table cellspacing="0" cellpadding="0" border="0">
  <tr>
    <td width="90%"><span class="header">C. Shape of a Binary Tree</span></td>
    <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 5 of 15</nobr></font></td>
  </tr>
</table>
  <br>
<ol class="text">
    <li>
      <p>The shape of a binary tree will affect its performance as a data structure and is dependent on the initial order of the data set used to build the tree.</p>
    </li>
<li>
  <p>If the data set is already sorted (1 2 3 4...), the binary tree is essentially a linked list with an unused left pointer in each node.</p>
</li>
<li>
    <p>A data set in random order will lead to a more balanced tree.</p>
</li>
<li>
    <p>Ideally, we want binary trees that are balanced with almost equal numbers of nodes in each subtree of every node. A balanced binary tree is defined as follows: </p>
    <p>For every node in the tree, the number of nodes in its left subtree is equal to the number of nodes in its right subtree, plus or minus one. </p>
    <p>Please note: Balancing binary trees will not be covered in this curriculum.</p>
</li>
</ol>  <p>&#xA0;</p><br><br>
<table cellspacing="0" cellpadding="0" border="0">
  <tr>
    <td width="90%"><span class="header">D. Inorder Tree Traversal</span></td>
    <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 6 of 15</nobr></font></td>
  </tr>
</table>
  <br>
  <ol class="text">
    <li>
      <p>At first glance, printing out the information in a binary tree, in ascending order, does not appear to be a simple task. The example diagram in Transparency AB30.1, <em>Building a Binary Tree</em> illustrates that the first node value printed should be 9, and getting there is fairly simple. The next value is 14, then 21. Then, there&apos;s a major issue - how do we get back to the root node whose value is 26? This is a backtracking problem that is elegantly solved using recursion.</p>
    </li>
  <li>
    <p>A tree traversal is an algorithm that visits every node in the tree. To visit a node means to process something regarding the data stored in the node. For now, visiting the node will involve printing the <em>value</em> object field.</p>
  </li>
  <li>
      <p>An <code>inorder</code> tree traversal visits every node in a certain order. Each node is processed in the following sequence.</p>
      <ul class="textd">
        <li>Traverse the left subtree inorder</li>
      <li>Visit node</li>
      <li>Traverse the right subtree inorder</li>
      </ul>
      <p>Notice that actually visiting the node occurs between the two recursive calls.</p>
  </li>
  <li>
      <p>Here is the code for the <code>inorder</code> method.</p>
      <p><code><strong>void</strong> inorder (TreeNode temp) {<br>
          <strong>&#xA0;&#xA0;if</strong> (temp != null) {<br>
          &#xA0;&#xA0;&#xA0;&#xA0;inorder (temp.getLeft());<br>
          &#xA0;&#xA0;&#xA0;&#xA0;System.out.println(temp.getValue());<br>
          &#xA0;&#xA0;&#xA0;&#xA0;inorder (temp.getRight());<br>
          <strong>&#xA0;&#xA0;</strong>}<br>
          }</code></p>
  </li>
  <li>    To see how the method, inorder works, study the following table:</li>
  </ol>
  <blockquote>    
    <table width="500" border="0" cellspacing="0" cellpadding="0">
      <tr>
        <td bgcolor="#000000"><table width="500" border="0" cellspacing="1" cellpadding="3">
          <tr bgcolor="#FFFFFF" class="text">
            <td width="60%"><strong>Step</strong></td>
            <td width="40%"><div align="center"><strong>Current Node Value</strong></div></td>
          </tr>
          <tr bgcolor="#FFFFFF" class="text">
            <td><code>inorder</code> is passed the root node</td>
            <td><div align="center"><code>26</code></div></td>
          </tr>
          <tr bgcolor="#FFFFFF" class="text">
            <td><code>inorder</code> is passed the left subtree of 26</td>
            <td><div align="center"><code>14</code></div></td>
          </tr>
          <tr bgcolor="#FFFFFF" class="text">
            <td><code>inorder</code> is passed the left subtree of 14</td>
            <td><div align="center"><code>9</code></div></td>
          </tr>
          <tr bgcolor="#FFFFFF" class="text">
            <td><code>inorder</code> is passed the left subtree of 9</td>
            <td><div align="center"><code>null</code></div></td>
          </tr>
          <tr bgcolor="#FFFFFF" class="text">
            <td>Output 9</td>
            <td><div align="center"><code>9</code></div></td>
          </tr>
          <tr bgcolor="#FFFFFF" class="text">
            <td><code>inorder</code> is passed the right subtree of 9</td>
            <td><div align="center"><code>null</code></div></td>
          </tr>
          <tr bgcolor="#FFFFFF" class="text">
            <td>Output 14</td>
            <td><div align="center"><code>14</code></div></td>
          </tr>
          <tr bgcolor="#FFFFFF" class="text">
            <td><code>inorder</code> is passed the right subtree of 14</td>
            <td><div align="center"><code>21</code></div></td>
          </tr>
          <tr bgcolor="#FFFFFF" class="text">
            <td><code>inorder</code> is passed the left subtree of 21</td>
            <td><div align="center"><code>null</code></div></td>
          </tr>
          <tr bgcolor="#FFFFFF" class="text">
            <td>Output 21</td>
            <td><div align="center"><code>21</code></div></td>
          </tr>
          <tr bgcolor="#FFFFFF" class="text">
            <td><code>inorder</code> is passed the right subtree of 21</td>
            <td><div align="center"><code>null</code></div></td>
          </tr>
          <tr bgcolor="#FFFFFF" class="text">
            <td>Output 26</td>
            <td><div align="center"><code>26</code></div></td>
          </tr>
          <tr bgcolor="#FFFFFF" class="text">
            <td><code>inorder</code> is passed the right subtree of 26</td>
            <td><div align="center"><code>79</code></div></td>
          </tr>
          <tr bgcolor="#FFFFFF" class="text">
            <td>Continue processing</td>
            <td><div align="center"></div></td>
          </tr>
        </table></td>
      </tr>
    </table>
  </blockquote>
  <p>&#xA0;</p>
  <blockquote>
    <p>&#xA0;</p>
  </blockquote><br><br>
<table cellspacing="0" cellpadding="0" border="0">
  <tr>
    <td width="90%"><span class="header">E. Preorder and Postorder Tree Traversals</span></td>
    <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 7 of 15</nobr></font></td>
  </tr>
</table>
  <br>
<ol class="text">
	<li><p>A preorder tree traversal processes each node in a different order.</p>
	  <ul class="textd">
	    <li>Visit the node</li>
	    <li>Process the left subtree preorder</li>
	  <li>Process the right subtree preorder</li>
	  </ul>
	  <p>The only difference is that we visit the root first, then go left, then right. The preorder output of the same binary tree will be:</p>
	  <p><code>26 14 9 21 79 53 35 99 87</code></p>
	</li>
<li>
        <p>A postorder tree traversal has this order:</p>
        <ul class="textd">
          <li>Process the left subtree postorder</li>
        <li>Process the right subtree postorder</li>
        <li>Visit the node</li>
        </ul>
        <p>The prefix &#x201C;post&#x201D; refers to after, hence the location of visiting the node after the recursive calls. The printout of the same tree will be as follows:</p>
        <p><code>9 21 14 35 53 87 99 79 26</code></p>
    </li>
</ol>
<blockquote>&#xA0;</blockquote><p>&#xA0;</p>
<br><br>
<table cellspacing="0" cellpadding="0" border="0">
  <tr>
    <td width="90%"><span class="header">F. Counting the Nodes in a Tree</span></td>
    <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 8 of 15</nobr></font></td>
  </tr>
</table>
  <br>
<ol class="text">
	<li>	  
	  <p>A standard binary tree algorithm is to count the number of nodes in the tree. Here is a pseudocode version.</p>
	<ul class="textd">
	    <li>Count the left subtree recursively</li>
	    <li>Count the current node as one</li>
	<li>Count the right subtree recursively</li>
	</ul><br>
	</li>
<li><p>As you develop the code, consider what base case will terminate the recursion.</p></li>
</ol>
<p>&#xA0;</p><br><br>
<table cellspacing="0" cellpadding="0" border="0">
  <tr>
    <td width="90%"><span class="header">G. Searching a Binary Tree</span></td>
    <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 9 of 15</nobr></font></td>
  </tr>
</table>
  <br>
<ol class="text">
	<li><p>Searching an ordered binary tree can be solved iteratively or recursively. Here is the iterative version:</p>
	  <p><code>TreeNode find(TreeNode root, Comparable valueToFind) {<br>
  &#xA0;&#xA0;TreeNode node = root;<br>
  <br>
  &#xA0;&#xA0;<strong>while</strong> (node != <strong>null</strong>) {<br>
  &#xA0;&#xA0;&#xA0;&#xA0;<strong>int</strong> result = valueToFind.compareTo(node.getValue());<br>
  &#xA0;&#xA0;&#xA0;&#xA0;<strong>if</strong> (result == 0)<br>
  &#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<strong>return</strong> node;<br>
  &#xA0;&#xA0;&#xA0;&#xA0;<strong>else if</strong> (result &lt; 0)<br>
  &#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;node = node.getLeft();<br>
  &#xA0;&#xA0;&#xA0;&#xA0;<strong>else</strong> // if (result &gt; 0)<br>
  &#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;node = node.getRight();<br>
  &#xA0;&#xA0;}<br>
  &#xA0;&#xA0;<strong>return null</strong>;<br>
  }</code></p>
	</li>
<li>
        <p>If the value is not in the tree, the node pointer will eventually hit a <strong><code>null</code></strong>.</p>
</li>
<li>
    <p>Notice the type of the argument, <code>valueToFind</code>, in the <code>find</code> method is designated as <code>Comparable. find</code>&#x2019;s code calls the <code>compareTo</code> method of the <code>valueToFind</code> object to determine the ordering relationship. We declare <code>valueToFind</code> as a <code>Comparable</code>, not just an <code>Object</code> to guarantee that it will have a <code>compareTo</code> method.</p>
</li>
<li>
    <p>A recursive version is left for you to implement as part of Lab Assignment AB30.2, <em>BS Tree continued</em>.</p>
</li>
<li><p>The order of searching an ordered binary tree is O(log<sub>2</sub>N) for the best case situation. For a perfectly balanced tree, the capacity of each level is 2<sup>level #</sup>.</p>
  <table width="500" border="0" align="center" cellpadding="3" cellspacing="0">
    <tr valign="top" class="text">
      <td><div align="center"><code>Level #
          </code>
        <p><code>0<br>
            1<br>
            2<br>
            3<br>
            4<br>
            5<br>
            etc.</code></p>
      </div></td>
      <td><div align="center"><code>Capacity of Level
          </code>
        <p><code>1<br>
            2<br>
            4<br>
            8<br>
            16<br>
            32</code></p>
      </div></td>
      <td><div align="center"><code>Capacity of Tree
          </code>
        <p><code>1<br>
            3<br>
            7<br>
            15<br>
            31<br>
            63</code></p>
      </div></td>
    </tr>
  </table>
</li>
<li>
  <p>So starting at the root node, a tree of 63 nodes would require a maximum of 5 left or right moves to find a value. The number of steps in searching an ordered binary tree is approximately O(log<sub>2</sub>N). </p>
</li>
</ol>
<p>&#xA0;</p>
<br><br>
<table cellspacing="0" cellpadding="0" border="0">
  <tr>
    <td width="90%"><span class="header">H. Deletion from a Binary Tree</span></td>
    <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 10 of 15</nobr></font></td>
  </tr>
</table>
  <br>
<ol class="text">
	<li>
	  <p>Deleting a node involves two steps:</p>
	<ol type="a">
	    <li>Locating the node to be deleted.</li>
	    <li>Eliminating that node from the data structure.</li>
	</ol><br>
	</li>
	<li>
	  <p>After locating the node to be deleted, we must determine the nature of that node.</p>
      <ol type="a">
	  <li>If it is a leaf, make the parent node point to <strong><code>null</code></strong>.</li>
      <li>If it has one child on the right, make the parent node point to the right child.</li>
      <li>If it has one child on the left, make the parent node point to the left child.</li>
      <li>If it has two children, the problem becomes much harder to solve.</li>
      </ol>
    <p align="center"><img src="http://iws.punahou.edu/user/DKiang/apcs/LessonAB30/images/Fig_AB30_1a.gif" width="384" height="291"><br>
      <u>Diagram 30-1</u> </p>
	</li>
<li>
          <p>The leaf node containing the value 43 will be easy to delete. The parent node of the node containing 43 will change its right pointer to <strong><code>null</code></strong>.        </p>
      </li>
      <li><p>Deleting a node with one child on the right, like the node with value 10, will involve rerouting the node from its parent to its single right child.</p></li>
      <li>
          <p>But deleting the node with value 29, a node with two children, involves breaking off subtrees and reattaching them at the proper location.</p>
</li>
      <li>
          <p>The code to implement deletion from a binary tree is given in <a href="HAB30_1DeletionFromABinaryTree.html" target="_blank">Handout AB30.1</a>, <em>Deletion from a Binary Tree</em>. The recursive <code>deleteHelper</code> method that locates the node to be deleted is given below:</p>
        <code><strong>public void</strong> delete(Comparable target){<br>
&#xA0;&#xA0;&#xA0;&#xA0;myRoot = deleteHelper(myRoot, target);<br>
        }
        </code>
          <p><code><strong>private</strong> TreeNode deleteHelper(TreeNode node, Comparable target){<br>
  &#xA0;&#xA0;<strong>if</strong> (node == <strong>null</strong>) {<br>
  &#xA0;&#xA0;&#xA0;&#xA0;<strong>throw new</strong> NoSuchElementException();<br>
  &#xA0;&#xA0;}<br>
  &#xA0;&#xA0;<strong>else if</strong> (target.equals(node.getValue())){<br>
  &#xA0;&#xA0;&#xA0;&#xA0;<strong>return</strong> deleteTargetNode(node);<br>
  &#xA0;&#xA0;}<br>
  &#xA0;&#xA0;<strong>else if</strong> (target.compareTo(node.getValue()) &lt; 0)<br>
  &#xA0;&#xA0;&#xA0;&#xA0;node.setLeft(deleteHelper(node.getLeft(), target));<br>
  &#xA0;&#xA0;&#xA0;&#xA0;<strong>return</strong> node;<br>
  &#xA0;&#xA0;}<br>
  &#xA0;&#xA0;<strong>else</strong>{ //target.compareTo(root.getValue()) &gt; 0 <br>
  &#xA0;&#xA0;&#xA0;&#xA0;node.setRight(deleteHelper(node.getRight(), target));<br>
  &#xA0;&#xA0;&#xA0;&#xA0;<strong>return</strong> node;<br>
  &#xA0;&#xA0;}<br>
          }</code></p>
</li>
      <li>
          <p>The <code>delete</code> method passes the root of the tree (<code>myRoot</code>) and the target item to be located to the <code>deleteHelper</code> method. The <code>deleteHelper</code> method receives a <code>TreeNode</code> reference alias (<code>node</code>). The <code>deleteHelper</code> method has 4 scenarios:</p>
          <ol type="a">
            <li><code>node == <strong>null</strong></code>, the value does not exist in the tree, throw a NoSuchElementException.</li>
            <li>We found the correct node (<code>target.equals(node.getValue())</code>), call <code>deleteTargetNode</code> and pass it <code>node</code>.</li>
            <li>Did not find the node yet, recursively call <code>deleteHelper</code> and pass it the internal reference to the left child.</li>
            <li>Recursively call <code>deleteHelper</code> and pass it the internal reference to the right child.</li>
          </ol>
</li>
</ol>
<p>&#xA0;</p><br><br>
<table cellspacing="0" cellpadding="0" border="0">
  <tr>
    <td width="90%"><span class="header">I. deleteTargetNode Method</span></td>
    <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 11 of 15</nobr></font></td>
  </tr>
</table>
  <br>
<ol class="text">
	<li><p>The <code>deleteHelper</code> method finds the node to be deleted and calls <code>removeTargetNode</code>, passing a reference to the <code>TreeNode</code> target as shown in the following method:</p>
	  <p><code><strong>private</strong> TreeNode deleteTargetNode(TreeNode target){<br>
  &#xA0;&#xA0;<strong>if</strong> (target.getRight() == <strong>null</strong>) {<br>
  &#xA0;&#xA0;&#xA0;&#xA0;<strong>return</strong> target.getLeft();<br>
  &#xA0;&#xA0;}<br>
  &#xA0;&#xA0;<strong>else if</strong> (target.getLeft() == <strong>null</strong>) {<br>
  &#xA0;&#xA0;&#xA0;&#xA0;<strong>return</strong> target.getRight();<br>
  &#xA0;&#xA0;}<br>
  &#xA0;&#xA0;<strong>else if</strong> (target.getLeft().getRight() == <strong>null</strong>) {<br>
  &#xA0;&#xA0;&#xA0;&#xA0;target.setValue(target.getLeft().getValue());<br>
  &#xA0;&#xA0;&#xA0;&#xA0;target.setLeft(target.getLeft().getLeft());<br>
  &#xA0;&#xA0;&#xA0;&#xA0;<strong>return</strong> target;<br>
  &#xA0;&#xA0;}<br>
  &#xA0;&#xA0;<strong>else</strong>{ // left child has right child<br>
  <br>
  &#xA0;&#xA0;&#xA0;&#xA0;TreeNode marker = target.getLeft();<br>
  &#xA0;&#xA0;&#xA0;&#xA0;<strong>while</strong> (marker.getRight().getRight() != <strong>null</strong>)<br>
  &#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;marker = marker.getRight();<br>
  &#xA0;&#xA0;&#xA0;&#xA0;target.setValue(marker.getRight().getValue());<br>
  &#xA0;&#xA0;&#xA0;&#xA0;marker.setRight(marker.getRight().getLeft());<br>
  &#xA0;&#xA0;&#xA0;&#xA0;<strong>return</strong> target;<br>
  &#xA0;&#xA0;}<br>
  }</code></p>
	</li>
<li><p>The algorithm for deletion employed in the <code>deleteTargetNode</code> method is.</p>
  <ol type="a">
            <li>
              <p>Node to be deleted has no left (or right) subtree (one child). Make the link from the parent refer to the left (or right) subtree. Note that for a leaf node the link from the parent will be set to null.</p>
            </li>
            <li>
              <p>Node to be deleted has non-empty left and right subtrees (two children). Change the node value to the largest value in the left subtree, and then delete the largest value from the left subtree. (The deletion of the largest value must be either scenario a or b above.)</p>
            </li>
          </ol>
</li>
<li>
  <p>The leaf and one child cases are handled in <code>deleteTargetNode</code> as follows:</p>
          <p><code>...<br>
              <strong>if</strong> (target.getRight() == <strong>null</strong>){<br>
            &#xA0;&#xA0;<strong>return</strong> target.getLeft();<br>
            }<br>
            <strong>else if</strong> (target.getLeft() == <strong>null</strong>){<br>
            &#xA0;&#xA0;<strong>return</strong> target.getRight();<br>
            }<br>
            ...</code></p>
          <p>These cases are left for you and your teacher to trace.</p>
</li>
  <li><p>The two-child case is more difficult and involves changing the node value to the largest value in the left subtree, then deleting the largest value from the left subtree. The rightmost node will be the node with the greatest value in the left subtree.</p></li>
  <li>    In Diagram 30-2 below, we will work with a smaller version of the same binary tree that we used in Diagram 30-1. Here&#x2019;s what happens if we wish to delete the node with value 75.
    <p align="center"><img src="http://iws.punahou.edu/user/DKiang/apcs/LessonAB30/images/Fig_AB30_2.gif" width="482" height="271"><br>
      <u>Diagram 30-2</u> </p>
  </li>
<li><p>Here are the steps for deleting a node having two children in which the left child has no right.</p>
    <ol type="a">
        <li><p>Copy the contents of the left child of target and set it as the current value.</p>
        <p><code>target.setValue(target.getLeft().getValue());</code></p>
        <p>As shown in Diagram 30-2 above, the value 75 is replaced with 62.</p></li>
        <li><p>Reattach the left subtree to maintain an ordered tree. The left subtree of the node reference by target will now point to the node containing the value 58.</p>
        <p><code>target.setLeft(target.getLeft().getLeft());</code></p>
        <p>As shown in the Diagram 30-2 above, since the node that originally contained the value 62 is no longer referenced, it is removed (garbage collected).</p></li>
    </ol>
    <p align="center"><img src="http://iws.punahou.edu/user/DKiang/apcs/LessonAB30/images/Fig_AB30_3.gif" width="481" height="298"><br>
      <u>Diagram 30-3</u></p>
</li>
<li>
          <p>In Diagram 30-3 above, we will work with the left subtree of the same binary tree that we used in Diagram 30-1. Here are the steps for deleting a node containing the value 52. In this case, the node has two children and the left child has a right child.
          </p>
        <ol type="a">
            <li><p>Position marker to access the node with the largest value in the left subtree. This is the rightmost node in the left subtree.</p>
              <p><code>TreeNode marker = target.getLeft();<br>
                  <strong>while</strong> (marker.getRight().getRight() != <strong>null</strong>)<br>
              marker = marker.getRight();</code></p>
              <p>As shown in Diagram 30-3 above, marker now references the node pointing to the node with largest value in the left subtree (43).</p>
            </li><li><p>Copy the contents of the right child of marker and set it as the current value.</p>
              <p><code>target.setValue(marker.getRight().getValue());</code></p>
            <p>As shown in Diagram 30-3 above, the value 52 is replaced with 43.</p></li>
            <li><p>Delete the largest value from the right subtree. Reattach the right subtree to maintain an ordered tree.</p>
              <p><code>marker.setRight(marker.getRight().getLeft());</code></p>
            <p>As shown in Diagram 30-3 above, the node containing the value 43 is no longer referenced.</p></li>
          </ol>
    <p align="center"><img src="http://iws.punahou.edu/user/DKiang/apcs/LessonAB30/images/Fig_AB30_4.gif" width="400" height="308"><br>
      <u>Diagram 30-4</u> </p>
</li>
<li>
          <p>This entire process for the two-child case could be directed the other way. Again, suppose the node with value 52 is to be deleted from the original tree. Referring to Diagram 30-4 above, the steps would be:
          </p>
      </li>
</ol>
<ol class="text">
  <ol type="a">
          <li>
            <p>Access the node with the smallest value in the right subtree. This is the leftmost node in the right subtree.</p>
          </li>
          <li>
            <p>Copy the contents (58) and set it as the current value.</p>
          </li>
          <li>
            <p>Delete the smallest value from the left subtree. Reattach the left subtree to maintain an ordered tree.</p>
          </li>
      </ol>
</ol><br>  
  <br>
  <table cellspacing="0" cellpadding="0" border="0">
    <tr>
      <td width="90%"><span class="header">Summary/Review</span></td>
      <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 12 of 15</nobr></font></td>
    </tr>
  </table>
  <br>
  <p class="text">This lesson introduced the Binary Search Tree and its algorithms. The most important topic of this lesson pertains to recursive algorithms used to process binary trees. An understanding of recursive tree traversals will be attained by studying the examples and drawing lots of pictures.</p>
  <br><br><br><h2>Chapter 31</h2><br>  
  <br>
  <table cellspacing="0" cellpadding="0" border="0">
    <tr>
      <td width="90%"><span class="header">AB31 Introduction</span></td>
      <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 1 of 10</nobr></font></td>
    </tr>
  </table>
  <br>
  <p class="text">Earlier in Lesson A9, <em>Recursion</em>, the concept of a stack was introduced. A stack is a linear data structure with well-defined insertion and deletion routines. Data is both placed and taken from the &#x2018;top&#x2019; of the stack. Queues are very similar to stacks, except that Queues remove data from the front while adding data at the end.</p>
  <p class="text">The key topics for this lesson are:</p>
  <ol type="A" class="text">
    <li class="text"><a href="AB31-A.html">Stacks</a></li>
    <li class="text"><a href="AB31-B.html">The Java Stack Class</a></li>
  <li class="text"><a href="AB31-C.html">Queues</a></li>
  <li class="text"><a href="AB31-D.html">The Java Queue Interface</a></li>
  </ol><br>  
  <br>
  <table cellspacing="0" cellpadding="0" border="0">
    <tr>
      <td width="90%"><span class="header"><a href="../vocabulary/index_AB.html#AB31">AB31 Vocabulary</a></span></td>
      <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 2 of 10</nobr></font></td>
    </tr>
  </table>
  <br>
  <table width="500" border="0">
    <tr class="text">
      <td width="50%"><code>add</code></td>
      <td width="50%">POP</td>
    </tr>
    <tr class="text">
      <td>PUSH</td>
      <td>QUEUE</td>
    </tr>
    <tr class="text">
      <td><code>remove</code></td>
      <td>STACK</td>
    </tr>
    <tr class="text">
      <td>TOP</td>
      <td>&#xA0;</td>
    </tr>
    <tr class="text">
      <td>&#xA0;</td>
      <td>&#xA0;</td>
    </tr>
    <tr class="text">
      <td>&#xA0;</td>
      <td>&#xA0;</td>
    </tr>
    <tr>
      <td>&#xA0;</td>
      <td>&#xA0;</td>
    </tr>
  </table>
  <br>
  <br>  
  <br>
  <table cellspacing="0" cellpadding="0" border="0">
    <tr>
      <td width="90%"><span class="header">A. Stacks</span></td>
      <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 3 of 10</nobr></font></td>
    </tr>
  </table>
  <br>
  <ol class="text">
    <li><p>A stack is a linear data structure.</p>
    </li>
  <li>
        <p> All additions to and deletions from a stack occur at the top of the stack.  The last item pushed onto the stack will be the first item removed.  A stack is sometimes referred to as a LIFO (&apos;Last-In, First-Out&apos;) structure.</p>
  </li>
  <li>
    <p> Two of the more important stack operations involve pushing data onto a stack and popping data off the stack.</p>
  </li>
  <li>    Diagram 31-1 (below) illustrates the <em>push</em> operation:
    <p align="center"><img src="http://iws.punahou.edu/user/DKiang/apcs/LessonAB31/images/Fig_AB31_1.gif" width="318" height="197"><br>
      <u>Diagram 31-1: Push Operation</u> </p>
  </li>
<li>          Diagram 31-2 illustrates the <em>pop</em> operation:</li>
  <blockquote>
    <p align="center" class="text"><img src="http://iws.punahou.edu/user/DKiang/apcs/LessonAB31/images/Fig_AB31_2.gif" width="376" height="187"><br>
      <u>Diagram 31-2: Pop Operation</u> </p>
  </blockquote>
    <li>Stacks are very useful for implementing recursion. The local values of a method are placed on a stack each time the method calls itself. When the method returns, the stack is popped to restore the local values for that call. Another example of using a stack structure is when a web browser stores the URLs that are visited. When a new URL is visited it is placed on a stack. When the back button is used, the stack is popped.</li>
  </ol>
  <p>&#xA0;</p><br><br>  
  <table cellspacing="0" cellpadding="0" border="0">
    <tr>
      <td width="90%"><span class="header">B. The Java Stack Class</span></td>
      <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 4 of 10</nobr></font></td>
    </tr>
  </table>
  <br>
  <ol class="text">
    <li>The AP subset requires students to know the following methods of the <code>java.util.Stack</code>:</li>
    <blockquote>
      <p><code><strong>boolean</strong> empty()<br>
	        //Returns true if the Stack has no elements.<br>
	        Object peek()<br>
	        //Returns the top element without removing it. <br>
	        Object pop()<br>
	        //Returns and removes the top element. <br>
	        Object push(Object item)<br>
	        //Adds item to the top of the Stack.</code></p>
    </blockquote>
        <li>To declare a reference variable for a Stack, do the following.        </li>
<blockquote>
          <p> <code>Stack &lt;ClassName&gt; myStack = <br>
  &#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<strong>new</strong> Stack &lt;ClassName&gt; ();</code></p>
        </blockquote>
        <li>Here is a short example showing how to create, populate, and deconstruct a Stack:
            <blockquote>
              <p> <code>Stack &lt;Integer&gt; s = <strong>new</strong> Stack &lt;Integer&gt; ();<br>
              <br>
              <strong>for</strong>(<strong>int</strong> i = 1; i &lt;= 5; i++){<br>
  &#xA0;&#xA0;&#xA0;&#xA0;s.push(i);<br>
          }<br>
          <br>
          <strong>for</strong>(Integer temp : s){<br>
  &#xA0;&#xA0;&#xA0;&#xA0;System.out.println(temp);<br>
          }</code></p>
              <p><code> <strong>while</strong>(!s.empty()){<br>
  &#xA0;&#xA0;&#xA0;&#xA0;System.out.println(s.pop());<br>
          }<br>
                  </code></p>
              <p><code> Output:</code></p>
              <p><code>1<br>
              2<br>
              3<br>
              4<br>
              5<br>
              5<br>
              4<br>
              3<br>
              2<br>
              1</code></p>
            </blockquote>
            <p>Notice that the output first prints up to five and then comes back down again. The for each loop is only treating the Stack like a List, so it is not popping any of the data off the Stack. Therefore, during the while loop, the Stack is not empty and can still be used. Also, the for each loop will start at the beginning of the List and go to the end. Because Stacks deal with all the data transactions at the top (end) of the Stack, the for each will go in the opposite order that the pop method will.</p>
        </li>
  </ol>
  <p>&#xA0;</p><br><br>
<table cellspacing="0" cellpadding="0" border="0">
  <tr>
    <td width="90%"><span class="header">C. Queues</span></td>
    <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 5 of 10</nobr></font></td>
  </tr>
</table>
  <br>
<ol class="text">
    <li><p>A queue is a linear data structure that is similar to waiting in line. A queue has both a front and an end.</p>
    </li>
<li>
        <p>Data must always enter the queue at the end and leave from the front of the line. This type of action can be summarized as FIFO (&apos;First-In, First-Out&apos;).</p>
</li>
<li>
  <p>A queue is the appropriate data structure when simulating waiting in line. A printer that is part of a multi-user network usually processes print commands on a FIFO basis. A queue would be used to maintain the order of the print jobs.</p>
</li>
</ol>  <p>&#xA0;</p><br><br>
<table cellspacing="0" cellpadding="0" border="0">
  <tr>
    <td width="90%"><span class="header">D. The Java Queue Interface</span></td>
    <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 6 of 10</nobr></font></td>
  </tr>
</table>
  <br>
  <ol class="text">
    <li>The AP subset requires students to know the following methods of the <code>java.util.Queue</code> interface:</li>
  <blockquote>
      <p><code><strong>void</strong> add(Object item)<br>
          <br>
          //Adds item to the end of the Queue.<br>
          <strong>boolean</strong> isEmpty()<br>
          //Returns true if the Queue has no elements.<br>
          Object peek()<br>
          //Returns the top element without removing it. <br>
          Object remove()<br>
          //Returns and removes the first element.</code></p>
    </blockquote>
        <li>To declare a reference variable for a Queue, do the following:        </li>
<blockquote>
          <p><code>Queue &lt;ClassName&gt; myQ = <br>
  &#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<strong>new</strong> LinkedList &lt;ClassName&gt; ();</code></p>
        </blockquote>
        <li>
          <p>This is an easy way to create a new Queue object without having to create a whole new class to implement the Queue interface. There are other ways to implement a Queue but this is the only way that AP requires.</p>
        </li>
        <li>Here is a short example showing how to create, populate, and deconstruct a Queue.
          <blockquote>
            <p class="text"> <code>Queue &lt;Integer&gt; q = <strong>new</strong> LinkedList &lt;Integer&gt; ();<br>
              <br>
              <strong>for</strong>(<strong>int</strong> i = 1; i &lt;= 5; i++){<br>
          &#xA0;&#xA0;&#xA0;&#xA0;q.add(i);<br>
          }<br>
          <br>
          <strong>for</strong>(Integer temp : q){<br>
          <code>&#xA0;&#xA0;&#xA0;&#xA0;</code>System.out.println(temp);<br>
          }</code></p>
            <p class="text"><code> <strong>while</strong>(!q.isEmpty()){<br>
                <code>&#xA0;&#xA0;&#xA0;&#xA0;</code>System.out.println(q.remove());<br>
              }</code></p>
            <p class="text"><code>Output:</code></p>
            <p class="text"><code>1<br>
              2<br>
              3<br>
              4<br>
              5<br>
              1<br>
              2<br>
              3<br>
              4<br>
              5</code></p>
          </blockquote>
        </li>
  </ol>
  <blockquote>
<p class="text">In this example, both loops print the exact same thing. This is because a Queue adds data to the end and takes data from the front, so it is going from the front to the end when removing data, just like the for each loop.</p>
</blockquote>  <p>&#xA0;</p><br>  
  <br>
  <table cellspacing="0" cellpadding="0" border="0">
    <tr>
      <td width="90%"><span class="header">Summary/Review</span></td>
      <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 7 of 10</nobr></font></td>
    </tr>
  </table>
  <br>
  <p class="text">The stack is what makes recursive algorithms possible. In Lab Assignment AB31.1, <em>Inorder</em>, a better understanding of the recursive <em>inorder</em> function used to traverse a binary tree will be gained.</p>
  <br><br><br><h2>Chapter 32</h2><br>  
  <br>
  <table cellspacing="0" cellpadding="0" border="0">
    <tr>
      <td width="90%"><span class="header">AB32 Introduction</span></td>
      <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 1 of 8</nobr></font></td>
    </tr>
  </table>
  <br>
  <p class="text">In the labs in previous lessons, you have searched a data file containing ID and inventory information in a variety of ways. Of the search algorithms studied, the fastest search algorithm was O(log<sub>2</sub>N) for a binary tree or binary search of an ordered array. It is possible to improve on these algorithms, reducing the order of searching to O(1). The data structure used to accomplish this is called a hash table, and the O(1) search is referred to as hashing.</p>
  <p class="text">An example of hashing frequently occurs in schools, when students line up into 26 lines, each line representing the first letter of their last name. Another example occurs when one large group or list of student schedules is broken down into smaller groupings or lists, often by grade level, for easier distribution. This is what hash-coded data storage is about - breaking up and reorganizing one big list into many smaller lists.</p>
  <p class="text">The key topics for this lesson are:</p>
  <ol type="A" class="text">
    <li><a href="AB32-A.html">Hashing Schemes</a></li>
    <li><a href="AB32-B.html">Dealing with Collisions</a></li>
  <li><a href="AB32-C.html">Order of a Hash-Coded Data Search</a></li>
  <li><a href="AB32-D.html">HashSet and HashMap</a></li>
  </ol><br>  
  <br>
  <table cellspacing="0" cellpadding="0" border="0">
    <tr>
      <td width="90%"><span class="header"><a href="../vocabulary/index_AB.html#AB32">AB32 Vocabulary</a></span></td>
      <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 2 of 8</nobr></font></td>
    </tr>
  </table>
  <br>
  <table width="500" border="0">
    <tr class="text">
      <td width="50%">COLLISIONS</td>
      <td width="50%">HASHING</td>
    </tr>
    <tr class="text">
      <td>HASH KEY</td>
      <td>HASH TABLE</td>
    </tr>
    <tr class="text">
      <td>&#xA0;</td>
      <td>&#xA0;</td>
    </tr>
    <tr class="text">
      <td>&#xA0;</td>
      <td>&#xA0;</td>
    </tr>
    <tr class="text">
      <td>&#xA0;</td>
      <td>&#xA0;</td>
    </tr>
    <tr class="text">
      <td>&#xA0;</td>
      <td>&#xA0;</td>
    </tr>
    <tr>
      <td>&#xA0;</td>
      <td>&#xA0;</td>
    </tr>
  </table>
  <br>
  <br>  
  <br>
  <table cellspacing="0" cellpadding="0" border="0">
    <tr>
      <td width="90%"><span class="header">A. Hashing Schemes</span></td>
      <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 3 of 8</nobr></font></td>
    </tr>
  </table>
  <br>
  <ol class="text">
    <li>
      <p>The example of distributing student schedules illustrates a natural means of hashing. The process can be simplified even further by organizing the schedules into piles by the first letter of the last name.</p>
    </li>
    <li>
      <p>A hashing scheme involves converting a key piece of information into a specific location, thus reducing the amount of searching in the data structure. Instead of working with the entire list or tree of data, the hashing scheme tells you exactly where to store that data or search for it.</p>
    </li>
  <li>
    <p><img src="http://iws.punahou.edu/user/DKiang/apcs/LessonAB32/images/Fig_AB32_1.gif" width="100" height="72" align="right">One important bar code system used by retail stores is the UPC A code<sup>1</sup>, which involves a sequence of 10 digits. This system provides for 10 billion different possible products, 0 - 9,999,999,999 (which equals 10<sup>10</sup> - 1). For quick access, an array of 10 billion locations would be nice, but wasteful in terms of computer memory. Since it is unlikely that a store would carry such a huge number of items, a system is needed to store a list of products in a reasonably sized array.</p>
  </li>
  <li>
    <p>A cash register using a bar code scanner needs a very quick response time when an item is scanned. The 10-digit bar code is read, the item is searched for in the store&apos;s database, and the price is returned to that register. While searching algorithms of the order (log2N) are relatively fast, we may want an even faster algorithm.</p>
  </li>
  <li>
    <p>Suppose hypothetically that a store maintains a database of 10,000 bar codes out of the possible 10 billion different values. The values are stored in an array called a hash table. Because an array has direct random access to every cell, using a hashing scheme will give much faster access to the desired item. The hash table is usually sized about 1.5 to 2.0 times as big as the maximum number of values stored. (The reason for this sizing will be readily apparent.) Therefore, the store will need an array with about 15,000 locations.</p>
  </li>
  <li>    The hashing scheme tells us where item XXXXX XXXXX is stored. A hashing algorithm is a sequence of steps, usually mathematical in nature that converts a key field of information into a location in the hash table.
    <p align="center"><img src="http://iws.punahou.edu/user/DKiang/apcs/LessonAB32/images/Fig_AB32_2.gif" width="410" height="265"></p>
  </li>
<li>
          <p>These &#x201C;key-to-address transformations&#x201D; are called hashing functions or hashing algorithms. When the key is composed of character data, a numerical equivalent such as the ASCII code is used so that the mathematical processing can take place. Bar codes are numbers, so conversion is not necessary. Some common hash functions:
          </p>
          <ol type="a">
            <li><p><u>Division</u>. The key is subject to integer modulus (often a prime) equal to or slightly smaller than the desired size of the array. The result of the division determines which short list to work with in the hash table.</p></li>
            <li>
              <p><u>Midsquare</u>. The key is squared and the digits in the middle are retained for the address. This probably would not work well with bar codes because they are such large numbers.</p>
            </li>
            <li>
              <p><u>Folding</u>. The key is divided into several parts, each of which is combined and processed to give an address. For example:</p>
            <p>If the bar code = 70662 11001</p>
              <p>1) group into pairs: 70 66 21 10 01</p>
              <p>2) multiply the first three numbers together:</p>
              <p> 70 x 66 x 21 = 97020</p>
              <p>3) add this number to the last two numbers:</p>
              <p> 97020 + 10 + 01 = 97031</p>
              <p>4) find the remainder of modulo division by 14983 (the largest prime less than 15000):</p>
              <p> 97031 % 14983 = 7133</p>
              <p>5) address 7133 is the location to store bar code 70662 11001</p>
              <p>6) In the address 7133 will be stored all the fields related to this item, such as price and name of the item.</p>
            </li>
          </ol>
        </li>
      <li>
          <p>It is important to develop a good hashing function that avoids collisions in the hash table. Even when using a prime number for the divisor, it is possible for two bar codes to result in the same address, e.g. 7133. To reduce the chances of such a &#x201C;collision,&#x201D; the hash table is sized about 1.5-2.0 times the number of expected items. If the hash table in our example were sized at 10,000 (the number of items in the database) the likelihood of collisions would be increased. Try to balance the need for decreasing the number of collisions against memory limitations, hence the recommended sizing.</p>
</li>
      <li>          This advance sizing of the hash table affects the mathematics of the hashing algorithm; therefore the programmer must have a very clear idea of the number of items to be stored. The number of items must be known in advance and this number must be fairly constant during the life of the program. This limits the use of hashing to certain situations. If the number of items is unknown or varies greatly, hashing is inappropriate. </li>
  </ol>
    <blockquote>
      <p class="text"><sup>1</sup> Samples of bar code graphics and an explanation of how to read bar codes may be found at <a href="http://www.adams1.com/pub/russadam/upccode.html" target="_blank">http://www.adams1.com/pub/russadam/upccode.html</a></p>
    </blockquote>    <p>&#xA0;</p><br><br>  
  <table cellspacing="0" cellpadding="0" border="0">
    <tr>
      <td width="90%"><span class="header">B. Dealing with Collisions</span></td>
      <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 4 of 8</nobr></font></td>
    </tr>
  </table>
  <br>
  <ol class="text">
    <li>
      <p>There are two methods of creating multiple storage locations for the same address in the hash table. One solution involves a matrix, while the other uses dynamic linked lists.</p>
    </li>
    <li>
        <p>To implement the hash table as a matrix, an estimate of the maximum number of collisions at any one address must be made. The second dimension is sized accordingly. Suppose that number is estimated as 5:</p>
        <p><code>Item[][] table = <strong>new</strong> Item[15000][5];</code></p>
    </li>
  <li>
        <p>This method has some major drawbacks. The size of this data structure has suddenly increased by a factor of five. The above table will have 75,000 cells, many of which will be empty. Also, what happens if a location must deal with more than 5 collisions?</p>
  </li>
  <li>
      <p>A dynamic solution, referred to as chaining, is much better. The linked lists will only grow when values are stored in that location in the hash table. In this version, the hash table will be an array of object references.</p>
      <p><code>ListNode[] hashTable = <strong>new</strong> ListNode[MAX];</code></p>
  <p align="center"><code><img src="http://iws.punahou.edu/user/DKiang/apcs/LessonAB32/images/Fig_AB32_3.gif" width="449" height="200"></code></p>
  </li>
<li>
          <p>The order of the values in the linked lists is unimportant. If the hashing scheme is a good one, the number of collisions will be minimal.</p>
    </li>
  </ol>
  <p>&#xA0;</p><br><br>
<table cellspacing="0" cellpadding="0" border="0">
  <tr>
    <td width="90%"><span class="header">C. Order of a Hash-Coded Data Search</span></td>
    <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 5 of 8</nobr></font></td>
  </tr>
</table>
  <br>
  <ol class="text">
    <li>
      <p>After scanning an item at a cash register, the number of steps required to find the price is constant:</p>
      <ol type="a">
            <li>
              <p>Hash the bar code value and get the hash table location.</p>
            </li>
            <li>
              <p>Go to that location in the hash table, and traverse the linked list until the item is found.</p>
            </li>
            <li>
              <p>Return the price.</p>
            </li>
        </ol>
    </li>
    <li>
      <p>The number of steps in this algorithm is constant. The hashing scheme tells the program exactly where to look in the hash table; therefore, this type of search is independent of the amount of data stored. We categorize this type of algorithm as constant time, or O(1).        </p>
    </li>
        <li>
          <p>If the linked lists get lengthy, this could add a few undesirable extra steps to the process. A good hashing scheme will minimize the length of the longest list.</p>
        </li>
        <li>
        <p>An interesting alternative to linked lists is the use of ordered binary trees to deal with collisions. For example, the hash table could consist of 10,000 potential binary trees, each ordered by a key field.</p>
</li>
        <li>
      <p>Remember that determining the order of an algorithm is only a categorization, not an exact calculation of the number of steps. A hashing scheme will always take more than one step, but the number of steps is independent of the size of the data set, hence it is called O(1).</p>
</li>
  </ol>
  <p>&#xA0;</p><br><br>
<table cellspacing="0" cellpadding="0" border="0">
  <tr>
    <td width="90%"><span class="header">D. HashSet and HashMap</span></td>
    <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 6 of 8</nobr></font></td>
  </tr>
</table>
  <br>
  <ol class="text">
    <li><p>The <code>HashSet</code> and <code>HashMap</code> classes are implementations of the <code>Set</code> and <code>Map</code> interfaces from the Java standard class Library. A hash table is used to store their elements.</p>
    </li>
    <li>
        <p>The methods from the <code>HashSet</code> and <code>HashMap</code> that are included in the AP Subset are shown below:</p>
        <p><u>Methods of the HashSet Class included in the AP Subset*</u></p>
        <p><code>// Adds the specified element to this set if it is not<br>
            // already present. Returns true if the set did not already<br>
            // contain the specified element.<br>
            <strong>boolean</strong> add(Object obj);</code></p>
        <p><code>// Returns true if this set contains the specified element.<br>
            <strong>boolean</strong> contains(Object obj);</code></p>
        <p><code>// Returns an iterator over the elements in this set.<br>
            // The elements are returned in no particular order.<br>
          Iterator iterator()</code></p>
        <p><code>// Removes the specified element from this set if it is<br>
            // present. Returns true if the set contained the specified<br>
            // element.<br>
            <strong>boolean</strong> remove(Object obj);</code></p>
        <p><code>// Returns the number of elements in this set.<br>
            <strong>int</strong> size();</code></p>
        <p><u>Methods of the HashMap Class included in the AP Subset*</u></p>
        <p><code>// Returns true if this map contains a mapping for the<br>
            // specified key.<br>
            <strong>boolean</strong> containsKey(Object key);</code></p>
        <p><code>// Returns the value to which the specified key is mapped,<br>
            // or null if the map contains no mapping for this key.<br>
            <strong>boolean</strong> get(Object key);</code></p>
        <p><code>// Returns a set containing the keys in this map.<br>
          Set keySet()</code></p>
        <p><code>// Adds the key-value pair to this map. Returns the previous<br>
            // value associated with specified key, or null if there was<br>
            // no mapping for key.<br>
            <strong>boolean</strong> put(Object key, Object value);</code></p>
        <p><code>// Returns the number of key-value pairs in this map.<br>
            <strong>int</strong> size();</code></p>
    </li>
  <li>
        <p>In the <code>HashSet</code> class, a hash of the element is used to find its location in the hashtable. In the <code>HashMap</code> class, a hash of the key is used. The <code>hashCode</code> method, which exists on all objects, calculates the hash code.</p>
  </li>
  <li>
      <p>The basic operations on <code>HashSet</code> and <code>HashMap</code> objects run in constant, <code>O(1)</code>, time due to the hash table implementation employed by the class.</p>
  </li>
  <li>
    <p>The iterator that is returned by the <code>iterator</code> method of <code>HashSet</code> does not order the objects returned.</p>
  </li>
  </ol>
  <p>&#xA0;</p>
<br>  
  <br>
  <table cellspacing="0" cellpadding="0" border="0">
    <tr>
      <td width="90%"><span class="header">Summary/Review</span></td>
      <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 7 of 8</nobr></font></td>
    </tr>
  </table>
  <br>
  <p class="text">Hashing is a great strategy for storing and searching information, especially where speed is a priority. In the hashing approach, the key is converted by some hashing function into an integer that is used as an index into a hash table. Different keys may be hashed into the same index, causing collisions. The performance and space requirements for a hash table vary depending on the implementation and collision resolution method. In the best case, a hash table provides O(1) access to data, but the performance deteriorates with a lot of collisions. In the lab assignment for this lesson, students will implement a hash coded data storage scheme and determine its efficiency.</p>
  <br><br><br><h2>Chapter 33</h2><br>  
  <br>
  <table cellspacing="0" cellpadding="0" border="0">
    <tr>
      <td width="90%"><span class="header">AB33 Introduction</span></td>
      <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 1 of 9</nobr></font></td>
    </tr>
  </table>
  <br>
  <p class="text">A priority queue is essentially a list of items, each associated with a priority. In general, different items may have different priorities and we speak of one item having a higher priority than another. Given such a list, we can determine which is the highest (or the lowest) priority item in the list. Items are inserted into a priority queue in any arbitrary order. However, items are withdrawn from a priority queue in order of their priorities starting with the highest priority item first.</p>
  <p class="text">The key topics for this lesson are:</p>
  <ol type="A" class="text">
    <li class="text"><a href="AB33-A.html">Priority Queues</a></li>
    <li class="text"><a href="AB33-B.html">Heaps</a></li>
  <li class="text"><a href="AB33-C.html">Heap Deletion and Insertion</a></li>
  <li class="text"><a href="AB33-D.html">Storage of Complete Trees</a></li>
  <li class="text"><a href="AB33-E.html">The <code>PriorityQueue</code> Class</a></li>
  </ol><br>  
  <br>
  <table cellspacing="0" cellpadding="0" border="0">
    <tr>
      <td width="90%"><span class="header"><a href="../vocabulary/index_AB.html#AB33">AB33 Vocabulary</a></span></td>
      <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 2 of 9</nobr></font></td>
    </tr>
  </table>
  <br>
  <table width="500" border="0">
    <tr class="text">
      <td width="50%">COMPLETE TREE</td>
      <td width="50%">HEAP</td>
    </tr>
    <tr class="text">
      <td>PRIORITY QUEUE</td>
      <td>HEAPSORT</td>
    </tr>
    <tr class="text">
      <td>&#xA0;</td>
      <td>&#xA0;</td>
    </tr>
    <tr class="text">
      <td>&#xA0;</td>
      <td>&#xA0;</td>
    </tr>
    <tr class="text">
      <td>&#xA0;</td>
      <td>&#xA0;</td>
    </tr>
    <tr class="text">
      <td>&#xA0;</td>
      <td>&#xA0;</td>
    </tr>
    <tr>
      <td>&#xA0;</td>
      <td>&#xA0;</td>
    </tr>
  </table>
  <br>
  <br>  
  <br>
  <table cellspacing="0" cellpadding="0" border="0">
    <tr>
      <td width="90%"><span class="header">A. Priority Queues</span></td>
      <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 3 of 9</nobr></font></td>
    </tr>
  </table>
  <br>
  <ol class="text">
    <li><p>Often the items added to a queue have a priority associated with them: this priority determines the order in which they exit the queue - highest priority items are removed first. In this curriculum, the convention that will be followed is that the smallest value has the highest priority.</p>
    </li>
  <li>        For example, consider the software that manages a printer. In general, it is possible for users to submit documents for printing much more quickly than it is possible to print them. A simple solution is to place the documents in a FIFO (&apos;first in, first out&apos;) queue. In a sense, this is fair, because the documents are printed on a first-come, first-served basis.
    <p>However, a user who has submitted a short document for printing will experience a long delay when much longer documents are already in the queue. An alternative solution is to use a priority queue in which the shorter a document, the higher its priority. By printing the shortest documents first, the level of frustration experienced by the users is reduced. In fact, it can be shown that printing documents in order of their length minimizes the average time a user waits for a document.</p>
  </li>
<li>
          <p>We can use a tree structure to keep track of the items in a priority queue - which generally provides O(log n) performance for both insertion and deletion. Unfortunately, if the tree becomes unbalanced, performance will degrade to O(n) in worst cases. This will probably not be acceptable when dealing with dangerous industrial processes, nuclear reactors, flight control systems or other life-critical systems.</p>
    </li>
    <li>
          <p>There is a structure that will provide guaranteed O(log n) performance for both insertion and deletion: it&apos;s called a <em>heap</em>.</p>
    </li>
  </ol>
  <p>&#xA0;</p>
  <br><br>  
  <table cellspacing="0" cellpadding="0" border="0">
    <tr>
      <td width="90%"><span class="header">B. Heaps</span></td>
      <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 4 of 9</nobr></font></td>
    </tr>
  </table>
  <br>
  <ol class="text">
    <li><p>Heaps are based on the notion of a <em>complete tree</em>. A binary tree is called <em>completely full</em> if all its levels are filled with nodes. A binary tree is completely full if it is of height <em>h</em>, and has 2<sup>h</sup>-1 nodes. Each level contains twice as many nodes as the preceding level.</p>
    </li>
    <li>      A binary tree is termed <em>complete</em> if it has no gaps on any level. The last level may have some leaves missing on the right, as shown below:
      <p align="center"><img src="http://iws.punahou.edu/user/DKiang/apcs/LessonAB33/images/Fig_AB33_1.gif" width="508" height="152"></p>
    </li>
<li><p>A heap is a binary tree that satisfies two conditions:</p>
          <ol type="a" class="text">
          <li>it is a complete tree</li>
          <li>the value in each node does not exceed any value in that node&#x2019;s left and right subtrees</li>
          </ol>
          <p>Heaps are allowed to have more than one data item with the same value, and values in the left subtree do not have to be ranked lower than values in the right subtree.</p>
    </li>
    <li>          A heap can be used as a priority queue: the highest priority item is at the root and is trivially found. But if the root is deleted, we are left with two sub-trees and we must efficiently re-create a single tree with the heap property. The value of the heap structure is that we can both extract the highest priority item and insert a new item in O(log n) time.</li>
  </ol>  <p>&#xA0;</p><br><br>
<table cellspacing="0" cellpadding="0" border="0">
  <tr>
    <td width="90%"><span class="header">C. Heap Deletion and Insertion</span></td>
    <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 5 of 9</nobr></font></td>
  </tr>
</table>
  <br>
<ol class="text">
    <li>      Removing an item from a priority queue is straightforward if the queue is represented by a binary heap. The next item to leave the queue will always be the item at the top (root) of the heap.
      <p align="center"><img src="http://iws.punahou.edu/user/DKiang/apcs/LessonAB33/images/Fig_AB33_2.gif" width="324" height="179"></p>
    </li>
<li>  The shape of the heap is restored by removing the last leaf and placing it into the root. For the heap shown below, the position that must become empty is the one occupied by the 87. This is placed in the vacant root position.
  <p align="center"><img src="http://iws.punahou.edu/user/DKiang/apcs/LessonAB33/images/Fig_AB33_3.gif" width="328" height="169"></p>
</li>
<li>  This has violated the condition that the root must be greater than each of its children. To repair the order, we apply the &#x201C;heapify&#x201D; procedure in which the value from the root moves down the heap until it falls into place.
  <p align="center"><img src="http://iws.punahou.edu/user/DKiang/apcs/LessonAB33/images/Fig_AB33_4.gif" width="333" height="164"></p>
</li>
<li>  At each step down the value 87 is swapped with its smaller child.
  <p align="center"><img src="http://iws.punahou.edu/user/DKiang/apcs/LessonAB33/images/Fig_AB33_5.gif" width="332" height="172"></p>
</li>
<li>  The heap property still has not been restored in the left subtree. So again interchange the 87 with the smaller of its children.
  <p align="center"><img src="http://iws.punahou.edu/user/DKiang/apcs/LessonAB33/images/Fig_AB33_6.gif" width="337" height="165"></p>
</li>
<li>
        <p>We need to make at most h (recall that h is the height of the tree) interchanges of a root of a subtree with one of its children to fully restore the heap property. Thus deletion from a heap is O(log n).</p>
  </li>
  <li>        To add an item to a heap, we follow the reverse procedure. First we add the new node as the last leaf, and then apply a &#x201C;reheap up&#x201D; procedure to restore the ordering property of the heap. &#x201C;Reheap up&#x201D; moves the new node up the tree, swapping places with its parent until the order is restored. For example, adding the value 9 to the original heap would result in the following sequence of steps:
    <p align="center"><img src="http://iws.punahou.edu/user/DKiang/apcs/LessonAB33/images/Fig_AB33_7.gif" width="340" height="340"></p>
  </li>
<li>Again, we require O(log n) exchanges.</li>
</ol>  <p>&#xA0;</p><br><br>
<table cellspacing="0" cellpadding="0" border="0">
  <tr>
    <td width="90%"><span class="header">D. Storage of Complete Trees</span></td>
    <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 6 of 9</nobr></font></td>
  </tr>
</table>
  <br>
  <ol class="text">
    <li><p>The properties of a complete tree lead to a very efficient storage mechanism using n sequential locations in an array.</p>
    </li>
  <li>        
    <p>An important benefit of the array representation is that we can move around the tree, from parent to children or from child to parent, by simple arithmetic. If we number the nodes from 1 at the root then
    </p>
    <ol type="a">
          <li>the left and right children of node <code>i</code>, if they are present, are at <code>2i</code> and <code>2i+1</code></li>
      <li>the parent of node <code>i</code> is at <code>i/2</code> (truncated to an integer)</li>
    </ol><br>
  </li>
  <li><p>If <code>items</code> is the array, the root corresponds to <code>Items[1]</code>; subsequent slots in the array store the nodes in each consecutive level from left to right.</p>
    <p align="center"><img src="http://iws.punahou.edu/user/DKiang/apcs/LessonAB33/images/Fig_AB33_8.gif" width="486" height="184"></p>
  </li>
<li>In a Java implementation, it is convenient to leave <code>Items[0]</code> unused. With this numbering of nodes, the children of the node <code>Items[i]</code> can be found in <code>Items[2*i]</code> and <code>Items[2*i+1]</code>, and the parent of <code>Items[i]</code> is in <code>Items[i/2]</code>.</li>
  </ol>
  <blockquote>
    <p align="center"><img src="http://iws.punahou.edu/user/DKiang/apcs/LessonAB33/images/Fig_AB33_9.gif" width="272" height="105"></p>
  </blockquote>
  <p>&#xA0;</p>
  <br><br>
<table cellspacing="0" cellpadding="0" border="0">
  <tr>
    <td width="90%"><span class="header">E. The PriorityQueue Class</span></td>
    <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 7 of 9</nobr></font></td>
  </tr>
</table>
  <br>
<ol class="text">
	<li>The AP subset requires students to know the following methods of the <code>java.util.PriorityQueue</code>:</li>
<blockquote>
      <p><code><strong>void</strong> add(Object item)<br>
	        //Inserts item into the PriorityQueue.<br>
	        <strong>boolean</strong> isEmpty()<br>
	        //Returns true if the PriorityQueue has no //elements.<br>
	        Object peek()<br>
	        //Returns the next element without removing it.<br>
	        Object remove()<br>
	        //Returns and removes the next element according<br>
	        //to its given priority. The priority is <br>
	        //determined by the compareTo() method. Therefore <br>
	        //all elements added to the PriorityQueue must <br>
	        //implement the Comparable() interface. The <br>
	        //element with the lowest value in CompareTo() <br>
	        //will be returned.</code></p>
    </blockquote>
        <li>To declare a reference variable for a <code>PriorityQueue</code>, do the following.
          <p><code>PriorityQueue &lt;ClassName&gt; myStack = <br>
  &#xA0;&#xA0;&#xA0;&#xA0;<strong>new</strong> PriorityQueue&lt;ClassName&gt; ();</code></p>
        </li>
<li>Here is a short example showing how to create, populate, and deconstruct a PriorityQueue.
  <blockquote>
    <p><code>PriorityQueue &lt;Integer&gt; q = <strong>new</strong> PriorityQueue &lt;Integer&gt; ();<br>
          <br>
          <strong>for</strong>(<strong>int</strong> i = 5; i &gt;= 1; i--){<br>
      &#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;q.add(i);<br>
      }<br>
      <br>
      <strong>for</strong>(Integer temp : q){<br>
      &#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;System.out.println(temp);<br>
      }</code></p>
    <p><code> <strong>while</strong>(!q.isEmpty()){<br>
      &#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;System.out.println(q.remove());<br>
      }</code></p>
    <p><code>Output:</code></p>
    <p><code>1<br>
        2<br>
        3<br>
        4<br>
        5<br>
        1<br>
        2<br>
        3<br>
        4<br>
        5</code><br>
    </p>
  </blockquote>
  <p>In this example, the output prints from one to five twice. This is because the PriorityQueue will insert the elements it receives in the order of their priority rather than the order that they are received. Note: The Integer class implements Comparable.</p>
</li>
</ol>
<blockquote>
  <p>&#xA0;</p>
</blockquote><p>&#xA0;</p>
<br>  
  <br>
  <table cellspacing="0" cellpadding="0" border="0">
    <tr>
      <td width="90%"><span class="header">Summary/Review</span></td>
      <td width="200" align="right"><font size="1" face="Verdana, Arial, Helvetica"><nobr> page 8 of 9</nobr></font></td>
    </tr>
  </table>
  <br>
  <p class="text">In this lesson, we discussed the concept of heaps and priority queues. In the lab assignment, we will use Java&#x2019;s PriorityQueue class to sort a file using the <em>heapSort</em> algorithm.</p>
  <p class="text">This now concludes our coverage of different methods of data storage in the curriculum guide. As you continue in computer science, you will no doubt learn about other data structures and algorithms. Keep reading and learning!</p><br><br><br>